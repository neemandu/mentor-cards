type Mutation {
  makeCommonLink(input: CreateCommonLinkInput! ): String @function(name: "CreateCommonLink-${env}")
  createUser(input: CreateUserInput!): User @function(name: "CreateUser-${env}")
  addCardsPack(input: addCardsPackInput!): Boolean @function(name: "AddCardsPack-${env}")
  changeCardsPack(input: changeCardsPackInput!): Boolean @function(name: "ChangeCardsPack-${env}")
  updateGroupUsersList(input: groupUsersListInput!): Boolean @function(name: "UpdateGroupUsersList-${env}")
  Unsubscribe(input: unSubscribeInput!): Boolean @function(name: "UnSubscribe-${env}")
  JoinExistingGroup(input: joinExistingGroupInput!): Boolean @function(name: "JoinExistingGroup-${env}")
  DeleteGroupById(input: deleteGroupInput!): Boolean @function(name: "DeleteGroup-${env}")
  AddCouponCode(input: couponCodeInput!): About @function(name: "AddCouponCode-${env}")
  UpdatePaymentProgram(input: updatePaymentProgramInput!): Boolean @function(name: "UpdatePaymentProgram-${env}")
  GetSubscriptionPlans(input: userInput!): [SubscriptionPlan] @function(name: "GetSubscriptionPlans-${env}") @aws_cognito_user_pools @aws_api_key
  UpdateSelectedCardPacks(input: selectedCardPacksInput!): Boolean @function(name: "UpdateSelectedCardPacks-${env}")
  LikeClicked(input: cardPackIdInput!): Boolean @function(name: "IncrementCardPackLike-${env}")
  IncrementPackEntries(input: cardPackIdInput!): Boolean @function(name: "IncrementPackEntries-${env}")
  getAffiliateData(input: userInput!): [User] @function(name: "GetAffiliateData-${env}")  
  createInvoice(input: InvoicesInput!): Boolean @function(name: "CreateInvoice-${env}")  
  askTheAI(input: AiInput!): AiAnswer @function(name: "AskTheAI-${env}")  
  getInvoicesFromS3(input: userInput!): [S3Item!]! @function(name: "GetInvoicesFromS3-${env}")  
}

type S3Item {
    key: String!
    data: String!
}

type CommonLink
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  experationDate: AWSDateTime
  createdBy: String
}

type User
  @model(mutations: null)
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "username"
        operations: [read, update]
        provider: userPools
      },
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  username: ID!
  email: ID!
  phone: String
  status: String
  subscription: MonthlySubscription
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  firstProgramRegistrationDate: AWSDateTime
  groupId: String
  numberOfUsedPacks: Int
  groupRole: String
  cancellationDate: AWSDateTime
  couponCodes: [CouponCodes]
  cardsPacksIds: [String]
  providerTransactionId: String
  fullName: String
  orgMembership: OrganizationMembership @connection
  endOfTrialDate: AWSDateTime @function(name: "GetEndOfTrialDate-${env}")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  favouritePacks: [Int]
  entries: Int
  externalPacksSubscriptions: [MonthlySubscription] 
  entryDates: [AWSDateTime]
  refId: String
  myAffiliate: Affiliate @connection
  payments: [Payment]
  profession: String
  AiConversations: [AiConversation]
}

type AiConversation{
  question: String
  answer: String
  date: AWSDateTime
  threadId: String
}

type Payment
{
  id: ID!
  date: AWSDateTime
  payedMonths: Int
  amount: Float
  currency: String
  paymentWay: String
  transactionId: String
}

type Affiliate
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      },
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
    id: ID!
    affiliateUrl: String
    contactEmail: AWSEmail
    phoneNumber: String
    websiteURL: String
    paymentDetails: String
    commissionPercentage: Float
    dateJoined: AWSDateTime
    status: String 
    balance: Float
    withdraws: [Withdraw]
}

type Withdraw{
  id: ID!
  date: AWSDateTime
  amount: Float
  currency: String
  paymentWay: String
  transactionId: String
}

type MonthlySubscription {
  id: ID!
  startDate: AWSDateTime
  paymentProvider: String
  providerTransactionId: String
  subscriptionPlan: SubscriptionPlan
  includedCardPacksIds: [CardsPack] 
  cancellationDate: AWSDateTime
  nextBillingDate: AWSDateTime 
}

type SubscriptionPlan
  @model(queries: null)
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  providerPlanId: String! 
  numberOfUsers: Int
  numberOfCardPacks: Int
  billingCycleInMonths: Int
  fullPrice: Float
  discount: Float
  orgMembership: OrganizationMembership @connection
  subscriptionProviderPlanId: String 
}

type CouponCodes
  @model
  @auth(
    rules: [
      { allow: private, operations: [read], provider: userPools }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  couponCode: String
  discount: Float
  trialPeriodInDays: Int
  allowedCardsPacks: [String]
  organization: OrganizationMembership @connection
}

type Organizations
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  membersEmails: [AWSEmail]
  membership: OrganizationMembership @connection
  verifyPersonByEmail: Boolean
}

type OrganizationMembership
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  name: String
  trialPeriodInDays: Int
  numberOfallowedCardsPacks: Int
  about: About
}

type ReceiptsId
  @model
  @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
  id: ID!
  counter: Int!
}

type Group
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  groupUsers: [GroupUserRole]
  paymentProgram: SubscriptionPlan
}

type News
  @model
  @auth(
    rules: [
      { allow: private, operations: [read], provider: userPools }
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  message: String
  order: Int
}

type CardsPack
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update, delete]
        provider: userPools
      }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  imgUrl: String!
  description: String
  tags: [String]
  categories: [String]
  cards(link: String): [Category] @function(name: "GetCardsImages-${env}")
  cardsPreview: [String]
  groupsIds: [String]
  guideBook: [GuideBookElement]
  name: String
  freeUntilDate: AWSDateTime @function(name: "GetFreeUntilDate-${env}")
  about: About
  isOwnedByOrg: Boolean @function(name: "IsCardsPackOwnedByOrgForUser-${env}")
  brief: String
  likesCounter: Int
  visitorsCounter: Int
  backImgUrl: String
  isExternalPack: Boolean
  authorizedDomains: [String]
  subscriptionPlans: [SubscriptionPlan] @function(name: "GetProviderPlanId-${env}") 
  topQuestions: [String]
  usersUsage: [UserUsage]
  isFree: Boolean
  language: String
  isActive: Boolean
  guidebookUrl: String
  ownerName: String
  numberOfCards: Int @function(name: "GetNumberOfCardsInPack-${env}") 
  isHardCopyAvailable: Boolean
}

type UserUsage {
  user: String
  entries: Int
}

type Category {
  categoryName: String
  categoryStepNumber: Int
  cardsImages: [Cards]
}

type Cards {
  backImgUrl: String
  frontImgUrl: String
}

type MessageQueue
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  email: AWSEmail
  emailDeliveryTime: AWSDateTime
  phone: String
  smsDeliveryTime: AWSDateTime
  emailTemplateId: Int
  name: String
  params: AWSJSON
}

type ContactUsModel
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  name: String
  content: String
  email: String
  phone: String
}

type Invoices @model @auth(rules: [{ allow: groups, groups: ["Admins"] }]) {
  id: ID!
  email: String
  fullName: String
  customerAddress: String
  date: AWSDateTime
  invoiceRunningId: Int
  items: [InvoiceItems]
  businessName: String
  businessPhoneNumber: String
  businessAddress: String
  businessWebsite: String
  invoiceType: String
  s3Url: String
}

type InvoiceItems {
  itemName: String
  pricePerItem: Float
  numberOfItems: Int
}

type About {
  text: String
  imgUrl: String
  link: String
}

type GuideBookElement {
  name: String
  subElements: [GuideBookElement]
}

type GroupUserRole {
  email: String
  role: String
}

input updatePaymentProgramInput {
  packId: Int
  paymentProgramId: String!
  providerTransactionId: String
  fullName: String
}

input AiInput {
  question: String
}

type AiAnswer {
  generalAnswer: String
  recommendedPacks: [RecommendedPack]
}

type RecommendedPack {
  packId: Int
  reason: String
  guide: String
}

input InvoicesInput {
  id: String
  email: String
  fullName: String
  customerAddress: String
  date: AWSDateTime
  invoiceRunningId: Int
  itemName: String
  pricePerItem: Float
  numberOfItems: Int
  invoiceType: String
}

input couponCodeInput {
  couponCode: String!
}

input LanguageInput{
  language: String!
}

input deleteGroupInput {
  groupId: String!
}

input joinExistingGroupInput {
  groupId: String!
}

input CreateUserInput {
  username: String
  email: AWSEmail
  phone: String
  fullName: String
  affiliateId: String
}

input CreateCommonLinkInput {
  packId: Int
}

input addCardsPackInput {
  cardsPackId: String
}

input changeCardsPackInput {
  oldCardsPackId: String
  newCardsPackId: String
}

input groupUsersListInput {
  usernamesList: [GroupUserRoleInput]
}

input GroupUserRoleInput {
  email: String
  role: String
}

input unSubscribeInput {
  username: String!
  providerTransactionId: String
}

input userInput {
  username: String!
}

input selectedCardPacksInput {
  cardsPacksIds: [String]
}

input cardPackIdInput {
  cardsPackId: Int
}
