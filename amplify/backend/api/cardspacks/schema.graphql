type CardsPack @model @auth( rules: [{ allow: private, operations: [read] }] ) {
  id: ID!
  imgUrl: String!
  description: String
  tags: [String]
  categories: [String]
  cards: [String] @function(name: "GetCardsImagesResolver-${env}")
  cardsPreview: [String] 
  usersIds: [String] 
  groupsIds: [String]
  users: [PackOwner] @connection(keyName: "byPack", fields: ["id"])
}

type PackOwner
  @auth( rules: [{ allow: private }] )
  @model(queries: null)
  @key(name: "byPack", fields: ["packID", "userID"])
  @key(name: "byOwner", fields: ["userID", "packID"]) {
  id: ID!
  packID: ID!
  userID: ID!
  pack: CardsPack! @connection(fields: ["packID"])
  owner: User! @connection(fields: ["userID"])
}

type User 
@model 
@auth( rules: [{ allow: owner, ownerField: "username", operations: [read] }] ){
  id: ID!
  username: String!
  email: AWSEmail
  phone: String
  cardsPacks: [PackOwner] @connection(keyName: "byOwner", fields: ["id"])
  status: String
  subscription: MonthlySubscription 
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  groupId: Int
  isGroupOwner: Boolean
  groupUsers: [User] @connection
}

type MonthlySubscription {
  id: ID!
  paymentProvider: String
  providerSubscriptionId: String!
  subscriptionPlan: SubscriptionPlan 
}

type SubscriptionPlan @model @auth( rules: [{ allow: private}] ){
  id: ID!
  name: String
  description: String
  providerPlanId: String!
  numberOfUsers: Int
  numberOfCardPacks: Int
  price: Float
  discount: Float
}

