type Mutation {
  createUser(input: CreateUserInput!): User @function(name: "CreateUser-${env}")
  addCardsPack(input: addCardsPackInput!): Boolean @function(name: "AddCardsPack-${env}")
  changeCardsPack(input: changeCardsPackInput!): Boolean @function(name: "ChangeCardsPack-${env}")
  updateGroupUsersList(input: groupUsersListInput!): Boolean @function(name: "UpdateGroupUsersList-${env}")
  Unsubscribe(input: unSubscribeInput!): Boolean @function(name: "UnSubscribe-${env}")
  JoinExistingGroup(input: joinExistingGroupInput!): Boolean @function(name: "JoinExistingGroup-${env}")
  DeleteGroupById(input: deleteGroupInput!): Boolean @function(name: "DeleteGroup-${env}")
  AddCouponCode(input: couponCodeInput!): About @function(name: "AddCouponCode-${env}")
  UpdatePaymentProgram(input: updatePaymentProgramInput!): Boolean @function(name: "UpdatePaymentProgram-${env}")
  GetSubscriptionPlans(input: userInput!): [SubscriptionPlan] @function(name: "GetSubscriptionPlans-${env}") @aws_cognito_user_pools @aws_api_key
  UpdateSelectedCardPacks(input: selectedCardPacksInput!): Boolean @function(name: "UpdateSelectedCardPacks-${env}")
  LikeClicked(input: cardPackIdInput!): Boolean @function(name: "IncrementCardPackLike-${env}")
  IncrementPackEntries(input: cardPackIdInput!): Boolean @function(name: "IncrementPackEntries-${env}")
}

type User
  @model(mutations: null)
  @auth(
    rules: [
      {
        allow: owner
        ownerField: "username"
        operations: [read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  username: ID!
  email: ID!
  phone: String
  status: String
  subscription: MonthlySubscription
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  firstProgramRegistrationDate: AWSDateTime
  groupId: String
  numberOfUsedPacks: Int
  groupRole: String
  cancellationDate: AWSDateTime
  couponCodes: [CouponCodes]
  cardsPacksIds: [String]
  providerTransactionId: String
  fullName: String
  orgMembership: OrganizationMembership @connection
  endOfTrialDate: AWSDateTime @function(name: "GetEndOfTrialDate-${env}")
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  favouritePacks: [Int]
  entries: Int
  externalPacksSubscriptions: [MonthlySubscription] 
}

type MonthlySubscription {
  id: ID!
  startDate: AWSDateTime
  paymentProvider: String
  providerTransactionId: String
  subscriptionPlan: SubscriptionPlan
  includedCardPacksIds: [CardsPack] 
}

type SubscriptionPlan
  @model(queries: null)
  @auth(
    rules: [
      { allow: private, provider: userPools, operations: [read] }
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  providerPlanId: String!
  numberOfUsers: Int
  numberOfCardPacks: Int
  billingCycleInMonths: Int
  fullPrice: Float
  discount: Float
  orgMembership: OrganizationMembership @connection
}

type CouponCodes
  @model
  @auth(
    rules: [
      { allow: private, operations: [read], provider: userPools }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  couponCode: String
  discount: Float
  trialPeriodInDays: Int
  allowedCardsPacks: [String]
  organization: OrganizationMembership @connection
}

type Organizations
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  membersEmails: [AWSEmail]
  membership: OrganizationMembership @connection
}

type OrganizationMembership
  @model
  @auth(
    rules: [
      { allow: private, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  name: String
  trialPeriodInDays: Int
  numberOfallowedCardsPacks: Int
  about: About
}

type ReceiptsId
  @model
  @auth(rules: [{ allow: public, operations: [read, create, update] }]) {
  id: ID!
  counter: Int!
}

type Group
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  groupUsers: [GroupUserRole]
  paymentProgram: SubscriptionPlan
}

type News
  @model
  @auth(
    rules: [
      { allow: private, operations: [read], provider: userPools }
      { allow: public, operations: [read] }
      { allow: groups, groups: ["Admins"] }
    ]
  ) {
  id: ID!
  message: String
  order: Int
}

type CardsPack
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update, delete]
        provider: userPools
      }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  imgUrl: String!
  description: String
  tags: [String]
  categories: [String]
  cards: [Cards] @function(name: "GetCardsImages-${env}")
  cardsPreview: [String]
  groupsIds: [String]
  guideBook: [GuideBookElement]
  name: String
  freeUntilDate: AWSDateTime @function(name: "GetFreeUntilDate-${env}")
  about: About
  isOwnedByOrg: Boolean @function(name: "IsCardsPackOwnedByOrgForUser-${env}")
  brief: String
  likesCounter: Int
  visitorsCounter: Int
  backImgUrl: String
  isExternalPack: Boolean
  authorizedDomains: [String]
  subscriptionPlan: SubscriptionPlan @connection
  topQuestions: [String]
  prices: Prices
}

type Prices {
  fullYearlyPrice: Float
  fullMonthlyPrice: Float
  fullYearlyDiscountPercentage: Float
  membersSpecialYearlyPrice: Float
  membersSpecialMonthlyPrice: Float
  membersYealyDiscountPercentage: Float
}

type Cards {
  backImgUrl: String
  frontImgUrl: String
}

type MessageQueue
  @model
  @auth(
    rules: [
      {
        allow: private
        operations: [create, read, update]
        provider: userPools
      }
    ]
  ) {
  id: ID!
  email: AWSEmail
  emailDeliveryTime: AWSDateTime
  phone: String
  smsDeliveryTime: AWSDateTime
  emailTemplateId: Int
  name: String
  params: AWSJSON
}

type ContactUsModel
  @model
  @auth(rules: [{ allow: public, operations: [read, create] }]) {
  id: ID!
  name: String
  content: String
  email: String
}

type Invoices @model @auth(rules: [{ allow: groups, groups: ["Admins"] }]) {
  id: ID!
  email: String
  fullName: String
  customerAddress: String
  date: AWSDateTime
  invoiceRunningId: Int
  items: [InvoiceItems]
  businessName: String
  businessPhoneNumber: String
  businessAddress: String
  businessWebsite: String
  invoiceType: String
}

type InvoiceItems {
  itemName: String
  pricePerItem: Float
  numberOfItems: Int
}

type About {
  text: String
  imgUrl: String
  link: String
}

type GuideBookElement {
  name: String
  subElements: [GuideBookElement]
}

type GroupUserRole {
  email: String
  role: String
}

input updatePaymentProgramInput {
  paymentProgramId: String!
  providerTransactionId: String
  fullName: String
}

input couponCodeInput {
  couponCode: String!
}

input deleteGroupInput {
  groupId: String!
}

input joinExistingGroupInput {
  groupId: String!
}

input CreateUserInput {
  username: String
  email: AWSEmail
  phone: String
  fullName: String
}

input addCardsPackInput {
  cardsPackId: String
}

input changeCardsPackInput {
  oldCardsPackId: String
  newCardsPackId: String
}

input groupUsersListInput {
  usernamesList: [GroupUserRoleInput]
}

input GroupUserRoleInput {
  email: String
  role: String
}

input unSubscribeInput {
  username: String!
  providerTransactionId: String
}

input userInput {
  username: String!
}

input selectedCardPacksInput {
  cardsPacksIds: [String]
}

input cardPackIdInput {
  cardsPackId: Int
}
