type Mutation{
  updateUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @function(name: "updateUserResolver-${env}")
  createUser(input: UpdateUserInput!, condition: ModelUserConditionInput): User @function(name: "createUserResolver-${env}")
}

input ModelUserConditionInput {
  email: ModelStringInput
  phone: ModelStringInput
  status: ModelStringInput
  numberOfPacksSubstitutions: ModelIntInput
  lastPackSubstitutionDate: ModelStringInput
  numberOfPlansSubstitutions: ModelIntInput
  lastPlanSubstitutionDate: ModelStringInput
  groupId: ModelIntInput
  isGroupOwner: ModelBooleanInput
  action: ModelUserActionInput
  and: [ModelUserConditionInput]
  or: [ModelUserConditionInput]
  not: ModelUserConditionInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelUserActionInput {
  eq: UserAction
  ne: UserAction
}

input MonthlySubscriptionInput {
  id: ID!
  paymentProvider: String
  providerSubscriptionId: String!
}

input UpdateUserInput {
  id: ID!
  username: String
  email: AWSEmail
  phone: String
  status: String
  subscription: MonthlySubscriptionInput
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  groupId: Int
  isGroupOwner: Boolean
  action: UserAction
  userGroupUsersId: ID
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

type CardsPack @model @auth( rules: [{ allow: private, operations: [read] }] ) {
  id: ID!
  imgUrl: String!
  description: String
  tags: [String]
  categories: [String]
  cards: [String] @function(name: "GetCardsImagesResolver-${env}")
  cardsPreview: [String] 
  usersIds: [String] 
  groupsIds: [String]
  users: [PackOwner] @connection(keyName: "byPack", fields: ["id"])
}

type PackOwner
  @auth( rules: [{ allow: private }] )
  @model(queries: null)
  @key(name: "byPack", fields: ["packID", "userID"])
  @key(name: "byOwner", fields: ["userID", "packID"]) {
  id: ID!
  packID: ID!
  userID: ID!
  pack: CardsPack! @connection(fields: ["packID"])
  owner: User! @connection(fields: ["userID"])
}

type User 
@model (mutations: null)
@auth( rules: [ { allow: owner, ownerField: "username", operations: [read, update] },
                { allow: private, operations: [create] }] ){
  id: ID!
  username: String!
  email: AWSEmail
  phone: String
  cardsPacks: [PackOwner] @connection(keyName: "byOwner", fields: ["id"])
  status: String
  subscription: MonthlySubscription 
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  groupId: Int
  isGroupOwner: Boolean
  groupUsers: [User] @connection,
  action: UserAction!
}

enum UserAction{
  SWITCH_CARDS_PACK
  SWITCH_PAYMENT_PROGRAM
  ADD_CARDS_PACK
  CREATE_USER
}

type MonthlySubscription {
  id: ID!
  paymentProvider: String
  providerSubscriptionId: String!
  subscriptionPlan: SubscriptionPlan 
}

type SubscriptionPlan @model @auth( rules: [{ allow: private}] ){
  id: ID!
  name: String
  description: String
  providerPlanId: String!
  numberOfUsers: Int
  numberOfCardPacks: Int
  price: Float
  discount: Float
}

