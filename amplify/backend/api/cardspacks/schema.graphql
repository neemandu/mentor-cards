type Mutation {
  createUser(input: CreateUserInput!): User @function(name: "CreateUser-${env}")
  addCardsPack(input: addCardsPackInput!): Boolean @function(name: "AddCardsPack-${env}")
  changeCardsPack(input: changeCardsPackInput!): Boolean @function(name: "ChangeCardsPack-${env}")
  updatePaymentProgram(input: updatePaymentProgramInput!): Boolean @function(name: "UpdatePaymentProgram-${env}")
  updateGroupUsersList(input: groupUsersListInput!): Boolean @function(name: "UpdateGroupUsersList-${env}")
  Unsubscribe(input: unSubscribeInput!): Boolean @function(name: "UnSubscribe-${env}")
  JoinExistingGroup(input: joinExistingGroupInput!): Boolean @function(name: "JoinExistingGroup-${env}")
  DeleteGroupById(input: deleteGroupInput!): Boolean @function(name: "DeleteGroup-${env}")
}

type Query {
  GetGroupById(input: GetGroupInput!): Group
  IsInGroup(input: GetGroupInput!): Boolean
}

input joinExistingGroupInput {
  groupId: String!
}

input GetGroupInput {
  id: String!
}

input deleteGroupInput {
  groupId: String!
}

input unSubscribeInput {
  username: String!
}

input groupUsersListInput {
  usernamesList: [GroupUserRoleInput]
}

input updatePaymentProgramInput {
  paymentProgramId: String!
  providerTransactionId: String
}

input addCardsPackInput {
  cardsPackId: String
}

input changeCardsPackInput {
  oldCardsPackId: String
  newCardsPackId: String
}

input GroupUserRoleInput{
  email: String
  role: String
}

input CreateUserInput {
  username: String
  email: AWSEmail
}

type CardsPack 
@model 
{
  id: ID! @aws_api_key
  imgUrl: String! @aws_api_key
  description: String @aws_api_key
  tags: [String] @aws_api_key
  categories: [String] @aws_api_key
  cards: [String] @aws_cognito_user_pools @function(name: "GetCardsImages-${env}")
  cardsPreview: [String] @aws_api_key
  usersIds: [String] @aws_cognito_user_pools
  groupsIds: [String] @aws_cognito_user_pools
  users: [String] @aws_cognito_user_pools
  guideBook: GuideBook @aws_cognito_user_pools 
  name: String @aws_api_key
}

type GuideBook{
  subjects: [GuideBookSubject]
}

type GuideBookSubject{
  subjectName: String
  subSubjects: [SubSubject]
}

type SubSubject{
  subSubjectName: String
  questions: [String]
}

type ContactUsModel 
@model 
@auth( rules: [ { allow: private, operations: [read, create] }] ){
  id: ID!
  name: String
  content: String
  email: String
}

type User 
@model (mutations: null)
@auth( rules: [ { allow: owner, ownerField: "username", operations: [read, update] },
                { allow: private, operations: [create] }] ){
  id: ID!
  username: ID!
  email: ID!
  phone: String
  status: String
  subscription: MonthlySubscription 
  numberOfPacksSubstitutions: Int
  lastPackSubstitutionDate: AWSDateTime
  numberOfPlansSubstitutions: Int
  lastPlanSubstitutionDate: AWSDateTime
  startPayingSinceDate: AWSDateTime
  groupId: String
  numberOfUsedPacks: Int
  groupRole: String
}

type Group
@model
@auth( rules: [ { allow: private, operations: [create,read, update] }] ){
  id: ID!
  groupUsers: [GroupUserRole] 
  paymentProgram: SubscriptionPlan
}

type GroupUserRole{
  email: String
  role: String
}

type MonthlySubscription {
  id: ID!
  startDate: AWSDateTime
  paymentProvider: String
  providerTransactionId: String
  subscriptionPlan: SubscriptionPlan 
}

type SubscriptionPlan @model @auth( rules: [{ allow: private}] ){
  id: ID!
  name: String
  description: String
  providerPlanId: String!
  numberOfUsers: Int
  numberOfCardPacks: Int
  price: Float
  discount: Float
}

