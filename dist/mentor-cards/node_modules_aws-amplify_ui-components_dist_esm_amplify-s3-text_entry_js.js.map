{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-s3-text_entry_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMa,gBAAgB,GAAG,4eAAzB;AAEA,MAAMC,MAAM,GAAG,IAAIX,4DAAJ,CAAW,QAAX,CAAf;AACA,MAAMY,aAAa,GAAG,MAAM;AACxBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjBhB,IAAAA,qDAAgB,CAAC,IAAD,EAAOgB,OAAP,CAAhB;AACA;;AACA,SAAKC,WAAL,GAAmB,QAAnB;AACA;;AACA,SAAKC,KAAL,GAAab,gEAAb;AACA;;AACA,SAAKe,YAAL,GAAoBb,8EAApB;AACH;;AACKe,EAAAA,YAAY,GAAG;AAAA;;AAAA;AACjB,YAAM,KAAI,CAACC,IAAL,EAAN;AADiB;AAEpB;;AACKC,EAAAA,iBAAiB,GAAG;AAAA;;AAAA;AACtB,YAAM,MAAI,CAACD,IAAL,EAAN;AADsB;AAEzB;;AACKA,EAAAA,IAAI,GAAG;AAAA;;AAAA;AACT,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA,OAAR;AAAiBC,QAAAA,IAAjB;AAAuBV,QAAAA,WAAvB;AAAoCC,QAAAA,KAApC;AAA2CU,QAAAA,KAA3C;AAAkDC,QAAAA;AAAlD,UAAiE,MAAvE;;AACA,UAAI,CAACH,OAAD,IAAY,CAACD,IAAjB,EAAuB;AACnBZ,QAAAA,MAAM,CAACiB,KAAP,CAAa,wBAAb;AACA;AACH;;AACD,YAAMC,GAAG,GAAGL,OAAO,IAAID,IAAvB;AACAZ,MAAAA,MAAM,CAACiB,KAAP,CAAa,aAAaC,GAAb,GAAmB,KAAhC;;AACA,UAAIJ,IAAJ,EAAU;AACN,cAAMlB,+DAAgB,CAACiB,OAAD,EAAUC,IAAV,EAAgBT,KAAhB,EAAuBU,KAAvB,EAA8BX,WAA9B,EAA2CJ,MAA3C,CAAtB;AACH;;AACD,UAAI;AACA,cAAI,CAACmB,GAAL,SAAiBrB,+DAAa,CAACoB,GAAD,EAAMb,KAAN,EAAaU,KAAb,EAAoBC,UAApB,EAAgChB,MAAhC,CAA9B;AACH,OAFD,CAGA,OAAOoB,GAAP,EAAY;AACRpB,QAAAA,MAAM,CAACiB,KAAP,CAAaG,GAAb;AACA,cAAM,IAAIC,KAAJ,CAAUD,GAAV,CAAN;AACH;AAjBQ;AAkBZ;;AACDE,EAAAA,MAAM,GAAG;AACL,WAAQlC,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcA,qDAAC,CAAC,KAAD,EAAQ;AAAEmC,MAAAA,KAAK,EAAE;AAAT,KAAR,EAAqC,KAAKJ,GAAL,GAAW/B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAc,KAAK+B,GAAnB,CAAZ,GAAsC/B,qDAAC,CAAC,KAAD,EAAQ,IAAR,EAAcE,uDAAA,CAAS,KAAKiB,YAAd,CAAd,CAA5E,CAAf,CAAT;AACH;;AACkB,aAARkB,QAAQ,GAAG;AAAE,WAAO;AAC3B,iBAAW,CAAC,cAAD,CADgB;AAE3B,cAAQ,CAAC,cAAD;AAFmB,KAAP;AAGpB;;AAzCoB,CAA5B;AA2CAxB,aAAa,CAACyB,KAAd,GAAsB3B,gBAAtB","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-s3-text.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-39969785.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { A as AccessLevel } from './storage-types-f257c0f2.js';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-3f32c42a.js';\nimport './constants-d1abe7de.js';\nimport '@aws-amplify/storage';\nimport { p as putStorageObject, a as getTextSource } from './storage-helpers-48c373a0.js';\n\nconst amplifyS3TextCss = \":host{--container-color:var(--amplify-smoke-white);--border-color:var(--amplify-light-grey);--font-size:var(--amplify-text-md);--text-color:var(--amplify-secondary-color)}.text-container{background-color:var(--container-color);border:1px solid var(--border-color);border-radius:5px;margin-bottom:10px}pre{display:block;margin:0.5rem 0;padding:0.5rem;line-height:1rem;max-height:50rem;font-size:var(--font-size);color:var(--text-color);word-break:break-all;overflow-y:scroll;overflow-x:auto}\";\n\nconst logger = new Logger('S3Text');\nconst AmplifyS3Text = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** The content type header used when uploading to S3 */\n        this.contentType = 'text/*';\n        /** The access level of the text file */\n        this.level = AccessLevel.Public;\n        /** Fallback content */\n        this.fallbackText = Translations.TEXT_FALLBACK_CONTENT;\n    }\n    async watchHandler() {\n        await this.load();\n    }\n    async componentWillLoad() {\n        await this.load();\n    }\n    async load() {\n        const { path, textKey, body, contentType, level, track, identityId } = this;\n        if (!textKey && !path) {\n            logger.debug('empty textKey and path');\n            return;\n        }\n        const key = textKey || path;\n        logger.debug('loading ' + key + '...');\n        if (body) {\n            await putStorageObject(textKey, body, level, track, contentType, logger);\n        }\n        try {\n            this.src = await getTextSource(key, level, track, identityId, logger);\n        }\n        catch (err) {\n            logger.debug(err);\n            throw new Error(err);\n        }\n    }\n    render() {\n        return (h(\"div\", null, h(\"div\", { class: \"text-container\" }, this.src ? h(\"pre\", null, this.src) : h(\"pre\", null, I18n.get(this.fallbackText)))));\n    }\n    static get watchers() { return {\n        \"textKey\": [\"watchHandler\"],\n        \"body\": [\"watchHandler\"]\n    }; }\n};\nAmplifyS3Text.style = amplifyS3TextCss;\n\nexport { AmplifyS3Text as amplify_s3_text };\n"],"names":["r","registerInstance","h","Logger","I18n","A","AccessLevel","T","Translations","p","putStorageObject","a","getTextSource","amplifyS3TextCss","logger","AmplifyS3Text","constructor","hostRef","contentType","level","Public","fallbackText","TEXT_FALLBACK_CONTENT","watchHandler","load","componentWillLoad","path","textKey","body","track","identityId","debug","key","src","err","Error","render","class","get","watchers","style","amplify_s3_text"],"sourceRoot":"webpack:///"}