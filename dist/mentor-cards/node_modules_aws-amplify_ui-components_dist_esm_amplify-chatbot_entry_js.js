"use strict";
(self["webpackChunkmentor_cards"] = self["webpackChunkmentor_cards"] || []).push([["node_modules_aws-amplify_ui-components_dist_esm_amplify-chatbot_entry_js"],{

/***/ 20845:
/*!************************************************************************!*\
  !*** ./node_modules/@aws-amplify/interactions/lib-esm/Interactions.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InteractionsClass": () => (/* binding */ InteractionsClass),
/* harmony export */   "Interactions": () => (/* binding */ Interactions)
/* harmony export */ });
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-amplify/core */ 75582);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-amplify/core */ 94758);
/* harmony import */ var _Providers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Providers */ 39877);
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};


var logger = new _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__.ConsoleLogger('Interactions');
var InteractionsClass = /** @class */ (function () {
    /**
     * Initialize PubSub with AWS configurations
     *
     * @param {InteractionsOptions} options - Configuration object for Interactions
     */
    function InteractionsClass(options) {
        this._options = options;
        logger.debug('Interactions Options', this._options);
        this._pluggables = {};
    }
    InteractionsClass.prototype.getModuleName = function () {
        return 'Interactions';
    };
    /**
     *
     * @param {InteractionsOptions} options - Configuration object for Interactions
     * @return {Object} - The current configuration
     */
    InteractionsClass.prototype.configure = function (options) {
        var _this = this;
        var opt = options ? options.Interactions || options : {};
        logger.debug('configure Interactions', { opt: opt });
        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);
        var aws_bots_config = this._options.aws_bots_config;
        var bots_config = this._options.bots;
        if (!Object.keys(bots_config).length && aws_bots_config) {
            // Convert aws_bots_config to bots object
            if (Array.isArray(aws_bots_config)) {
                aws_bots_config.forEach(function (bot) {
                    _this._options.bots[bot.name] = bot;
                });
            }
        }
        // Check if AWSLex provider is already on pluggables
        if (!this._pluggables.AWSLexProvider &&
            bots_config &&
            Object.keys(bots_config)
                .map(function (key) { return bots_config[key]; })
                .find(function (bot) { return !bot.providerName || bot.providerName === 'AWSLexProvider'; })) {
            this._pluggables.AWSLexProvider = new _Providers__WEBPACK_IMPORTED_MODULE_1__.AWSLexProvider();
        }
        Object.keys(this._pluggables).map(function (key) {
            _this._pluggables[key].configure(_this._options.bots);
        });
        return this._options;
    };
    InteractionsClass.prototype.addPluggable = function (pluggable) {
        if (pluggable && pluggable.getCategory() === 'Interactions') {
            if (!this._pluggables[pluggable.getProviderName()]) {
                pluggable.configure(this._options.bots);
                this._pluggables[pluggable.getProviderName()] = pluggable;
                return;
            }
            else {
                throw new Error('Bot ' + pluggable.getProviderName() + ' already plugged');
            }
        }
    };
    InteractionsClass.prototype.send = function (botname, message) {
        return __awaiter(this, void 0, void 0, function () {
            var botProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._options.bots || !this._options.bots[botname]) {
                            throw new Error('Bot ' + botname + ' does not exist');
                        }
                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';
                        if (!this._pluggables[botProvider]) {
                            throw new Error('Bot ' +
                                botProvider +
                                ' does not have valid pluggin did you try addPluggable first?');
                        }
                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    InteractionsClass.prototype.onComplete = function (botname, callback) {
        if (!this._options.bots || !this._options.bots[botname]) {
            throw new Error('Bot ' + botname + ' does not exist');
        }
        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';
        if (!this._pluggables[botProvider]) {
            throw new Error('Bot ' +
                botProvider +
                ' does not have valid pluggin did you try addPluggable first?');
        }
        this._pluggables[botProvider].onComplete(botname, callback);
    };
    return InteractionsClass;
}());

var Interactions = new InteractionsClass(null);
_aws_amplify_core__WEBPACK_IMPORTED_MODULE_2__.Amplify.register(Interactions);


/***/ }),

/***/ 39877:
/*!************************************************************************************!*\
  !*** ./node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexProvider.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AWSLexProvider": () => (/* binding */ AWSLexProvider)
/* harmony export */ });
/* harmony import */ var _InteractionsProvider__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./InteractionsProvider */ 40236);
/* harmony import */ var _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/client-lex-runtime-service */ 47966);
/* harmony import */ var _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/client-lex-runtime-service */ 99068);
/* harmony import */ var _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/client-lex-runtime-service */ 66535);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-amplify/core */ 75582);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-amplify/core */ 75001);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-amplify/core */ 99433);
/* harmony import */ var _AWSLexProviderHelper_convert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./AWSLexProviderHelper/convert */ 11224);
/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};




var logger = new _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__.ConsoleLogger('AWSLexProvider');
var AWSLexProvider = /** @class */ (function (_super) {
    __extends(AWSLexProvider, _super);
    function AWSLexProvider(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        _this._botsCompleteCallback = {};
        return _this;
    }
    AWSLexProvider.prototype.getProviderName = function () {
        return 'AWSLexProvider';
    };
    AWSLexProvider.prototype.reportBotStatus = function (data, botname) {
        var _this = this;
        // Check if state is fulfilled to resolve onFullfilment promise
        logger.debug('postContent state', data.dialogState);
        if (data.dialogState === 'ReadyForFulfillment' ||
            data.dialogState === 'Fulfilled') {
            if (typeof this._botsCompleteCallback[botname] === 'function') {
                setTimeout(function () {
                    return _this._botsCompleteCallback[botname](null, { slots: data.slots });
                }, 0);
            }
            if (this._config &&
                typeof this._config[botname].onComplete === 'function') {
                setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);
            }
        }
        if (data.dialogState === 'Failed') {
            if (typeof this._botsCompleteCallback[botname] === 'function') {
                setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);
            }
            if (this._config &&
                typeof this._config[botname].onComplete === 'function') {
                setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);
            }
        }
    };
    AWSLexProvider.prototype.sendMessage = function (botname, message) {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this._config[botname]) {
                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];
                        }
                        return [4 /*yield*/, _aws_amplify_core__WEBPACK_IMPORTED_MODULE_1__.Credentials.get()];
                    case 1:
                        credentials = _a.sent();
                        if (!credentials) {
                            return [2 /*return*/, Promise.reject('No credentials')];
                        }
                        this.lexRuntimeServiceClient = new _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_2__.LexRuntimeServiceClient({
                            region: this._config[botname].region,
                            credentials: credentials,
                            customUserAgent: (0,_aws_amplify_core__WEBPACK_IMPORTED_MODULE_3__.getAmplifyUserAgent)(),
                        });
                        if (!(typeof message === 'string')) return [3 /*break*/, 6];
                        params = {
                            botAlias: this._config[botname].alias,
                            botName: botname,
                            inputText: message,
                            userId: credentials.identityId,
                        };
                        logger.debug('postText to lex', message);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        postTextCommand = new _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_4__.PostTextCommand(params);
                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];
                    case 3:
                        data = _a.sent();
                        this.reportBotStatus(data, botname);
                        return [2 /*return*/, data];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_1)];
                    case 5: return [3 /*break*/, 11];
                    case 6:
                        content = message.content, messageType = message.options.messageType;
                        if (messageType === 'voice') {
                            params = {
                                botAlias: this._config[botname].alias,
                                botName: botname,
                                contentType: 'audio/x-l16; sample-rate=16000',
                                inputStream: content,
                                userId: credentials.identityId,
                                accept: 'audio/mpeg',
                            };
                        }
                        else {
                            params = {
                                botAlias: this._config[botname].alias,
                                botName: botname,
                                contentType: 'text/plain; charset=utf-8',
                                inputStream: content,
                                userId: credentials.identityId,
                                accept: 'audio/mpeg',
                            };
                        }
                        logger.debug('postContent to lex', message);
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 10, , 11]);
                        postContentCommand = new _aws_sdk_client_lex_runtime_service__WEBPACK_IMPORTED_MODULE_5__.PostContentCommand(params);
                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];
                    case 8:
                        data = _a.sent();
                        return [4 /*yield*/, (0,_AWSLexProviderHelper_convert__WEBPACK_IMPORTED_MODULE_6__.convert)(data.audioStream)];
                    case 9:
                        audioArray = _a.sent();
                        this.reportBotStatus(data, botname);
                        return [2 /*return*/, __assign(__assign({}, data), { audioStream: audioArray })];
                    case 10:
                        err_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(err_2)];
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    AWSLexProvider.prototype.onComplete = function (botname, callback) {
        if (!this._config[botname]) {
            throw new ErrorEvent('Bot ' + botname + ' does not exist');
        }
        this._botsCompleteCallback[botname] = callback;
    };
    return AWSLexProvider;
}(_InteractionsProvider__WEBPACK_IMPORTED_MODULE_7__.AbstractInteractionsProvider));



/***/ }),

/***/ 11224:
/*!**************************************************************************************************!*\
  !*** ./node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexProviderHelper/convert.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "convert": () => (/* binding */ convert)
/* harmony export */ });
var convert = function (stream) {
    if (stream instanceof Blob || stream instanceof ReadableStream) {
        return new Response(stream)
            .arrayBuffer()
            .then(function (buffer) { return new Uint8Array(buffer); });
    }
    else {
        throw new Error('Readable is not supported.');
    }
};


/***/ }),

/***/ 40236:
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-amplify/interactions/lib-esm/Providers/InteractionsProvider.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AbstractInteractionsProvider": () => (/* binding */ AbstractInteractionsProvider)
/* harmony export */ });
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-amplify/core */ 75582);
/*
 * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var logger = new _aws_amplify_core__WEBPACK_IMPORTED_MODULE_0__.ConsoleLogger('AbstractInteractionsProvider');
var AbstractInteractionsProvider = /** @class */ (function () {
    function AbstractInteractionsProvider(options) {
        if (options === void 0) { options = {}; }
        this._config = options;
    }
    AbstractInteractionsProvider.prototype.configure = function (config) {
        if (config === void 0) { config = {}; }
        this._config = __assign(__assign({}, this._config), config);
        logger.debug("configure " + this.getProviderName(), this._config);
        return this.options;
    };
    AbstractInteractionsProvider.prototype.getCategory = function () {
        return 'Interactions';
    };
    Object.defineProperty(AbstractInteractionsProvider.prototype, "options", {
        get: function () {
            return __assign({}, this._config);
        },
        enumerable: true,
        configurable: true
    });
    return AbstractInteractionsProvider;
}());



/***/ }),

/***/ 2584:
/*!***********************************************************************************!*\
  !*** ./node_modules/@aws-amplify/ui-components/dist/esm/amplify-chatbot.entry.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "amplify_chatbot": () => (/* binding */ AmplifyChatbot)
/* harmony export */ });
/* harmony import */ var C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator */ 19369);
/* harmony import */ var _index_39969785_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index-39969785.js */ 23622);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-amplify/core */ 75582);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-amplify/core */ 56722);
/* harmony import */ var _aws_amplify_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-amplify/core */ 35216);
/* harmony import */ var _Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Translations-3f32c42a.js */ 58477);
/* harmony import */ var _constants_d1abe7de_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants-d1abe7de.js */ 14481);
/* harmony import */ var _aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-amplify/interactions */ 20845);






 // AudioRecorder settings

const RECORDER_EXPORT_MIME_TYPE = 'application/octet-stream';
const DEFAULT_EXPORT_SAMPLE_RATE = 16000;
const FFT_SIZE = 2048; // window size in samples for Fast Fourier Transform (FFT)

const FFT_MAX_DECIBELS = -10; // maximum power value in the scaling range for the FFT analysis data

const FFT_MIN_DECIBELS = -90; // minimum power value in the scaling range for the FFT analysis data

const FFT_SMOOTHING_TIME_CONSTANT = 0.85; // averaging constant with the last analysis frame

/**
 * Merges multiple buffers into one.
 */

const mergeBuffers = (bufferArray, recLength) => {
  const result = new Float32Array(recLength);
  let offset = 0;

  for (let i = 0; i < bufferArray.length; i++) {
    result.set(bufferArray[i], offset);
    offset += bufferArray[i].length;
  }

  return result;
};
/**
 * Downsamples audio to desired export sample rate.
 */


const downsampleBuffer = (buffer, recordSampleRate, exportSampleRate) => {
  if (exportSampleRate === recordSampleRate) {
    return buffer;
  }

  const sampleRateRatio = recordSampleRate / exportSampleRate;
  const newLength = Math.round(buffer.length / sampleRateRatio);
  const result = new Float32Array(newLength);
  let offsetResult = 0;
  let offsetBuffer = 0;

  while (offsetResult < result.length) {
    const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);
    let accum = 0,
        count = 0;

    for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {
      accum += buffer[i];
      count++;
    }

    result[offsetResult] = accum / count;
    offsetResult++;
    offsetBuffer = nextOffsetBuffer;
  }

  return result;
};
/**
 * converts raw audio values to 16 bit pcm.
 */


const floatTo16BitPCM = (output, offset, input) => {
  let byteOffset = offset;

  for (let i = 0; i < input.length; i++, byteOffset += 2) {
    const s = Math.max(-1, Math.min(1, input[i]));
    output.setInt16(byteOffset, s < 0 ? s * 0x8000 : s * 0x7fff, true);
  }
};
/**
 * Write given strings in big-endian order.
 */


const writeString = (view, offset, string) => {
  for (let i = 0; i < string.length; i++) {
    view.setUint8(offset + i, string.charCodeAt(i));
  }
};
/**
 * Encodes raw pcm audio into a wav file.
 */


const encodeWAV = (samples, exportSampleRate) => {
  /**
   * WAV file consists of three parts: RIFF header, WAVE subchunk, and data subchunk. We precompute the size of them.
   */
  const audioSize = samples.length * 2; // We use 16-bit samples, so we have (2 * sampleLength) bytes.

  const fmtSize = 24; // Byte size of the fmt subchunk: 24 bytes that the audio information that we'll set below.

  const dataSize = 8 + audioSize; // Byte size of the data subchunk: raw sound data plus 8 bytes for the subchunk descriptions.

  const totalByteSize = 12 + fmtSize + dataSize; // Byte size of the whole file, including the chunk header / descriptor.
  // create DataView object to write byte values into

  const buffer = new ArrayBuffer(totalByteSize); // buffer to write the chunk values in.

  const view = new DataView(buffer);
  /**
   * Start writing the .wav file. We write top to bottom, so byte offset (first numeric argument) increases strictly.
   */
  // RIFF header

  writeString(view, 0, 'RIFF'); // At offset 0, write the letters "RIFF"

  view.setUint32(4, fmtSize + dataSize, true); // At offset 4, write the size of fmt and data chunk size combined.

  writeString(view, 8, 'WAVE'); // At offset 8, write the format type "WAVE"
  // fmt subchunk

  writeString(view, 12, 'fmt '); //chunkdId 'fmt '

  view.setUint32(16, fmtSize - 8, true); // fmt subchunk size below this value. We set 8 bytes already, so subtract 8 bytes from fmtSize.

  view.setUint16(20, 1, true); // Audio format code, which is 1 for PCM.

  view.setUint16(22, 1, true); // Number of audio channels. We use mono, ie 1.

  view.setUint32(24, exportSampleRate, true); // Sample rate of the audio file.

  view.setUint32(28, exportSampleRate * 2, true); // Data rate, or # of data bytes per second. Since each sample is 2 bytes, this is 2 * sampleRate.

  view.setUint16(32, 2, true); // block align, # of bytes per sample including all channels, ie. 2 bytes.

  view.setUint16(34, 16, true); // bits per sample, ie. 16 bits
  // data subchunk

  writeString(view, 36, 'data'); // write the chunkId 'data'

  view.setUint32(40, audioSize, true); // Audio byte size

  floatTo16BitPCM(view, 44, samples); // raw pcm values then go here.

  return view;
};
/**
 * Given arrays of raw pcm audio, downsamples the audio to desired sample rate and encodes it to a wav audio file.
 *
 * @param recBuffer {Float32Array[]} - 2d float array containing the recorded raw audio
 * @param recLength {number} - total length of recorded audio
 * @param recordSampleRate {number} - sample rate of the recorded audio
 * @param exportSampleRate {number} - desired sample rate of the exported file
 */


const exportBuffer = (recBuffer, recLength, recordSampleRate, exportSampleRate) => {
  const mergedBuffers = mergeBuffers(recBuffer, recLength);
  const downsampledBuffer = downsampleBuffer(mergedBuffers, recordSampleRate, exportSampleRate);
  const encodedWav = encodeWAV(downsampledBuffer, exportSampleRate);
  const audioBlob = new Blob([encodedWav], {
    type: RECORDER_EXPORT_MIME_TYPE
  });
  return audioBlob;
};

const logger = new _aws_amplify_core__WEBPACK_IMPORTED_MODULE_4__.ConsoleLogger('AudioRecorder');

class AudioRecorder {
  constructor(options) {
    // input mic stream is stored in a buffer
    this.streamBuffer = [];
    this.streamBufferLength = 0;
    this.recording = false;
    this.options = options;
  }
  /**
   * This must be called first to enable audio context and request microphone access.
   * Once access granted, it connects all the necessary audio nodes to the context so that it can begin recording or playing.
   */


  init() {
    var _this = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      if ((0,_aws_amplify_core__WEBPACK_IMPORTED_MODULE_5__.browserOrNode)().isBrowser) {
        window.AudioContext = window.AudioContext || window.webkitAudioContext;
        _this.audioContext = new AudioContext();
        yield navigator.mediaDevices.getUserMedia({
          audio: true
        }).then(stream => {
          _this.audioSupported = true;

          _this.setupAudioNodes(stream);
        }).catch(() => {
          _this.audioSupported = false;
          return Promise.reject('Audio is not supported');
        });
      } else {
        _this.audioSupported = false;
        return Promise.reject('Audio is not supported');
      }
    })();
  }
  /**
   * Setup audio nodes after successful `init`.
   */


  setupAudioNodes(stream) {
    var _this2 = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      try {
        yield _this2.audioContext.resume();
      } catch (err) {
        logger.error(err);
      }

      const sourceNode = _this2.audioContext.createMediaStreamSource(stream);

      const processorNode = _this2.audioContext.createScriptProcessor(4096, 1, 1);

      processorNode.onaudioprocess = audioProcessingEvent => {
        if (!_this2.recording) return;
        const stream = audioProcessingEvent.inputBuffer.getChannelData(0);

        _this2.streamBuffer.push(new Float32Array(stream)); // set to a copy of the stream


        _this2.streamBufferLength += stream.length;

        _this2.analyse();
      };

      const analyserNode = _this2.audioContext.createAnalyser();

      analyserNode.minDecibels = FFT_MIN_DECIBELS;
      analyserNode.maxDecibels = FFT_MAX_DECIBELS;
      analyserNode.smoothingTimeConstant = FFT_SMOOTHING_TIME_CONSTANT;
      sourceNode.connect(analyserNode);
      analyserNode.connect(processorNode);
      processorNode.connect(sourceNode.context.destination);
      _this2.analyserNode = analyserNode;
    })();
  }
  /**
   * Start recording audio and listen for silence.
   *
   * @param onSilence {SilenceHandler} - called whenever silence is detected
   * @param visualizer {Visualizer} - called with audio data on each audio process to be used for visualization.
   */


  startRecording(onSilence, visualizer) {
    var _this3 = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      if (_this3.recording || !_this3.audioSupported) return;

      _this3.onSilence = onSilence || function () {};

      _this3.visualizer = visualizer || function () {};

      const context = _this3.audioContext;

      try {
        yield context.resume();
      } catch (err) {
        logger.error(err);
      }

      _this3.start = Date.now();
      _this3.recording = true;
    })();
  }
  /**
   * Pause recording
   */


  stopRecording() {
    if (!this.audioSupported) return;
    this.recording = false;
  }
  /**
   * Pause recording and clear audio buffer
   */


  clear() {
    this.stopRecording();
    this.streamBufferLength = 0;
    this.streamBuffer = [];
  }
  /**
   * Plays given audioStream with audioContext
   *
   * @param buffer {Uint8Array} - audioStream to be played
   */


  play(buffer) {
    if (!buffer || !this.audioSupported) return;
    const myBlob = new Blob([buffer]);
    return new Promise((res, rej) => {
      const fileReader = new FileReader();

      fileReader.onload = () => {
        if (this.playbackSource) this.playbackSource.disconnect(); // disconnect previous playback source

        this.playbackSource = this.audioContext.createBufferSource();

        const successCallback = buf => {
          this.playbackSource.buffer = buf;
          this.playbackSource.connect(this.audioContext.destination);

          this.playbackSource.onended = () => {
            return res();
          };

          this.playbackSource.start(0);
        };

        const errorCallback = err => {
          return rej(err);
        };

        this.audioContext.decodeAudioData(fileReader.result, successCallback, errorCallback);
      };

      fileReader.onerror = () => rej();

      fileReader.readAsArrayBuffer(myBlob);
    });
  }
  /**
   * Stops playing audio if there's a playback source connected.
   */


  stop() {
    if (this.playbackSource) {
      this.playbackSource.stop();
    }
  }
  /**
   * Called after each audioProcess. Check for silence and give fft time domain data to visualizer.
   */


  analyse() {
    if (!this.audioSupported) return;
    const analyser = this.analyserNode;
    analyser.fftSize = FFT_SIZE;
    const bufferLength = analyser.fftSize;
    const dataArray = new Uint8Array(bufferLength);
    const amplitude = this.options.amplitude;
    const time = this.options.time;
    analyser.getByteTimeDomainData(dataArray);
    this.visualizer(dataArray, bufferLength);

    for (let i = 0; i < bufferLength; i++) {
      // Normalize between -1 and 1.
      const curr_value_time = dataArray[i] / 128 - 1.0;

      if (curr_value_time > amplitude || curr_value_time < -1 * amplitude) {
        this.start = Date.now();
      }
    }

    const newtime = Date.now();
    const elapsedTime = newtime - this.start;

    if (elapsedTime > time) {
      this.onSilence();
    }
  }
  /**
   * Encodes recorded buffer to a wav file and exports it to a blob.
   *
   * @param exportSampleRate {number} - desired sample rate of the exported buffer
   */


  exportWAV(exportSampleRate = DEFAULT_EXPORT_SAMPLE_RATE) {
    var _this4 = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      if (!_this4.audioSupported) return;
      const recordSampleRate = _this4.audioContext.sampleRate;
      const blob = exportBuffer(_this4.streamBuffer, _this4.streamBufferLength, recordSampleRate, exportSampleRate);

      _this4.clear();

      return blob;
    })();
  }

}

const visualize = (dataArray, bufferLength, canvas) => {
  if (!canvas) return;
  if (!(0,_aws_amplify_core__WEBPACK_IMPORTED_MODULE_5__.browserOrNode)().isBrowser) throw new Error('Visualization is not supported on non-browsers.');
  const {
    width,
    height
  } = canvas.getBoundingClientRect(); // need to update the default canvas width and height

  canvas.width = width;
  canvas.height = height;
  const canvasCtx = canvas.getContext('2d');
  canvasCtx.fillStyle = 'white';
  canvasCtx.clearRect(0, 0, width, height);

  const draw = () => {
    canvasCtx.fillRect(0, 0, width, height);
    canvasCtx.lineWidth = 1;
    const color = getComputedStyle(document.documentElement).getPropertyValue('--amplify-primary-color');
    canvasCtx.strokeStyle = !color || color === '' ? '#ff9900' : color; // TODO: try separate css variable

    canvasCtx.beginPath();
    const sliceWidth = width * 1.0 / bufferLength;
    let x = 0;

    for (let i = 0; i < bufferLength || i % 3 === 0; i++) {
      const value = dataArray[i] / 128.0;
      const y = value * height / 2;

      if (i === 0) {
        canvasCtx.moveTo(x, y);
      } else {
        canvasCtx.lineTo(x, y);
      }

      x += sliceWidth;
    }

    canvasCtx.lineTo(canvas.width, canvas.height / 2);
    canvasCtx.stroke();
  }; // Register our draw function with requestAnimationFrame.


  requestAnimationFrame(draw);
};

const amplifyChatbotCss = ".bot .dot{background-color:var(--bot-dot-color)}.user .dot{background-color:var(--user-dot-color)}.dot-flashing{width:2.625rem}.dot-flashing .dot{display:inline-block;width:0.625rem;height:0.625rem;border-radius:10rem;opacity:0.65}.dot-flashing .left{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:0s;animation-delay:0s}.dot-flashing .middle{margin-left:0.375rem;margin-right:0.375rem;-webkit-animation:dot-flashing 1s infinite linear alternate;animation:dot-flashing 1s infinite linear alternate;-webkit-animation-delay:0.5s;animation-delay:0.5s}.dot-flashing .right{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:1s;animation-delay:1s}@-webkit-keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}@keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}:host{--width:28.75rem;--height:37.5rem;--header-color:var(--amplify-secondary-color);--header-size:var(--amplify-text-lg);--bot-background-color:rgb(230, 230, 230);--bot-text-color:black;--bot-dot-color:var(--bot-text-color);--user-background-color:var(--amplify-blue);--user-text-color:var(--amplify-white);--user-dot-color:var(--user-text-color)}.amplify-chatbot{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column;background-color:var(--background-color);border-radius:0.375rem;-webkit-box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);-webkit-box-sizing:border-box;box-sizing:border-box;font-family:var(--amplify-font-family);margin-bottom:1rem;width:100%;height:var(--height);max-width:var(--width)}@media (min-width: 672px){.amplify-chatbot{width:var(--width)}}.header{padding:1.25rem 0.375rem 1.25rem 0.375rem;color:var(--header-color);font-size:var(--header-size);font-weight:bold;text-align:center;word-wrap:break-word}.body{border-top:0.0625rem solid rgba(0, 0, 0, 0.05);padding:1.5rem 1rem 0 1rem;display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-ms-flex-direction:column;flex-direction:column;overflow:auto}.bubble{max-width:100%;padding:0.8em 1.4em;text-align:left;word-wrap:break-word;margin-bottom:0.625rem}.bot{margin-right:auto;background-color:var(--bot-background-color);color:var(--bot-text-color);border-radius:1.5rem 1.5rem 1.5rem 0}.user{margin-left:auto;background-color:var(--user-background-color);color:var(--user-text-color);border-radius:1.5rem 1.5rem 0 1.5rem}.footer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border-top:0.062rem solid rgba(0, 0, 0, 0.05);padding-right:0.625rem;min-height:3.125rem}.footer amplify-input{--border:none;--margin:0;-ms-flex-positive:1;flex-grow:1}canvas{margin-left:0.625rem;margin-right:0.625rem;-ms-flex-positive:1;flex-grow:1;height:3.125rem}.icon-button{--icon-height:1.25rem;--icon-fill:var(--amplify-primary-color);--padding:0.625rem;--width:auto}"; // enum for possible bot states

var ChatState;

(function (ChatState) {
  ChatState[ChatState["Initial"] = 0] = "Initial";
  ChatState[ChatState["Listening"] = 1] = "Listening";
  ChatState[ChatState["SendingText"] = 2] = "SendingText";
  ChatState[ChatState["SendingVoice"] = 3] = "SendingVoice";
  ChatState[ChatState["Error"] = 4] = "Error";
})(ChatState || (ChatState = {})); // Message types


var MessageFrom;

(function (MessageFrom) {
  MessageFrom["Bot"] = "bot";
  MessageFrom["User"] = "user";
})(MessageFrom || (MessageFrom = {})); // Error types


var ChatErrorType;

(function (ChatErrorType) {
  ChatErrorType[ChatErrorType["Recoverable"] = 0] = "Recoverable";
  ChatErrorType[ChatErrorType["Unrecoverable"] = 1] = "Unrecoverable";
})(ChatErrorType || (ChatErrorType = {}));

const AmplifyChatbot = class {
  constructor(hostRef) {
    (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.r)(this, hostRef);
    /** Clear messages when conversation finishes */

    this.clearOnComplete = false;
    /** Continue listening to users after they send the message */

    this.conversationModeOn = false;
    /** Text placed in the top header */

    this.botTitle = _Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__.T.CHATBOT_TITLE;
    /** Whether voice chat is enabled */

    this.voiceEnabled = false;
    /** Whether text chat is enabled */

    this.textEnabled = true;
    /** Amount of silence (in ms) to wait for */

    this.silenceTime = 1500;
    /** Noise threshold between -1 and 1. Anything below is considered a silence. */

    this.silenceThreshold = 0.2;
    /** Messages in current session */

    this.messages = [];
    /** Text input box value  */

    this.text = '';
    /** Current app state */

    this.chatState = ChatState.Initial;
    /**
     * Rendering methods
     */

    this.messageJSX = messages => {
      const messageList = messages.map(message => (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
        class: `bubble ${message.from}`
      }, message.content));

      if (this.chatState === ChatState.SendingText || this.chatState === ChatState.SendingVoice) {
        // if waiting for voice message, show animation on user side because app is waiting for transcript. Else put it on bot side.
        const client = this.chatState === ChatState.SendingText ? MessageFrom.Bot : MessageFrom.User;
        messageList.push((0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: `bubble ${client}`
        }, (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
          class: `dot-flashing ${client}`
        }, (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
          class: "dot left"
        }), (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
          class: "dot middle"
        }), (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("span", {
          class: "dot right"
        }))));
      }

      return messageList;
    };

    this.chatCompleted = (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.c)(this, "chatCompleted", 7);
  } // Occurs when user presses enter in input box


  submitHandler(_event) {
    this.sendTextMessage();
  }
  /**
   * Lifecycle functions
   */


  componentWillLoad() {
    if (!_aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__.Interactions || typeof _aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__.Interactions.onComplete !== 'function') {
      throw new Error(_constants_d1abe7de_js__WEBPACK_IMPORTED_MODULE_3__.d);
    }

    this.validateProps();
  }

  componentDidRender() {
    // scroll to the bottom if necessary
    const body = this.element.shadowRoot.querySelector('.body');
    body.scrollTop = body.scrollHeight;
  }

  validateProps() {
    if (!this.voiceEnabled && !this.textEnabled) {
      this.setError(_Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__.T.CHAT_DISABLED_ERROR, ChatErrorType.Unrecoverable);
      return;
    } else if (!this.botName) {
      this.setError(_Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__.T.NO_BOT_NAME_ERROR, ChatErrorType.Unrecoverable);
      return;
    }

    if (this.welcomeMessage) this.appendToChat(this.welcomeMessage, MessageFrom.Bot); // Initialize AudioRecorder if voice is enabled

    if (this.voiceEnabled) {
      this.audioRecorder = new AudioRecorder({
        time: this.silenceTime,
        amplitude: this.silenceThreshold
      });
      this.audioRecorder.init().catch(err => {
        this.setError(err, ChatErrorType.Recoverable);
      });
    } // Callback function to be called after chat is completed


    const onComplete = (err, data) => {
      this.chatCompleted.emit({
        data,
        err
      });

      if (this.clearOnComplete) {
        this.reset();
      } else {
        this.chatState = ChatState.Initial;
      }
    };

    try {
      _aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__.Interactions.onComplete(this.botName, onComplete);
    } catch (err) {
      this.setError(err, ChatErrorType.Unrecoverable);
    }
  }
  /**
   * Handlers
   */


  handleMicButton() {
    if (this.chatState !== ChatState.Initial) return;
    this.audioRecorder.stop();
    this.chatState = ChatState.Listening;
    this.audioRecorder.startRecording(() => this.handleSilence(), (data, length) => this.visualizer(data, length));
  }

  handleSilence() {
    this.chatState = ChatState.SendingVoice;
    this.audioRecorder.stopRecording();
    this.audioRecorder.exportWAV().then(blob => {
      this.sendVoiceMessage(blob);
    });
  }

  handleTextChange(event) {
    const target = event.target;
    this.text = target.value;
  }

  handleCancelButton() {
    this.audioRecorder.clear();
    this.chatState = ChatState.Initial;
  }

  handleToastClose(errorType) {
    this.error = undefined; // clear error
    // if error is recoverable, reset the app state to initial

    if (errorType === ChatErrorType.Recoverable) {
      this.chatState = ChatState.Initial;
    }
  }
  /**
   * Visualization
   */


  visualizer(dataArray, bufferLength) {
    const canvas = this.element.shadowRoot.querySelector('canvas');
    visualize(dataArray, bufferLength, canvas);
  }
  /**
   * Interactions helpers
   */


  sendTextMessage() {
    var _this5 = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      if (_this5.text.length === 0 || _this5.chatState !== ChatState.Initial) return;
      const text = _this5.text;
      _this5.text = '';

      _this5.appendToChat(text, MessageFrom.User);

      _this5.chatState = ChatState.SendingText;
      let response;

      try {
        response = yield _aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__.Interactions.send(_this5.botName, text);
      } catch (err) {
        _this5.setError(err, ChatErrorType.Recoverable);

        return;
      }

      if (response.message) {
        _this5.appendToChat(response.message, MessageFrom.Bot);
      }

      _this5.chatState = ChatState.Initial;
    })();
  }

  sendVoiceMessage(audioInput) {
    var _this6 = this;

    return (0,C_Users_Sampath_Music_mentor_cards_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)(function* () {
      const interactionsMessage = {
        content: audioInput,
        options: {
          messageType: 'voice'
        }
      };
      let response;

      try {
        response = yield _aws_amplify_interactions__WEBPACK_IMPORTED_MODULE_6__.Interactions.send(_this6.botName, interactionsMessage);
      } catch (err) {
        _this6.setError(err, ChatErrorType.Recoverable);

        return;
      }

      _this6.chatState = ChatState.Initial;
      const dialogState = response.dialogState;
      if (response.inputTranscript) _this6.appendToChat(response.inputTranscript, MessageFrom.User);

      _this6.appendToChat(response.message, MessageFrom.Bot);

      yield _this6.audioRecorder.play(response.audioStream).then(() => {
        // if conversationMode is on, chat is incomplete, and mic button isn't pressed yet, resume listening.
        if (_this6.conversationModeOn && dialogState !== 'Fulfilled' && dialogState !== 'Failed' && _this6.chatState === ChatState.Initial) {
          _this6.handleMicButton();
        }
      }).catch(err => _this6.setError(err, ChatErrorType.Recoverable));
    })();
  }

  appendToChat(content, from) {
    this.messages = [...this.messages, {
      content,
      from
    }];
  }
  /**
   * State control methods
   */


  setError(error, errorType) {
    const message = typeof error === 'string' ? error : error.message;
    this.chatState = ChatState.Error;
    this.error = {
      message,
      errorType
    };
  }

  reset() {
    this.chatState = ChatState.Initial;
    this.text = '';
    this.error = undefined;
    this.messages = [];
    if (this.welcomeMessage) this.appendToChat(this.welcomeMessage, MessageFrom.Bot);
    this.audioRecorder && this.audioRecorder.clear();
  }

  listeningFooterJSX() {
    const visualization = (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("canvas", {
      height: "50"
    });
    const cancelButton = (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("amplify-button", {
      "data-test": "chatbot-cancel-button",
      handleButtonClick: () => this.handleCancelButton(),
      class: "icon-button",
      variant: "icon",
      icon: "ban"
    });
    return [visualization, cancelButton];
  }

  footerJSX() {
    if (this.chatState === ChatState.Listening) return this.listeningFooterJSX();
    const inputPlaceholder = this.textEnabled ? _Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__.T.TEXT_INPUT_PLACEHOLDER : _Translations_3f32c42a_js__WEBPACK_IMPORTED_MODULE_2__.T.VOICE_INPUT_PLACEHOLDER;
    const textInput = (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("amplify-input", {
      placeholder: _aws_amplify_core__WEBPACK_IMPORTED_MODULE_7__.I18n.get(inputPlaceholder),
      description: "text",
      handleInputChange: evt => this.handleTextChange(evt),
      value: this.text,
      disabled: this.chatState === ChatState.Error || !this.textEnabled
    });
    const micButton = this.voiceEnabled && (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("amplify-button", {
      "data-test": "chatbot-mic-button",
      handleButtonClick: () => this.handleMicButton(),
      class: "icon-button",
      variant: "icon",
      icon: "microphone",
      disabled: this.chatState === ChatState.Error || this.chatState !== ChatState.Initial
    });
    const sendButton = this.textEnabled && (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("amplify-button", {
      "data-test": "chatbot-send-button",
      class: "icon-button",
      variant: "icon",
      icon: "send",
      handleButtonClick: () => this.sendTextMessage(),
      disabled: this.chatState === ChatState.Error || this.chatState !== ChatState.Initial
    });
    return [textInput, micButton, sendButton];
  }

  errorToast() {
    if (!this.error) return;
    const {
      message,
      errorType
    } = this.error;
    return (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("amplify-toast", {
      message: _aws_amplify_core__WEBPACK_IMPORTED_MODULE_7__.I18n.get(message),
      handleClose: () => this.handleToastClose(errorType)
    });
  }

  render() {
    return (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)(_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.H, null, (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "amplify-chatbot"
    }, (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("slot", {
      name: "header"
    }, (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "header",
      "data-test": "chatbot-header"
    }, _aws_amplify_core__WEBPACK_IMPORTED_MODULE_7__.I18n.get(this.botTitle))), (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "body",
      "data-test": "chatbot-body"
    }, this.messageJSX(this.messages)), (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.h)("div", {
      class: "footer",
      "data-test": "chatbot-footer"
    }, this.footerJSX()), this.errorToast()));
  }

  get element() {
    return (0,_index_39969785_js__WEBPACK_IMPORTED_MODULE_1__.g)(this);
  }

};
AmplifyChatbot.style = amplifyChatbotCss;


/***/ }),

/***/ 47966:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/LexRuntimeServiceClient.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LexRuntimeServiceClient": () => (/* binding */ LexRuntimeServiceClient)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./runtimeConfig */ 16931);
/* harmony import */ var _aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/config-resolver */ 98140);
/* harmony import */ var _aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/middleware-content-length */ 9492);
/* harmony import */ var _aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/middleware-host-header */ 9312);
/* harmony import */ var _aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-logger */ 64871);
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ 9485);
/* harmony import */ var _aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/middleware-signing */ 70461);
/* harmony import */ var _aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/middleware-user-agent */ 19189);
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/smithy-client */ 1882);










/**
 * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of
 *       operations (API). Your conversational bot uses the runtime API to understand user utterances
 *       (user input text or voice). For example, suppose a user says "I want pizza", your bot sends
 *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is
 *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in
 *       user conversation on behalf of the bot to elicit required information (slot values, such as
 *       pizza size and crust type), and then performs fulfillment activity (that you configured when
 *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For
 *       a list of build-time operations, see the build-time API, . </p>
 */
var LexRuntimeServiceClient = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__extends)(LexRuntimeServiceClient, _super);
    function LexRuntimeServiceClient(configuration) {
        var _this = this;
        var _config_0 = (0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_8__.__assign)({}, _runtimeConfig__WEBPACK_IMPORTED_MODULE_9__.ClientDefaultValues), configuration);
        var _config_1 = (0,_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__.resolveRegionConfig)(_config_0);
        var _config_2 = (0,_aws_sdk_config_resolver__WEBPACK_IMPORTED_MODULE_0__.resolveEndpointsConfig)(_config_1);
        var _config_3 = (0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_5__.resolveAwsAuthConfig)(_config_2);
        var _config_4 = (0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.resolveRetryConfig)(_config_3);
        var _config_5 = (0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_6__.resolveUserAgentConfig)(_config_4);
        var _config_6 = (0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_2__.resolveHostHeaderConfig)(_config_5);
        _this = _super.call(this, _config_6) || this;
        _this.config = _config_6;
        _this.middlewareStack.use((0,_aws_sdk_middleware_signing__WEBPACK_IMPORTED_MODULE_5__.getAwsAuthPlugin)(_this.config));
        _this.middlewareStack.use((0,_aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_4__.getRetryPlugin)(_this.config));
        _this.middlewareStack.use((0,_aws_sdk_middleware_user_agent__WEBPACK_IMPORTED_MODULE_6__.getUserAgentPlugin)(_this.config));
        _this.middlewareStack.use((0,_aws_sdk_middleware_content_length__WEBPACK_IMPORTED_MODULE_1__.getContentLengthPlugin)(_this.config));
        _this.middlewareStack.use((0,_aws_sdk_middleware_host_header__WEBPACK_IMPORTED_MODULE_2__.getHostHeaderPlugin)(_this.config));
        _this.middlewareStack.use((0,_aws_sdk_middleware_logger__WEBPACK_IMPORTED_MODULE_3__.getLoggerPlugin)(_this.config));
        return _this;
    }
    LexRuntimeServiceClient.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
    };
    return LexRuntimeServiceClient;
}(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_7__.Client));



/***/ }),

/***/ 66535:
/*!*************************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/commands/PostContentCommand.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PostContentCommand": () => (/* binding */ PostContentCommand)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ 84779);
/* harmony import */ var _protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restJson1 */ 49427);
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ 70308);
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ 1882);





var PostContentCommand = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(PostContentCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PostContentCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    PostContentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "LexRuntimeServiceClient";
        var commandName = "PostContentCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PostContentRequest.filterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PostContentResponse.filterSensitiveLog,
        };
        if (typeof logger.info === "function") {
            logger.info({
                clientName: clientName,
                commandName: commandName,
            });
        }
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PostContentCommand.prototype.serialize = function (input, context) {
        return (0,_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restJson1PostContentCommand)(input, context);
    };
    PostContentCommand.prototype.deserialize = function (output, context) {
        return (0,_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restJson1PostContentCommand)(output, context);
    };
    return PostContentCommand;
}(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command));



/***/ }),

/***/ 99068:
/*!**********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/commands/PostTextCommand.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PostTextCommand": () => (/* binding */ PostTextCommand)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _models_models_0__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/models_0 */ 84779);
/* harmony import */ var _protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocols/Aws_restJson1 */ 49427);
/* harmony import */ var _aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/middleware-serde */ 70308);
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ 1882);





var PostTextCommand = /** @class */ (function (_super) {
    (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__extends)(PostTextCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PostTextCommand(input) {
        var _this = 
        // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
        // End section: command_constructor
    }
    PostTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {
        this.middlewareStack.use((0,_aws_sdk_middleware_serde__WEBPACK_IMPORTED_MODULE_0__.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "LexRuntimeServiceClient";
        var commandName = "PostTextCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PostTextRequest.filterSensitiveLog,
            outputFilterSensitiveLog: _models_models_0__WEBPACK_IMPORTED_MODULE_3__.PostTextResponse.filterSensitiveLog,
        };
        if (typeof logger.info === "function") {
            logger.info({
                clientName: clientName,
                commandName: commandName,
            });
        }
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function (request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PostTextCommand.prototype.serialize = function (input, context) {
        return (0,_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__.serializeAws_restJson1PostTextCommand)(input, context);
    };
    PostTextCommand.prototype.deserialize = function (output, context) {
        return (0,_protocols_Aws_restJson1__WEBPACK_IMPORTED_MODULE_4__.deserializeAws_restJson1PostTextCommand)(output, context);
    };
    return PostTextCommand;
}(_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.Command));



/***/ }),

/***/ 14534:
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/endpoints.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultRegionInfoProvider": () => (/* binding */ defaultRegionInfoProvider)
/* harmony export */ });
// Partition default templates
var AWS_TEMPLATE = "runtime.lex.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "runtime.lex.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "runtime.lex.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "runtime.lex.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "runtime.lex.{region}.amazonaws.com";
// Partition regions
var AWS_REGIONS = new Set([
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2",
]);
var AWS_CN_REGIONS = new Set(["cn-north-1", "cn-northwest-1"]);
var AWS_ISO_REGIONS = new Set(["us-iso-east-1"]);
var AWS_ISO_B_REGIONS = new Set(["us-isob-east-1"]);
var AWS_US_GOV_REGIONS = new Set(["us-gov-east-1", "us-gov-west-1"]);
var defaultRegionInfoProvider = function (region, options) {
    var regionInfo = undefined;
    switch (region) {
        // First, try to match exact region names.
        case "eu-west-1":
            regionInfo = {
                hostname: "runtime.lex.eu-west-1.amazonaws.com",
                partition: "aws",
                signingService: "lex",
            };
            break;
        case "us-east-1":
            regionInfo = {
                hostname: "runtime.lex.us-east-1.amazonaws.com",
                partition: "aws",
                signingService: "lex",
            };
            break;
        case "us-west-2":
            regionInfo = {
                hostname: "runtime.lex.us-west-2.amazonaws.com",
                partition: "aws",
                signingService: "lex",
            };
            break;
        // Next, try to match partition endpoints.
        default:
            if (AWS_REGIONS.has(region)) {
                regionInfo = {
                    hostname: AWS_TEMPLATE.replace("{region}", region),
                    partition: "aws",
                    signingService: "lex",
                };
            }
            if (AWS_CN_REGIONS.has(region)) {
                regionInfo = {
                    hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                    partition: "aws-cn",
                };
            }
            if (AWS_ISO_REGIONS.has(region)) {
                regionInfo = {
                    hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                    partition: "aws-iso",
                };
            }
            if (AWS_ISO_B_REGIONS.has(region)) {
                regionInfo = {
                    hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                    partition: "aws-iso-b",
                };
            }
            if (AWS_US_GOV_REGIONS.has(region)) {
                regionInfo = {
                    hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                    partition: "aws-us-gov",
                };
            }
            // Finally, assume it's an AWS partition endpoint.
            if (regionInfo === undefined) {
                regionInfo = {
                    hostname: AWS_TEMPLATE.replace("{region}", region),
                    partition: "aws",
                    signingService: "lex",
                };
            }
    }
    return Promise.resolve(regionInfo);
};


/***/ }),

/***/ 84779:
/*!*************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/models/models_0.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BadRequestException": () => (/* binding */ BadRequestException),
/* harmony export */   "ConflictException": () => (/* binding */ ConflictException),
/* harmony export */   "DeleteSessionRequest": () => (/* binding */ DeleteSessionRequest),
/* harmony export */   "DeleteSessionResponse": () => (/* binding */ DeleteSessionResponse),
/* harmony export */   "InternalFailureException": () => (/* binding */ InternalFailureException),
/* harmony export */   "LimitExceededException": () => (/* binding */ LimitExceededException),
/* harmony export */   "NotFoundException": () => (/* binding */ NotFoundException),
/* harmony export */   "GetSessionRequest": () => (/* binding */ GetSessionRequest),
/* harmony export */   "FulfillmentState": () => (/* binding */ FulfillmentState),
/* harmony export */   "MessageFormatType": () => (/* binding */ MessageFormatType),
/* harmony export */   "DialogActionType": () => (/* binding */ DialogActionType),
/* harmony export */   "DialogAction": () => (/* binding */ DialogAction),
/* harmony export */   "ConfirmationStatus": () => (/* binding */ ConfirmationStatus),
/* harmony export */   "IntentSummary": () => (/* binding */ IntentSummary),
/* harmony export */   "GetSessionResponse": () => (/* binding */ GetSessionResponse),
/* harmony export */   "BadGatewayException": () => (/* binding */ BadGatewayException),
/* harmony export */   "DependencyFailedException": () => (/* binding */ DependencyFailedException),
/* harmony export */   "LoopDetectedException": () => (/* binding */ LoopDetectedException),
/* harmony export */   "NotAcceptableException": () => (/* binding */ NotAcceptableException),
/* harmony export */   "PostContentRequest": () => (/* binding */ PostContentRequest),
/* harmony export */   "DialogState": () => (/* binding */ DialogState),
/* harmony export */   "PostContentResponse": () => (/* binding */ PostContentResponse),
/* harmony export */   "RequestTimeoutException": () => (/* binding */ RequestTimeoutException),
/* harmony export */   "UnsupportedMediaTypeException": () => (/* binding */ UnsupportedMediaTypeException),
/* harmony export */   "PostTextRequest": () => (/* binding */ PostTextRequest),
/* harmony export */   "IntentConfidence": () => (/* binding */ IntentConfidence),
/* harmony export */   "PredictedIntent": () => (/* binding */ PredictedIntent),
/* harmony export */   "ContentType": () => (/* binding */ ContentType),
/* harmony export */   "Button": () => (/* binding */ Button),
/* harmony export */   "GenericAttachment": () => (/* binding */ GenericAttachment),
/* harmony export */   "ResponseCard": () => (/* binding */ ResponseCard),
/* harmony export */   "SentimentResponse": () => (/* binding */ SentimentResponse),
/* harmony export */   "PostTextResponse": () => (/* binding */ PostTextResponse),
/* harmony export */   "PutSessionRequest": () => (/* binding */ PutSessionRequest),
/* harmony export */   "PutSessionResponse": () => (/* binding */ PutSessionResponse)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/smithy-client */ 1882);


var BadRequestException;
(function (BadRequestException) {
    BadRequestException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(BadRequestException || (BadRequestException = {}));
var ConflictException;
(function (ConflictException) {
    ConflictException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(ConflictException || (ConflictException = {}));
var DeleteSessionRequest;
(function (DeleteSessionRequest) {
    DeleteSessionRequest.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(DeleteSessionRequest || (DeleteSessionRequest = {}));
var DeleteSessionResponse;
(function (DeleteSessionResponse) {
    DeleteSessionResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(DeleteSessionResponse || (DeleteSessionResponse = {}));
var InternalFailureException;
(function (InternalFailureException) {
    InternalFailureException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(InternalFailureException || (InternalFailureException = {}));
var LimitExceededException;
(function (LimitExceededException) {
    LimitExceededException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(LimitExceededException || (LimitExceededException = {}));
var NotFoundException;
(function (NotFoundException) {
    NotFoundException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(NotFoundException || (NotFoundException = {}));
var GetSessionRequest;
(function (GetSessionRequest) {
    GetSessionRequest.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(GetSessionRequest || (GetSessionRequest = {}));
var FulfillmentState;
(function (FulfillmentState) {
    FulfillmentState["FAILED"] = "Failed";
    FulfillmentState["FULFILLED"] = "Fulfilled";
    FulfillmentState["READY_FOR_FULFILLMENT"] = "ReadyForFulfillment";
})(FulfillmentState || (FulfillmentState = {}));
var MessageFormatType;
(function (MessageFormatType) {
    MessageFormatType["COMPOSITE"] = "Composite";
    MessageFormatType["CUSTOM_PAYLOAD"] = "CustomPayload";
    MessageFormatType["PLAIN_TEXT"] = "PlainText";
    MessageFormatType["SSML"] = "SSML";
})(MessageFormatType || (MessageFormatType = {}));
var DialogActionType;
(function (DialogActionType) {
    DialogActionType["CLOSE"] = "Close";
    DialogActionType["CONFIRM_INTENT"] = "ConfirmIntent";
    DialogActionType["DELEGATE"] = "Delegate";
    DialogActionType["ELICIT_INTENT"] = "ElicitIntent";
    DialogActionType["ELICIT_SLOT"] = "ElicitSlot";
})(DialogActionType || (DialogActionType = {}));
var DialogAction;
(function (DialogAction) {
    DialogAction.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.slots && { slots: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.message && { message: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(DialogAction || (DialogAction = {}));
var ConfirmationStatus;
(function (ConfirmationStatus) {
    ConfirmationStatus["CONFIRMED"] = "Confirmed";
    ConfirmationStatus["DENIED"] = "Denied";
    ConfirmationStatus["NONE"] = "None";
})(ConfirmationStatus || (ConfirmationStatus = {}));
var IntentSummary;
(function (IntentSummary) {
    IntentSummary.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.slots && { slots: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(IntentSummary || (IntentSummary = {}));
var GetSessionResponse;
(function (GetSessionResponse) {
    GetSessionResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) })), (obj.recentIntentSummaryView && {
        recentIntentSummaryView: obj.recentIntentSummaryView.map(function (item) { return IntentSummary.filterSensitiveLog(item); }),
    })), (obj.sessionAttributes && { sessionAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(GetSessionResponse || (GetSessionResponse = {}));
var BadGatewayException;
(function (BadGatewayException) {
    BadGatewayException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(BadGatewayException || (BadGatewayException = {}));
var DependencyFailedException;
(function (DependencyFailedException) {
    DependencyFailedException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(DependencyFailedException || (DependencyFailedException = {}));
var LoopDetectedException;
(function (LoopDetectedException) {
    LoopDetectedException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(LoopDetectedException || (LoopDetectedException = {}));
var NotAcceptableException;
(function (NotAcceptableException) {
    NotAcceptableException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(NotAcceptableException || (NotAcceptableException = {}));
var PostContentRequest;
(function (PostContentRequest) {
    PostContentRequest.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.requestAttributes && { requestAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PostContentRequest || (PostContentRequest = {}));
var DialogState;
(function (DialogState) {
    DialogState["CONFIRM_INTENT"] = "ConfirmIntent";
    DialogState["ELICIT_INTENT"] = "ElicitIntent";
    DialogState["ELICIT_SLOT"] = "ElicitSlot";
    DialogState["FAILED"] = "Failed";
    DialogState["FULFILLED"] = "Fulfilled";
    DialogState["READY_FOR_FULFILLMENT"] = "ReadyForFulfillment";
})(DialogState || (DialogState = {}));
var PostContentResponse;
(function (PostContentResponse) {
    PostContentResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.message && { message: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PostContentResponse || (PostContentResponse = {}));
var RequestTimeoutException;
(function (RequestTimeoutException) {
    RequestTimeoutException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(RequestTimeoutException || (RequestTimeoutException = {}));
var UnsupportedMediaTypeException;
(function (UnsupportedMediaTypeException) {
    UnsupportedMediaTypeException.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(UnsupportedMediaTypeException || (UnsupportedMediaTypeException = {}));
var PostTextRequest;
(function (PostTextRequest) {
    PostTextRequest.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.requestAttributes && { requestAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.inputText && { inputText: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PostTextRequest || (PostTextRequest = {}));
var IntentConfidence;
(function (IntentConfidence) {
    IntentConfidence.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(IntentConfidence || (IntentConfidence = {}));
var PredictedIntent;
(function (PredictedIntent) {
    PredictedIntent.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.slots && { slots: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PredictedIntent || (PredictedIntent = {}));
var ContentType;
(function (ContentType) {
    ContentType["GENERIC"] = "application/vnd.amazonaws.card.generic";
})(ContentType || (ContentType = {}));
var Button;
(function (Button) {
    Button.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(Button || (Button = {}));
var GenericAttachment;
(function (GenericAttachment) {
    GenericAttachment.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(GenericAttachment || (GenericAttachment = {}));
var ResponseCard;
(function (ResponseCard) {
    ResponseCard.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(ResponseCard || (ResponseCard = {}));
var SentimentResponse;
(function (SentimentResponse) {
    SentimentResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj)); };
})(SentimentResponse || (SentimentResponse = {}));
var PostTextResponse;
(function (PostTextResponse) {
    PostTextResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.alternativeIntents && {
        alternativeIntents: obj.alternativeIntents.map(function (item) { return PredictedIntent.filterSensitiveLog(item); }),
    })), (obj.message && { message: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING })), (obj.slots && { slots: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PostTextResponse || (PostTextResponse = {}));
var PutSessionRequest;
(function (PutSessionRequest) {
    PutSessionRequest.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) })), (obj.recentIntentSummaryView && {
        recentIntentSummaryView: obj.recentIntentSummaryView.map(function (item) { return IntentSummary.filterSensitiveLog(item); }),
    })), (obj.sessionAttributes && { sessionAttributes: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PutSessionRequest || (PutSessionRequest = {}));
var PutSessionResponse;
(function (PutSessionResponse) {
    PutSessionResponse.filterSensitiveLog = function (obj) { return ((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_1__.__assign)({}, obj), (obj.message && { message: _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_0__.SENSITIVE_STRING }))); };
})(PutSessionResponse || (PutSessionResponse = {}));


/***/ }),

/***/ 49427:
/*!*********************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/protocols/Aws_restJson1.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "serializeAws_restJson1DeleteSessionCommand": () => (/* binding */ serializeAws_restJson1DeleteSessionCommand),
/* harmony export */   "serializeAws_restJson1GetSessionCommand": () => (/* binding */ serializeAws_restJson1GetSessionCommand),
/* harmony export */   "serializeAws_restJson1PostContentCommand": () => (/* binding */ serializeAws_restJson1PostContentCommand),
/* harmony export */   "serializeAws_restJson1PostTextCommand": () => (/* binding */ serializeAws_restJson1PostTextCommand),
/* harmony export */   "serializeAws_restJson1PutSessionCommand": () => (/* binding */ serializeAws_restJson1PutSessionCommand),
/* harmony export */   "deserializeAws_restJson1DeleteSessionCommand": () => (/* binding */ deserializeAws_restJson1DeleteSessionCommand),
/* harmony export */   "deserializeAws_restJson1GetSessionCommand": () => (/* binding */ deserializeAws_restJson1GetSessionCommand),
/* harmony export */   "deserializeAws_restJson1PostContentCommand": () => (/* binding */ deserializeAws_restJson1PostContentCommand),
/* harmony export */   "deserializeAws_restJson1PostTextCommand": () => (/* binding */ deserializeAws_restJson1PostTextCommand),
/* harmony export */   "deserializeAws_restJson1PutSessionCommand": () => (/* binding */ deserializeAws_restJson1PutSessionCommand)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-sdk/protocol-http */ 46404);
/* harmony import */ var _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/smithy-client */ 1882);



var serializeAws_restJson1DeleteSessionCommand = function (input, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                headers = {
                    "Content-Type": "",
                };
                resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
                if (input.botAlias !== undefined) {
                    labelValue = input.botAlias;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botAlias.");
                    }
                    resolvedPath = resolvedPath.replace("{botAlias}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botAlias.");
                }
                if (input.userId !== undefined) {
                    labelValue = input.userId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: userId.");
                    }
                    resolvedPath = resolvedPath.replace("{userId}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: userId.");
                }
                if (input.botName !== undefined) {
                    labelValue = input.botName;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botName.");
                    }
                    resolvedPath = resolvedPath.replace("{botName}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botName.");
                }
                return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                return [2 /*return*/, new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "DELETE",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restJson1GetSessionCommand = function (input, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var headers, resolvedPath, labelValue, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                headers = {
                    "Content-Type": "",
                };
                resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
                if (input.botAlias !== undefined) {
                    labelValue = input.botAlias;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botAlias.");
                    }
                    resolvedPath = resolvedPath.replace("{botAlias}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botAlias.");
                }
                if (input.userId !== undefined) {
                    labelValue = input.userId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: userId.");
                    }
                    resolvedPath = resolvedPath.replace("{userId}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: userId.");
                }
                if (input.botName !== undefined) {
                    labelValue = input.botName;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botName.");
                    }
                    resolvedPath = resolvedPath.replace("{botName}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botName.");
                }
                query = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (input.checkpointLabelFilter !== undefined && { checkpointLabelFilter: input.checkpointLabelFilter }));
                return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                return [2 /*return*/, new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "GET",
                        headers: headers,
                        path: resolvedPath,
                        query: query,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restJson1PostContentCommand = function (input, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                headers = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ "Content-Type": "application/octet-stream", "x-amz-content-sha256": "UNSIGNED-PAYLOAD" }, (isSerializableHeaderValue(input.requestAttributes) && {
                    "x-amz-lex-request-attributes": _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString.fromObject(input.requestAttributes),
                })), (isSerializableHeaderValue(input.sessionAttributes) && {
                    "x-amz-lex-session-attributes": _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString.fromObject(input.sessionAttributes),
                })), (isSerializableHeaderValue(input.contentType) && { "Content-Type": input.contentType })), (isSerializableHeaderValue(input.accept) && { Accept: input.accept }));
                resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/content";
                if (input.botAlias !== undefined) {
                    labelValue = input.botAlias;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botAlias.");
                    }
                    resolvedPath = resolvedPath.replace("{botAlias}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botAlias.");
                }
                if (input.botName !== undefined) {
                    labelValue = input.botName;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botName.");
                    }
                    resolvedPath = resolvedPath.replace("{botName}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botName.");
                }
                if (input.userId !== undefined) {
                    labelValue = input.userId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: userId.");
                    }
                    resolvedPath = resolvedPath.replace("{userId}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: userId.");
                }
                if (input.inputStream !== undefined) {
                    body = input.inputStream;
                }
                return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                return [2 /*return*/, new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restJson1PostTextCommand = function (input, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                headers = {
                    "Content-Type": "application/json",
                };
                resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/text";
                if (input.userId !== undefined) {
                    labelValue = input.userId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: userId.");
                    }
                    resolvedPath = resolvedPath.replace("{userId}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: userId.");
                }
                if (input.botAlias !== undefined) {
                    labelValue = input.botAlias;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botAlias.");
                    }
                    resolvedPath = resolvedPath.replace("{botAlias}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botAlias.");
                }
                if (input.botName !== undefined) {
                    labelValue = input.botName;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botName.");
                    }
                    resolvedPath = resolvedPath.replace("{botName}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botName.");
                }
                body = JSON.stringify((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (input.inputText !== undefined && { inputText: input.inputText })), (input.requestAttributes !== undefined && {
                    requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context),
                })), (input.sessionAttributes !== undefined && {
                    sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),
                })));
                return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                return [2 /*return*/, new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
var serializeAws_restJson1PutSessionCommand = function (input, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_c) {
        switch (_c.label) {
            case 0:
                headers = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({ "Content-Type": "application/json" }, (isSerializableHeaderValue(input.accept) && { Accept: input.accept }));
                resolvedPath = "/bot/{botName}/alias/{botAlias}/user/{userId}/session";
                if (input.userId !== undefined) {
                    labelValue = input.userId;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: userId.");
                    }
                    resolvedPath = resolvedPath.replace("{userId}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: userId.");
                }
                if (input.botAlias !== undefined) {
                    labelValue = input.botAlias;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botAlias.");
                    }
                    resolvedPath = resolvedPath.replace("{botAlias}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botAlias.");
                }
                if (input.botName !== undefined) {
                    labelValue = input.botName;
                    if (labelValue.length <= 0) {
                        throw new Error("Empty value provided for input HTTP label: botName.");
                    }
                    resolvedPath = resolvedPath.replace("{botName}", (0,_aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.extendedEncodeURIComponent)(labelValue));
                }
                else {
                    throw new Error("No value provided for input HTTP label: botName.");
                }
                body = JSON.stringify((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (input.dialogAction !== undefined && {
                    dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context),
                })), (input.recentIntentSummaryView !== undefined && {
                    recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context),
                })), (input.sessionAttributes !== undefined && {
                    sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),
                })));
                return [4 /*yield*/, context.endpoint()];
            case 1:
                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                return [2 /*return*/, new _aws_sdk_protocol_http__WEBPACK_IMPORTED_MODULE_0__.HttpRequest({
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        headers: headers,
                        path: resolvedPath,
                        body: body,
                    })];
        }
    });
}); };
var deserializeAws_restJson1DeleteSessionCommand = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_restJson1DeleteSessionCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    botAlias: undefined,
                    botName: undefined,
                    sessionId: undefined,
                    userId: undefined,
                };
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                if (data.botAlias !== undefined && data.botAlias !== null) {
                    contents.botAlias = data.botAlias;
                }
                if (data.botName !== undefined && data.botName !== null) {
                    contents.botName = data.botName;
                }
                if (data.sessionId !== undefined && data.sessionId !== null) {
                    contents.sessionId = data.sessionId;
                }
                if (data.userId !== undefined && data.userId !== null) {
                    contents.userId = data.userId;
                }
                return [2 /*return*/, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1DeleteSessionCommandError = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
    var _h;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_j) {
        switch (_j.label) {
            case 0:
                _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, output)];
                _h = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3 /*break*/, 2];
                    case "com.amazonaws.lexruntimeservice#BadRequestException": return [3 /*break*/, 2];
                    case "ConflictException": return [3 /*break*/, 4];
                    case "com.amazonaws.lexruntimeservice#ConflictException": return [3 /*break*/, 4];
                    case "InternalFailureException": return [3 /*break*/, 6];
                    case "com.amazonaws.lexruntimeservice#InternalFailureException": return [3 /*break*/, 6];
                    case "LimitExceededException": return [3 /*break*/, 8];
                    case "com.amazonaws.lexruntimeservice#LimitExceededException": return [3 /*break*/, 8];
                    case "NotFoundException": return [3 /*break*/, 10];
                    case "com.amazonaws.lexruntimeservice#NotFoundException": return [3 /*break*/, 10];
                }
                return [3 /*break*/, 12];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 5:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];
            case 7:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 9:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 11:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 13];
            case 12:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _j.label = 13;
            case 13:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_restJson1GetSessionCommand = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_restJson1GetSessionCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    dialogAction: undefined,
                    recentIntentSummaryView: undefined,
                    sessionAttributes: undefined,
                    sessionId: undefined,
                };
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                if (data.dialogAction !== undefined && data.dialogAction !== null) {
                    contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);
                }
                if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {
                    contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);
                }
                if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
                    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);
                }
                if (data.sessionId !== undefined && data.sessionId !== null) {
                    contents.sessionId = data.sessionId;
                }
                return [2 /*return*/, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1GetSessionCommandError = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;
    var _g;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_h) {
        switch (_h.label) {
            case 0:
                _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, output)];
                _g = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadRequestException": return [3 /*break*/, 2];
                    case "com.amazonaws.lexruntimeservice#BadRequestException": return [3 /*break*/, 2];
                    case "InternalFailureException": return [3 /*break*/, 4];
                    case "com.amazonaws.lexruntimeservice#InternalFailureException": return [3 /*break*/, 4];
                    case "LimitExceededException": return [3 /*break*/, 6];
                    case "com.amazonaws.lexruntimeservice#LimitExceededException": return [3 /*break*/, 6];
                    case "NotFoundException": return [3 /*break*/, 8];
                    case "com.amazonaws.lexruntimeservice#NotFoundException": return [3 /*break*/, 8];
                }
                return [3 /*break*/, 10];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 3:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];
            case 5:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 7:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 9:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 11];
            case 10:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _h.label = 11;
            case 11:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_restJson1PostContentCommand = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2 /*return*/, deserializeAws_restJson1PostContentCommandError(output, context)];
        }
        contents = {
            $metadata: deserializeMetadata(output),
            alternativeIntents: undefined,
            audioStream: undefined,
            botVersion: undefined,
            contentType: undefined,
            dialogState: undefined,
            inputTranscript: undefined,
            intentName: undefined,
            message: undefined,
            messageFormat: undefined,
            nluIntentConfidence: undefined,
            sentimentResponse: undefined,
            sessionAttributes: undefined,
            sessionId: undefined,
            slotToElicit: undefined,
            slots: undefined,
        };
        if (output.headers["x-amz-lex-alternative-intents"] !== undefined) {
            contents.alternativeIntents = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-alternative-intents"]);
        }
        if (output.headers["x-amz-lex-message-format"] !== undefined) {
            contents.messageFormat = output.headers["x-amz-lex-message-format"];
        }
        if (output.headers["content-type"] !== undefined) {
            contents.contentType = output.headers["content-type"];
        }
        if (output.headers["x-amz-lex-message"] !== undefined) {
            contents.message = output.headers["x-amz-lex-message"];
        }
        if (output.headers["x-amz-lex-bot-version"] !== undefined) {
            contents.botVersion = output.headers["x-amz-lex-bot-version"];
        }
        if (output.headers["x-amz-lex-sentiment"] !== undefined) {
            contents.sentimentResponse = output.headers["x-amz-lex-sentiment"];
        }
        if (output.headers["x-amz-lex-slots"] !== undefined) {
            contents.slots = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-slots"]);
        }
        if (output.headers["x-amz-lex-input-transcript"] !== undefined) {
            contents.inputTranscript = output.headers["x-amz-lex-input-transcript"];
        }
        if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
            contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
        }
        if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
            contents.sessionAttributes = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
        }
        if (output.headers["x-amz-lex-session-id"] !== undefined) {
            contents.sessionId = output.headers["x-amz-lex-session-id"];
        }
        if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
            contents.dialogState = output.headers["x-amz-lex-dialog-state"];
        }
        if (output.headers["x-amz-lex-intent-name"] !== undefined) {
            contents.intentName = output.headers["x-amz-lex-intent-name"];
        }
        if (output.headers["x-amz-lex-nlu-intent-confidence"] !== undefined) {
            contents.nluIntentConfidence = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-nlu-intent-confidence"]);
        }
        data = output.body;
        contents.audioStream = data;
        return [2 /*return*/, Promise.resolve(contents)];
    });
}); };
var deserializeAws_restJson1PostContentCommandError = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;
    var _p;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_q) {
        switch (_q.label) {
            case 0:
                _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, output)];
                _p = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadGatewayException": return [3 /*break*/, 2];
                    case "com.amazonaws.lexruntimeservice#BadGatewayException": return [3 /*break*/, 2];
                    case "BadRequestException": return [3 /*break*/, 4];
                    case "com.amazonaws.lexruntimeservice#BadRequestException": return [3 /*break*/, 4];
                    case "ConflictException": return [3 /*break*/, 6];
                    case "com.amazonaws.lexruntimeservice#ConflictException": return [3 /*break*/, 6];
                    case "DependencyFailedException": return [3 /*break*/, 8];
                    case "com.amazonaws.lexruntimeservice#DependencyFailedException": return [3 /*break*/, 8];
                    case "InternalFailureException": return [3 /*break*/, 10];
                    case "com.amazonaws.lexruntimeservice#InternalFailureException": return [3 /*break*/, 10];
                    case "LimitExceededException": return [3 /*break*/, 12];
                    case "com.amazonaws.lexruntimeservice#LimitExceededException": return [3 /*break*/, 12];
                    case "LoopDetectedException": return [3 /*break*/, 14];
                    case "com.amazonaws.lexruntimeservice#LoopDetectedException": return [3 /*break*/, 14];
                    case "NotAcceptableException": return [3 /*break*/, 16];
                    case "com.amazonaws.lexruntimeservice#NotAcceptableException": return [3 /*break*/, 16];
                    case "NotFoundException": return [3 /*break*/, 18];
                    case "com.amazonaws.lexruntimeservice#NotFoundException": return [3 /*break*/, 18];
                    case "RequestTimeoutException": return [3 /*break*/, 20];
                    case "com.amazonaws.lexruntimeservice#RequestTimeoutException": return [3 /*break*/, 20];
                    case "UnsupportedMediaTypeException": return [3 /*break*/, 22];
                    case "com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException": return [3 /*break*/, 22];
                }
                return [3 /*break*/, 24];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];
            case 3:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 7:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];
            case 9:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];
            case 11:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 13:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];
            case 15:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];
            case 17:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 18:
                _l = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 19:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 20:
                _m = [{}];
                return [4 /*yield*/, deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)];
            case 21:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 22:
                _o = [{}];
                return [4 /*yield*/, deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];
            case 23:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 25];
            case 24:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _q.label = 25;
            case 25:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_restJson1PostTextCommand = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (output.statusCode !== 200 && output.statusCode >= 300) {
                    return [2 /*return*/, deserializeAws_restJson1PostTextCommandError(output, context)];
                }
                contents = {
                    $metadata: deserializeMetadata(output),
                    alternativeIntents: undefined,
                    botVersion: undefined,
                    dialogState: undefined,
                    intentName: undefined,
                    message: undefined,
                    messageFormat: undefined,
                    nluIntentConfidence: undefined,
                    responseCard: undefined,
                    sentimentResponse: undefined,
                    sessionAttributes: undefined,
                    sessionId: undefined,
                    slotToElicit: undefined,
                    slots: undefined,
                };
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                data = _a.sent();
                if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {
                    contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);
                }
                if (data.botVersion !== undefined && data.botVersion !== null) {
                    contents.botVersion = data.botVersion;
                }
                if (data.dialogState !== undefined && data.dialogState !== null) {
                    contents.dialogState = data.dialogState;
                }
                if (data.intentName !== undefined && data.intentName !== null) {
                    contents.intentName = data.intentName;
                }
                if (data.message !== undefined && data.message !== null) {
                    contents.message = data.message;
                }
                if (data.messageFormat !== undefined && data.messageFormat !== null) {
                    contents.messageFormat = data.messageFormat;
                }
                if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {
                    contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);
                }
                if (data.responseCard !== undefined && data.responseCard !== null) {
                    contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);
                }
                if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {
                    contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);
                }
                if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {
                    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);
                }
                if (data.sessionId !== undefined && data.sessionId !== null) {
                    contents.sessionId = data.sessionId;
                }
                if (data.slotToElicit !== undefined && data.slotToElicit !== null) {
                    contents.slotToElicit = data.slotToElicit;
                }
                if (data.slots !== undefined && data.slots !== null) {
                    contents.slots = deserializeAws_restJson1StringMap(data.slots, context);
                }
                return [2 /*return*/, Promise.resolve(contents)];
        }
    });
}); };
var deserializeAws_restJson1PostTextCommandError = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadGatewayException": return [3 /*break*/, 2];
                    case "com.amazonaws.lexruntimeservice#BadGatewayException": return [3 /*break*/, 2];
                    case "BadRequestException": return [3 /*break*/, 4];
                    case "com.amazonaws.lexruntimeservice#BadRequestException": return [3 /*break*/, 4];
                    case "ConflictException": return [3 /*break*/, 6];
                    case "com.amazonaws.lexruntimeservice#ConflictException": return [3 /*break*/, 6];
                    case "DependencyFailedException": return [3 /*break*/, 8];
                    case "com.amazonaws.lexruntimeservice#DependencyFailedException": return [3 /*break*/, 8];
                    case "InternalFailureException": return [3 /*break*/, 10];
                    case "com.amazonaws.lexruntimeservice#InternalFailureException": return [3 /*break*/, 10];
                    case "LimitExceededException": return [3 /*break*/, 12];
                    case "com.amazonaws.lexruntimeservice#LimitExceededException": return [3 /*break*/, 12];
                    case "LoopDetectedException": return [3 /*break*/, 14];
                    case "com.amazonaws.lexruntimeservice#LoopDetectedException": return [3 /*break*/, 14];
                    case "NotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.lexruntimeservice#NotFoundException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];
            case 3:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 7:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];
            case 9:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];
            case 11:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 13:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];
            case 15:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_restJson1PutSessionCommand = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        if (output.statusCode !== 200 && output.statusCode >= 300) {
            return [2 /*return*/, deserializeAws_restJson1PutSessionCommandError(output, context)];
        }
        contents = {
            $metadata: deserializeMetadata(output),
            audioStream: undefined,
            contentType: undefined,
            dialogState: undefined,
            intentName: undefined,
            message: undefined,
            messageFormat: undefined,
            sessionAttributes: undefined,
            sessionId: undefined,
            slotToElicit: undefined,
            slots: undefined,
        };
        if (output.headers["content-type"] !== undefined) {
            contents.contentType = output.headers["content-type"];
        }
        if (output.headers["x-amz-lex-intent-name"] !== undefined) {
            contents.intentName = output.headers["x-amz-lex-intent-name"];
        }
        if (output.headers["x-amz-lex-message-format"] !== undefined) {
            contents.messageFormat = output.headers["x-amz-lex-message-format"];
        }
        if (output.headers["x-amz-lex-session-attributes"] !== undefined) {
            contents.sessionAttributes = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-session-attributes"]);
        }
        if (output.headers["x-amz-lex-session-id"] !== undefined) {
            contents.sessionId = output.headers["x-amz-lex-session-id"];
        }
        if (output.headers["x-amz-lex-slot-to-elicit"] !== undefined) {
            contents.slotToElicit = output.headers["x-amz-lex-slot-to-elicit"];
        }
        if (output.headers["x-amz-lex-slots"] !== undefined) {
            contents.slots = new _aws_sdk_smithy_client__WEBPACK_IMPORTED_MODULE_1__.LazyJsonString(output.headers["x-amz-lex-slots"]);
        }
        if (output.headers["x-amz-lex-message"] !== undefined) {
            contents.message = output.headers["x-amz-lex-message"];
        }
        if (output.headers["x-amz-lex-dialog-state"] !== undefined) {
            contents.dialogState = output.headers["x-amz-lex-dialog-state"];
        }
        data = output.body;
        contents.audioStream = data;
        return [2 /*return*/, Promise.resolve(contents)];
    });
}); };
var deserializeAws_restJson1PutSessionCommandError = function (output, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
    var _l;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_m) {
        switch (_m.label) {
            case 0:
                _a = [(0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, output)];
                _l = {};
                return [4 /*yield*/, parseBody(output.body, context)];
            case 1:
                parsedOutput = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));
                errorCode = "UnknownError";
                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                _b = errorCode;
                switch (_b) {
                    case "BadGatewayException": return [3 /*break*/, 2];
                    case "com.amazonaws.lexruntimeservice#BadGatewayException": return [3 /*break*/, 2];
                    case "BadRequestException": return [3 /*break*/, 4];
                    case "com.amazonaws.lexruntimeservice#BadRequestException": return [3 /*break*/, 4];
                    case "ConflictException": return [3 /*break*/, 6];
                    case "com.amazonaws.lexruntimeservice#ConflictException": return [3 /*break*/, 6];
                    case "DependencyFailedException": return [3 /*break*/, 8];
                    case "com.amazonaws.lexruntimeservice#DependencyFailedException": return [3 /*break*/, 8];
                    case "InternalFailureException": return [3 /*break*/, 10];
                    case "com.amazonaws.lexruntimeservice#InternalFailureException": return [3 /*break*/, 10];
                    case "LimitExceededException": return [3 /*break*/, 12];
                    case "com.amazonaws.lexruntimeservice#LimitExceededException": return [3 /*break*/, 12];
                    case "NotAcceptableException": return [3 /*break*/, 14];
                    case "com.amazonaws.lexruntimeservice#NotAcceptableException": return [3 /*break*/, 14];
                    case "NotFoundException": return [3 /*break*/, 16];
                    case "com.amazonaws.lexruntimeservice#NotFoundException": return [3 /*break*/, 16];
                }
                return [3 /*break*/, 18];
            case 2:
                _c = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];
            case 3:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 4:
                _d = [{}];
                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];
            case 5:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 6:
                _e = [{}];
                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];
            case 7:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 8:
                _f = [{}];
                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];
            case 9:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 10:
                _g = [{}];
                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];
            case 11:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 12:
                _h = [{}];
                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];
            case 13:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 14:
                _j = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];
            case 15:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 16:
                _k = [{}];
                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];
            case 17:
                response = tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, [tslib__WEBPACK_IMPORTED_MODULE_2__.__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);
                return [3 /*break*/, 19];
            case 18:
                parsedBody = parsedOutput.body;
                errorCode = parsedBody.code || parsedBody.Code || errorCode;
                response = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, parsedBody), { name: "" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: "client", $metadata: deserializeMetadata(output) });
                _m.label = 19;
            case 19:
                message = response.message || response.Message || errorCode;
                response.message = message;
                delete response.Message;
                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];
        }
    });
}); };
var deserializeAws_restJson1BadGatewayExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "BadGatewayException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "BadRequestException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "ConflictException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1DependencyFailedExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "DependencyFailedException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1InternalFailureExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "InternalFailureException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "LimitExceededException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
            retryAfterSeconds: undefined,
        };
        if (parsedOutput.headers["retry-after"] !== undefined) {
            contents.retryAfterSeconds = parsedOutput.headers["retry-after"];
        }
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1LoopDetectedExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "LoopDetectedException",
            $fault: "server",
            $metadata: deserializeMetadata(parsedOutput),
            Message: undefined,
        };
        data = parsedOutput.body;
        if (data.Message !== undefined && data.Message !== null) {
            contents.Message = data.Message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1NotAcceptableExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "NotAcceptableException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "NotFoundException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1RequestTimeoutExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "RequestTimeoutException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) { return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__awaiter)(void 0, void 0, void 0, function () {
    var contents, data;
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__generator)(this, function (_a) {
        contents = {
            name: "UnsupportedMediaTypeException",
            $fault: "client",
            $metadata: deserializeMetadata(parsedOutput),
            message: undefined,
        };
        data = parsedOutput.body;
        if (data.message !== undefined && data.message !== null) {
            contents.message = data.message;
        }
        return [2 /*return*/, contents];
    });
}); };
var serializeAws_restJson1DialogAction = function (input, context) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (input.fulfillmentState !== undefined && { fulfillmentState: input.fulfillmentState })), (input.intentName !== undefined && { intentName: input.intentName })), (input.message !== undefined && { message: input.message })), (input.messageFormat !== undefined && { messageFormat: input.messageFormat })), (input.slotToElicit !== undefined && { slotToElicit: input.slotToElicit })), (input.slots !== undefined && { slots: serializeAws_restJson1StringMap(input.slots, context) })), (input.type !== undefined && { type: input.type }));
};
var serializeAws_restJson1IntentSummary = function (input, context) {
    return (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, (input.checkpointLabel !== undefined && { checkpointLabel: input.checkpointLabel })), (input.confirmationStatus !== undefined && { confirmationStatus: input.confirmationStatus })), (input.dialogActionType !== undefined && { dialogActionType: input.dialogActionType })), (input.fulfillmentState !== undefined && { fulfillmentState: input.fulfillmentState })), (input.intentName !== undefined && { intentName: input.intentName })), (input.slotToElicit !== undefined && { slotToElicit: input.slotToElicit })), (input.slots !== undefined && { slots: serializeAws_restJson1StringMap(input.slots, context) }));
};
var serializeAws_restJson1IntentSummaryList = function (input, context) {
    return input.map(function (entry) { return serializeAws_restJson1IntentSummary(entry, context); });
};
var serializeAws_restJson1StringMap = function (input, context) {
    return Object.entries(input).reduce(function (acc, _a) {
        var _b;
        var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(_a, 2), key = _c[0], value = _c[1];
        return ((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, acc), (_b = {}, _b[key] = value, _b)));
    }, {});
};
var deserializeAws_restJson1Button = function (output, context) {
    return {
        text: output.text !== undefined && output.text !== null ? output.text : undefined,
        value: output.value !== undefined && output.value !== null ? output.value : undefined,
    };
};
var deserializeAws_restJson1DialogAction = function (output, context) {
    return {
        fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,
        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,
        message: output.message !== undefined && output.message !== null ? output.message : undefined,
        messageFormat: output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,
        slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,
        slots: output.slots !== undefined && output.slots !== null
            ? deserializeAws_restJson1StringMap(output.slots, context)
            : undefined,
        type: output.type !== undefined && output.type !== null ? output.type : undefined,
    };
};
var deserializeAws_restJson1GenericAttachment = function (output, context) {
    return {
        attachmentLinkUrl: output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null
            ? output.attachmentLinkUrl
            : undefined,
        buttons: output.buttons !== undefined && output.buttons !== null
            ? deserializeAws_restJson1listOfButtons(output.buttons, context)
            : undefined,
        imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,
        subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,
        title: output.title !== undefined && output.title !== null ? output.title : undefined,
    };
};
var deserializeAws_restJson1genericAttachmentList = function (output, context) {
    return (output || []).map(function (entry) { return deserializeAws_restJson1GenericAttachment(entry, context); });
};
var deserializeAws_restJson1IntentConfidence = function (output, context) {
    return {
        score: output.score !== undefined && output.score !== null ? output.score : undefined,
    };
};
var deserializeAws_restJson1IntentList = function (output, context) {
    return (output || []).map(function (entry) { return deserializeAws_restJson1PredictedIntent(entry, context); });
};
var deserializeAws_restJson1IntentSummary = function (output, context) {
    return {
        checkpointLabel: output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,
        confirmationStatus: output.confirmationStatus !== undefined && output.confirmationStatus !== null
            ? output.confirmationStatus
            : undefined,
        dialogActionType: output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,
        fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,
        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,
        slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,
        slots: output.slots !== undefined && output.slots !== null
            ? deserializeAws_restJson1StringMap(output.slots, context)
            : undefined,
    };
};
var deserializeAws_restJson1IntentSummaryList = function (output, context) {
    return (output || []).map(function (entry) { return deserializeAws_restJson1IntentSummary(entry, context); });
};
var deserializeAws_restJson1listOfButtons = function (output, context) {
    return (output || []).map(function (entry) { return deserializeAws_restJson1Button(entry, context); });
};
var deserializeAws_restJson1PredictedIntent = function (output, context) {
    return {
        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,
        nluIntentConfidence: output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null
            ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context)
            : undefined,
        slots: output.slots !== undefined && output.slots !== null
            ? deserializeAws_restJson1StringMap(output.slots, context)
            : undefined,
    };
};
var deserializeAws_restJson1ResponseCard = function (output, context) {
    return {
        contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,
        genericAttachments: output.genericAttachments !== undefined && output.genericAttachments !== null
            ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context)
            : undefined,
        version: output.version !== undefined && output.version !== null ? output.version : undefined,
    };
};
var deserializeAws_restJson1SentimentResponse = function (output, context) {
    return {
        sentimentLabel: output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,
        sentimentScore: output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined,
    };
};
var deserializeAws_restJson1StringMap = function (output, context) {
    return Object.entries(output).reduce(function (acc, _a) {
        var _b;
        var _c = (0,tslib__WEBPACK_IMPORTED_MODULE_2__.__read)(_a, 2), key = _c[0], value = _c[1];
        return ((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_2__.__assign)({}, acc), (_b = {}, _b[key] = value, _b)));
    }, {});
};
var deserializeMetadata = function (output) { return ({
    httpStatusCode: output.statusCode,
    httpHeaders: output.headers,
    requestId: output.headers["x-amzn-requestid"],
}); };
// Collect low-level response body stream to Uint8Array.
var collectBody = function (streamBody, context) {
    if (streamBody === void 0) { streamBody = new Uint8Array(); }
    if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
    }
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function (streamBody, context) {
    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });
};
var isSerializableHeaderValue = function (value) {
    return value !== undefined &&
        value !== "" &&
        (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
        (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var parseBody = function (streamBody, context) {
    return collectBodyString(streamBody, context).then(function (encoded) {
        if (encoded.length) {
            return JSON.parse(encoded);
        }
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */
var loadRestJsonErrorCode = function (output, data) {
    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };
    var sanitizeErrorCode = function (rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
    return "";
};


/***/ }),

/***/ 16931:
/*!*******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/runtimeConfig.browser.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientDefaultValues": () => (/* binding */ ClientDefaultValues)
/* harmony export */ });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ 42321);
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./package.json */ 29501);
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @aws-crypto/sha256-browser */ 48464);
/* harmony import */ var _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @aws-sdk/fetch-http-handler */ 16423);
/* harmony import */ var _aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @aws-sdk/invalid-dependency */ 3015);
/* harmony import */ var _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @aws-sdk/middleware-retry */ 9485);
/* harmony import */ var _aws_sdk_url_parser_browser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @aws-sdk/url-parser-browser */ 12195);
/* harmony import */ var _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @aws-sdk/util-base64-browser */ 80149);
/* harmony import */ var _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @aws-sdk/util-body-length-browser */ 88920);
/* harmony import */ var _aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @aws-sdk/util-user-agent-browser */ 94190);
/* harmony import */ var _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @aws-sdk/util-utf8-browser */ 62509);
/* harmony import */ var _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./runtimeConfig.shared */ 63644);












var ClientDefaultValues = (0,tslib__WEBPACK_IMPORTED_MODULE_9__.__assign)((0,tslib__WEBPACK_IMPORTED_MODULE_9__.__assign)({}, _runtimeConfig_shared__WEBPACK_IMPORTED_MODULE_10__.ClientSharedValues), { runtime: "browser", base64Decoder: _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_5__.fromBase64, base64Encoder: _aws_sdk_util_base64_browser__WEBPACK_IMPORTED_MODULE_5__.toBase64, bodyLengthChecker: _aws_sdk_util_body_length_browser__WEBPACK_IMPORTED_MODULE_6__.calculateBodyLength, credentialDefaultProvider: (0,_aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_2__.invalidFunction)("Credential is missing"), defaultUserAgent: (0,_aws_sdk_util_user_agent_browser__WEBPACK_IMPORTED_MODULE_7__.defaultUserAgent)(_package_json__WEBPACK_IMPORTED_MODULE_11__.name, _package_json__WEBPACK_IMPORTED_MODULE_11__.version), maxAttempts: _aws_sdk_middleware_retry__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_MAX_ATTEMPTS, region: (0,_aws_sdk_invalid_dependency__WEBPACK_IMPORTED_MODULE_2__.invalidFunction)("Region is missing"), requestHandler: new _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_1__.FetchHttpHandler(), sha256: _aws_crypto_sha256_browser__WEBPACK_IMPORTED_MODULE_0__.Sha256, streamCollector: _aws_sdk_fetch_http_handler__WEBPACK_IMPORTED_MODULE_1__.streamCollector, urlParser: _aws_sdk_url_parser_browser__WEBPACK_IMPORTED_MODULE_4__.parseUrl, utf8Decoder: _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_8__.fromUtf8, utf8Encoder: _aws_sdk_util_utf8_browser__WEBPACK_IMPORTED_MODULE_8__.toUtf8 });


/***/ }),

/***/ 63644:
/*!******************************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/runtimeConfig.shared.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ClientSharedValues": () => (/* binding */ ClientSharedValues)
/* harmony export */ });
/* harmony import */ var _endpoints__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./endpoints */ 14534);

var ClientSharedValues = {
    apiVersion: "2016-11-28",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: _endpoints__WEBPACK_IMPORTED_MODULE_0__.defaultRegionInfoProvider,
    signingName: "lex",
};


/***/ }),

/***/ 62509:
/*!**********************************!*\
  !*** @aws-sdk/util-utf8-browser ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
/* harmony import */ var _pureJs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./pureJs */ 5174);
/* harmony import */ var _whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./whatwgEncodingApi */ 17573);


var fromUtf8 = function (input) {
    return typeof TextEncoder === "function" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.fromUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.fromUtf8)(input);
};
var toUtf8 = function (input) {
    return typeof TextDecoder === "function" ? (0,_whatwgEncodingApi__WEBPACK_IMPORTED_MODULE_1__.toUtf8)(input) : (0,_pureJs__WEBPACK_IMPORTED_MODULE_0__.toUtf8)(input);
};


/***/ }),

/***/ 5174:
/*!****************!*\
  !*** ./pureJs ***!
  \****************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
/**
 * Converts a JS string from its native UCS-2/UTF-16 representation into a
 * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
 *
 * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
 * Closure library, though updated to use typed arrays.
 */
var fromUtf8 = function (input) {
    var bytes = [];
    for (var i = 0, len = input.length; i < len; i++) {
        var value = input.charCodeAt(i);
        if (value < 0x80) {
            bytes.push(value);
        }
        else if (value < 0x800) {
            bytes.push((value >> 6) | 192, (value & 63) | 128);
        }
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
            bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);
        }
        else {
            bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);
        }
    }
    return Uint8Array.from(bytes);
};
/**
 * Converts a typed array of bytes containing UTF-8 data into a native JS
 * string.
 *
 * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the
 * Google Closure library, though updated to use typed arrays and to better
 * handle astral plane code points.
 */
var toUtf8 = function (input) {
    var decoded = "";
    for (var i = 0, len = input.length; i < len; i++) {
        var byte = input[i];
        if (byte < 0x80) {
            decoded += String.fromCharCode(byte);
        }
        else if (192 <= byte && byte < 224) {
            var nextByte = input[++i];
            decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));
        }
        else if (240 <= byte && byte < 365) {
            var surrogatePair = [byte, input[++i], input[++i], input[++i]];
            var encoded = "%" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join("%");
            decoded += decodeURIComponent(encoded);
        }
        else {
            decoded += String.fromCharCode(((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63));
        }
    }
    return decoded;
};


/***/ }),

/***/ 17573:
/*!***************************!*\
  !*** ./whatwgEncodingApi ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "fromUtf8": () => (/* binding */ fromUtf8),
/* harmony export */   "toUtf8": () => (/* binding */ toUtf8)
/* harmony export */ });
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}


/***/ }),

/***/ 29501:
/*!*******************************************************************************!*\
  !*** ./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/package.json ***!
  \*******************************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"name":"@aws-sdk/client-lex-runtime-service","description":"AWS SDK for JavaScript Lex Runtime Service Client for Node.js, Browser and React Native","version":"1.0.0-rc.4","scripts":{"clean":"npm run remove-definitions && npm run remove-dist","build-documentation":"npm run clean && typedoc ./","prepublishOnly":"yarn build","pretest":"yarn build:cjs","remove-definitions":"rimraf ./types","remove-dist":"rimraf ./dist","remove-documentation":"rimraf ./docs","test:unit":"mocha **/cjs/**/*.spec.js","test":"yarn test:unit","build:cjs":"tsc -p tsconfig.json","build:es":"tsc -p tsconfig.es.json","build":"yarn build:cjs && yarn build:es"},"main":"./dist/cjs/index.js","types":"./types/index.d.ts","module":"./dist/es/index.js","browser":{"./runtimeConfig":"./runtimeConfig.browser"},"react-native":{"./runtimeConfig":"./runtimeConfig.native"},"sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"^1.0.0","@aws-crypto/sha256-js":"^1.0.0","@aws-sdk/config-resolver":"1.0.0-rc.3","@aws-sdk/credential-provider-node":"1.0.0-rc.3","@aws-sdk/fetch-http-handler":"1.0.0-rc.3","@aws-sdk/hash-node":"1.0.0-rc.3","@aws-sdk/invalid-dependency":"1.0.0-rc.3","@aws-sdk/middleware-content-length":"1.0.0-rc.3","@aws-sdk/middleware-host-header":"1.0.0-rc.3","@aws-sdk/middleware-logger":"1.0.0-rc.4","@aws-sdk/middleware-retry":"1.0.0-rc.4","@aws-sdk/middleware-serde":"1.0.0-rc.3","@aws-sdk/middleware-signing":"1.0.0-rc.3","@aws-sdk/middleware-stack":"1.0.0-rc.4","@aws-sdk/middleware-user-agent":"1.0.0-rc.3","@aws-sdk/node-config-provider":"1.0.0-rc.3","@aws-sdk/node-http-handler":"1.0.0-rc.3","@aws-sdk/protocol-http":"1.0.0-rc.3","@aws-sdk/smithy-client":"1.0.0-rc.4","@aws-sdk/types":"1.0.0-rc.3","@aws-sdk/url-parser-browser":"1.0.0-rc.3","@aws-sdk/url-parser-node":"1.0.0-rc.3","@aws-sdk/util-base64-browser":"1.0.0-rc.3","@aws-sdk/util-base64-node":"1.0.0-rc.3","@aws-sdk/util-body-length-browser":"1.0.0-rc.3","@aws-sdk/util-body-length-node":"1.0.0-rc.3","@aws-sdk/util-user-agent-browser":"1.0.0-rc.3","@aws-sdk/util-user-agent-node":"1.0.0-rc.3","@aws-sdk/util-utf8-browser":"1.0.0-rc.3","@aws-sdk/util-utf8-node":"1.0.0-rc.3","tslib":"^2.0.0"},"devDependencies":{"@aws-sdk/client-documentation-generator":"1.0.0-rc.3","@types/chai":"^4.2.11","@types/mocha":"^7.0.2","@types/node":"^12.7.5","jest":"^26.1.0","rimraf":"^3.0.0","typedoc":"^0.17.8","typescript":"~4.0.2"},"engines":{"node":">=10.0.0"},"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","homepage":"https://github.com/aws/aws-sdk-js-v3/tree/master/clients/client-lex-runtime-service","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-lex-runtime-service"}}');

/***/ })

}]);
//# sourceMappingURL=node_modules_aws-amplify_ui-components_dist_esm_amplify-chatbot_entry_js.js.map