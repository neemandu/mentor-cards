{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-select-mfa-type_entry_js.js","mappings":"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","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/amplify-select-mfa-type.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-39969785.js';\nimport { Logger, I18n } from '@aws-amplify/core';\nimport { M as MfaOption } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-3f32c42a.js';\nimport { N as NO_AUTH_MODULE_FOUND, f as USER_NOT_SETUP_SOFTWARE_TOKEN_MFA, g as USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA } from './constants-d1abe7de.js';\n\nconst logger = new Logger('SelectMFAType');\nconst AmplifySelectMFAType = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Fires when Verify is clicked */\n        this.handleSubmit = event => this.verify(event);\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        this.MFAMethod = null;\n        this.isTOTP = false;\n        this.isNoMFA = false;\n        this.isSMS = false;\n        this.loading = false;\n    }\n    handleRadioButtonChange(event) {\n        this.TOTPSetup = false;\n        this.selectMessage = null;\n        // Reseting state values to default\n        this.isNoMFA = false;\n        this.isTOTP = false;\n        this.isSMS = false;\n        const { value, type, checked } = event.target;\n        const checkType = ['radio', 'checkbox'].includes(type);\n        if (value === MfaOption.SMS && checkType) {\n            this.isSMS = checked;\n        }\n        if (value === MfaOption.TOTP && checkType) {\n            this.isTOTP = checked;\n        }\n        if (value === MfaOption.NOMFA && checkType) {\n            this.isNoMFA = checked;\n        }\n    }\n    async verify(event) {\n        // avoid submitting the form\n        if (event) {\n            event.preventDefault();\n        }\n        logger.debug('MFA Type Values', { TOTP: this.isTOTP, SMS: this.isSMS, 'No MFA': this.isNoMFA });\n        if (this.isTOTP) {\n            this.MFAMethod = MfaOption.TOTP;\n        }\n        else if (this.isSMS) {\n            this.MFAMethod = MfaOption.SMS;\n        }\n        else if (this.isNoMFA) {\n            this.MFAMethod = MfaOption.NOMFA;\n        }\n        const user = this.authData;\n        if (!Auth || typeof Auth.setPreferredMFA !== 'function') {\n            throw new Error(NO_AUTH_MODULE_FOUND);\n        }\n        this.loading = true;\n        try {\n            const preferredMFAData = await Auth.setPreferredMFA(user, this.MFAMethod);\n            logger.debug('Set Preferred MFA Succeeded', preferredMFAData);\n            this.selectMessage = `${I18n.get(Translations.SUCCESS_MFA_TYPE)} ${this.MFAMethod}`;\n            // \tTODO Add Toast = showToast: true,\n        }\n        catch (error) {\n            const { message } = error;\n            if (message === USER_NOT_SETUP_SOFTWARE_TOKEN_MFA || message === USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA) {\n                this.TOTPSetup = true;\n                this.selectMessage = I18n.get(Translations.SETUP_TOTP_REQUIRED);\n                // \tTODO Add Toast = showToast: true,\n            }\n            else {\n                logger.debug('Set Preferred MFA failed', error);\n                this.selectMessage = I18n.get(Translations.UNABLE_TO_SETUP_MFA_AT_THIS_TIME);\n                // \tTODO Add Toast = showToast: true,\n            }\n        }\n        finally {\n            this.loading = false;\n        }\n    }\n    contentBuilder() {\n        if (!this.MFATypes || Object.keys(this.MFATypes).length < 2) {\n            logger.debug(I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE));\n            return (h(\"div\", null, h(\"a\", null, I18n.get(Translations.LESS_THAN_TWO_MFA_VALUES_MESSAGE))));\n        }\n        const { SMS, TOTP, Optional } = this.MFATypes;\n        return (\n        // TODO: Add Toast messages\n        h(\"amplify-form-section\", { submitButtonText: I18n.get(Translations.SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT), headerText: I18n.get(Translations.SELECT_MFA_TYPE_HEADER_TEXT), handleSubmit: event => this.handleSubmit(event), loading: this.loading }, SMS ? (h(\"amplify-radio-button\", { key: \"sms\", name: \"MFAType\", value: \"SMS\", label: \"SMS\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, TOTP ? (h(\"amplify-radio-button\", { key: \"totp\", name: \"MFAType\", value: \"TOTP\", label: \"TOTP\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null, Optional ? (h(\"amplify-radio-button\", { key: \"noMFA\", name: \"MFAType\", value: \"NOMFA\", label: \"No MFA\", handleInputChange: event => this.handleRadioButtonChange(event) })) : null));\n    }\n    render() {\n        return (h(\"div\", null, this.contentBuilder(), this.TOTPSetup ? h(\"amplify-totp-setup\", { user: this.authData }) : null));\n    }\n};\n\nexport { AmplifySelectMFAType as amplify_select_mfa_type };\n"],"names":["r","registerInstance","h","Logger","I18n","M","MfaOption","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","f","USER_NOT_SETUP_SOFTWARE_TOKEN_MFA","g","USER_NOT_VERIFIED_SOFTWARE_TOKEN_MFA","logger","AmplifySelectMFAType","constructor","hostRef","handleSubmit","event","verify","TOTPSetup","selectMessage","MFAMethod","isTOTP","isNoMFA","isSMS","loading","handleRadioButtonChange","value","type","checked","target","checkType","includes","SMS","TOTP","NOMFA","preventDefault","debug","user","authData","setPreferredMFA","Error","preferredMFAData","get","SUCCESS_MFA_TYPE","error","message","SETUP_TOTP_REQUIRED","UNABLE_TO_SETUP_MFA_AT_THIS_TIME","contentBuilder","MFATypes","Object","keys","length","LESS_THAN_TWO_MFA_VALUES_MESSAGE","Optional","submitButtonText","SELECT_MFA_TYPE_SUBMIT_BUTTON_TEXT","headerText","SELECT_MFA_TYPE_HEADER_TEXT","key","name","label","handleInputChange","render","amplify_select_mfa_type"],"sourceRoot":"webpack:///"}