{"version":3,"file":"common.js","mappings":"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","sources":["./node_modules/@aws-amplify/ui-components/dist/esm/auth-helpers-d97ec2fb.js"],"sourcesContent":["import { Logger, isEmpty } from '@aws-amplify/core';\nimport { A as AuthState, C as ChallengeName } from './auth-types-78df304e.js';\nimport { Auth } from '@aws-amplify/auth';\nimport { T as Translations } from './Translations-3f32c42a.js';\nimport { N as NO_AUTH_MODULE_FOUND } from './constants-d1abe7de.js';\nimport { a as dispatchToastHubEvent } from './helpers-9a4b32d1.js';\n\nconst logger = new Logger('auth-helpers');\nasync function checkContact(user, handleAuthStateChange) {\n    if (!Auth || typeof Auth.verifiedContact !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    try {\n        const data = await Auth.verifiedContact(user);\n        if (!isEmpty(data.verified) || isEmpty(data.unverified)) {\n            handleAuthStateChange(AuthState.SignedIn, user);\n        }\n        else {\n            const newUser = Object.assign(user, data);\n            handleAuthStateChange(AuthState.VerifyContact, newUser);\n        }\n    }\n    catch (error) {\n        dispatchToastHubEvent(error);\n    }\n}\nconst handleSignIn = async (username, password, handleAuthStateChange) => {\n    if (!Auth || typeof Auth.signIn !== 'function') {\n        throw new Error(NO_AUTH_MODULE_FOUND);\n    }\n    try {\n        const user = await Auth.signIn(username, password);\n        logger.debug(user);\n        if (user.challengeName === ChallengeName.SMSMFA || user.challengeName === ChallengeName.SoftwareTokenMFA) {\n            logger.debug('confirm user with ' + user.challengeName);\n            handleAuthStateChange(AuthState.ConfirmSignIn, user);\n        }\n        else if (user.challengeName === ChallengeName.NewPasswordRequired) {\n            logger.debug('require new password', user.challengeParam);\n            handleAuthStateChange(AuthState.ResetPassword, user);\n        }\n        else if (user.challengeName === ChallengeName.MFASetup) {\n            logger.debug('TOTP setup', user.challengeParam);\n            handleAuthStateChange(AuthState.TOTPSetup, user);\n        }\n        else if (user.challengeName === ChallengeName.CustomChallenge &&\n            user.challengeParam &&\n            user.challengeParam.trigger === 'true') {\n            logger.debug('custom challenge', user.challengeParam);\n            handleAuthStateChange(AuthState.CustomConfirmSignIn, user);\n        }\n        else {\n            await checkContact(user, handleAuthStateChange);\n        }\n    }\n    catch (error) {\n        if (error.code === 'UserNotConfirmedException') {\n            logger.debug('the user is not confirmed');\n            handleAuthStateChange(AuthState.ConfirmSignUp, { username });\n        }\n        else if (error.code === 'PasswordResetRequiredException') {\n            logger.debug('the user requires a new password');\n            handleAuthStateChange(AuthState.ForgotPassword, { username });\n        }\n        else if (error.code === 'InvalidParameterException' && password === '') {\n            logger.debug('Password cannot be empty');\n            error.message = Translations.EMPTY_PASSWORD;\n        }\n        dispatchToastHubEvent(error);\n    }\n};\n\nexport { checkContact as c, handleSignIn as h };\n"],"names":["Logger","isEmpty","A","AuthState","C","ChallengeName","Auth","T","Translations","N","NO_AUTH_MODULE_FOUND","a","dispatchToastHubEvent","logger","checkContact","user","handleAuthStateChange","verifiedContact","Error","data","verified","unverified","SignedIn","newUser","Object","assign","VerifyContact","error","handleSignIn","username","password","signIn","debug","challengeName","SMSMFA","SoftwareTokenMFA","ConfirmSignIn","NewPasswordRequired","challengeParam","ResetPassword","MFASetup","TOTPSetup","CustomChallenge","trigger","CustomConfirmSignIn","code","ConfirmSignUp","ForgotPassword","message","EMPTY_PASSWORD","c","h"],"sourceRoot":"webpack:///"}