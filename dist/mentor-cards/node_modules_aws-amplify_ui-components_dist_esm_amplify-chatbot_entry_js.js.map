{"version":3,"file":"node_modules_aws-amplify_ui-components_dist_esm_amplify-chatbot_entry_js.js","mappings":";;;;;;;;;;;;;;;;;AAAA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACqE;AACxB;AAC7C,iBAAiB,4DAAM;AACvB;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,qBAAqB;AACpC,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,iDAAiD,UAAU;AAC3D,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B;AAChE,uCAAuC,oEAAoE;AAC3G,kDAAkD,sDAAc;AAChE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAC4B;AACtB;AACP,+DAAgB;;;;;;;;;;;;;;;;;;;;;;;AClJhB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B;AACA;AACA,eAAe,gBAAgB,sCAAsC,kBAAkB;AACvF,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,CAAC;AACD,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,SAAI,IAAI,SAAI;AAC7B,4BAA4B,+DAA+D,iBAAiB;AAC5G;AACA,oCAAoC,MAAM,+BAA+B,YAAY;AACrF,mCAAmC,MAAM,mCAAmC,YAAY;AACxF,gCAAgC;AAChC;AACA,KAAK;AACL;AACA,mBAAmB,SAAI,IAAI,SAAI;AAC/B,cAAc,6BAA6B,0BAA0B,cAAc,qBAAqB;AACxG,iBAAiB,oDAAoD,qEAAqE,cAAc;AACxJ,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,mCAAmC,SAAS;AAC5C,mCAAmC,WAAW,UAAU;AACxD,0CAA0C,cAAc;AACxD;AACA,8GAA8G,OAAO;AACrH,iFAAiF,iBAAiB;AAClG,yDAAyD,gBAAgB,QAAQ;AACjF,+CAA+C,gBAAgB,gBAAgB;AAC/E;AACA,kCAAkC;AAClC;AACA;AACA,UAAU,YAAY,aAAa,SAAS,UAAU;AACtD,oCAAoC,SAAS;AAC7C;AACA;AACsE;AAC8C;AACrB;AACtC;AACzD,iBAAiB,4DAAM;AACvB;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,mBAAmB;AAC3F,iBAAiB;AACjB;AACA;AACA;AACA,yCAAyC,iDAAiD,mBAAmB,IAAI;AACjH;AACA;AACA;AACA;AACA,yCAAyC,yEAAyE;AAClH;AACA;AACA;AACA,yCAAyC,sEAAsE;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,8DAAe;AAC5D;AACA;AACA;AACA;AACA;AACA,2DAA2D,wFAAuB;AAClF;AACA;AACA,6CAA6C,sEAAmB;AAChE,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gFAAe;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mFAAkB;AACnE;AACA;AACA;AACA,6CAA6C,sEAAO;AACpD;AACA;AACA;AACA,kEAAkE,WAAW,yBAAyB;AACtG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,+EAA4B;AACJ;;;;;;;;;;;;;;;AC9MnB;AACP;AACA;AACA;AACA,sCAAsC,gCAAgC;AACtE;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,SAAI,IAAI,SAAI;AAC5B;AACA,iDAAiD,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC4D;AAC5D,iBAAiB,4DAAM;AACvB;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,iCAAiC;AACjC,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,CAAC;AACuC;;;;;;;;;;;;;;;;;;;;;;;;AChDxC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C,CAAC,2DAAQ;AACoB;;;;;;;;;;;;;;;;;;;;ACjDI;AACqC;AACsD;AAClE;AACE;AAC7D;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,yEAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,gFAAkC;AACvE,sCAAsC,iFAAmC;AACzE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uEAAuE;AACvE,SAAS;AACT;AACA;AACA,eAAe,+FAAqC;AACpD;AACA;AACA,eAAe,iGAAuC;AACtD;AACA;AACA,CAAC,CAAC,2DAAQ;AACiB;;;;;;;;;;;;;;;ACjD3B;AACA,iCAAiC,OAAO;AACxC,oCAAoC,OAAO;AAC3C,qCAAqC,OAAO;AAC5C,uCAAuC,OAAO;AAC9C,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,OAAO;AAC/D;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA,2DAA2D,OAAO;AAClE;AACA;AACA;AACA;AACA;AACA,4DAA4D,OAAO;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,OAAO;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnGiC;AAC0B;AACpD;AACP;AACA,8DAA8D,QAAQ,+CAAQ,GAAG;AACjF,CAAC,kDAAkD;AAC5C;AACP;A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AoC,gDAAgD,sBAAsB;AAC/I,sCAAsC,QAAQ,QAAQ,SAAS,OAAO,OAAO;AAC7E;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO,GAAG,kFAA4B;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS,GAAG,kFAA4B;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ,GAAG,kFAA4B;AACjG;AACA;AACA;AACA;AACA,sCAAsC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG;AACnE;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0CAA0C,+DAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,KAAK;AACL,CAAC;AACM,gFAAgF,OAAO,gDAAS;AACvG;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,qFAAqF,OAAO,gDAAS;AACrG;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA,sBAAsB,+CAAQ,GAAG;AACjC;AACA;AACA;AACA,+BAA+B,iDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,gJAAgJ;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACM,6EAA6E,OAAO,gDAAS;AACpG;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,kFAAkF,OAAO,gDAAS;AAClG;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA,sBAAsB,+CAAQ,GAAG;AACjC;AACA;AACA;AACA,+BAA+B,iDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,gJAAgJ;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACM,8EAA8E,OAAO,gDAAS;AACrG;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,kEAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,kEAAgB;AAC/D;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,mFAAmF,OAAO,gDAAS;AACnG;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA,sBAAsB,+CAAQ,GAAG;AACjC;AACA;AACA;AACA,+BAA+B,iDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,gJAAgJ;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACM,2EAA2E,OAAO,gDAAS;AAClG;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,gFAAgF,OAAO,gDAAS;AAChG;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA,sBAAsB,+CAAQ,GAAG;AACjC;AACA;AACA;AACA,+BAA+B,iDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,gJAAgJ;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACM,6EAA6E,OAAO,gDAAS;AACpG;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,kEAAgB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,kEAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,kFAAkF,OAAO,gDAAS;AAClG;AACA;AACA,WAAW,kDAAW;AACtB;AACA;AACA,sBAAsB,+CAAQ,GAAG;AACjC;AACA;AACA;AACA,+BAA+B,iDAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA,wBAAwB;AACxB;AACA;AACA,2BAA2B,iDAAc,UAAU,iDAAc,sCAAsC,yDAAyD;AAChK;AACA;AACA;AACA;AACA,2BAA2B,+CAAQ,CAAC,+CAAQ,GAAG,iBAAiB,gJAAgJ;AAChN;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,6FAA6F,OAAO,gDAAS;AAC7G;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,6FAA6F,OAAO,gDAAS;AAC7G;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2FAA2F,OAAO,gDAAS;AAC3G;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,mGAAmG,OAAO,gDAAS;AACnH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,kGAAkG,OAAO,gDAAS;AAClH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,gGAAgG,OAAO,gDAAS;AAChH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,+FAA+F,OAAO,gDAAS;AAC/G;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,gGAAgG,OAAO,gDAAS;AAChH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,2FAA2F,OAAO,gDAAS;AAC3G;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,iGAAiG,OAAO,gDAAS;AACjH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD,uGAAuG,OAAO,gDAAS;AACvH;AACA,WAAW,kDAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC;AACD;AACA,WAAW,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG,6CAA6C,0CAA0C,yCAAyC,8BAA8B,sCAAsC,wBAAwB,4CAA4C,oCAAoC,2CAA2C,kCAAkC,oCAAoC,8DAA8D,mCAAmC,kBAAkB;AAC5lB;AACA;AACA,WAAW,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,CAAC,+CAAQ,GAAG,4CAA4C,wCAAwC,iDAAiD,8CAA8C,+CAA+C,0CAA0C,+CAA+C,0CAA0C,yCAAyC,8BAA8B,2CAA2C,kCAAkC,oCAAoC,8DAA8D;AACvqB;AACA;AACA,wCAAwC,6DAA6D;AACrG;AACA;AACA;AACA;AACA,iBAAiB,6CAAM;AACvB,gBAAgB,+CAAQ,CAAC,+CAAQ,GAAG,gBAAgB;AACpD,KAAK,IAAI;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,mEAAmE;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,iEAAiE;AAClH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,+DAA+D;AAChH;AACA;AACA,iDAAiD,wDAAwD;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAM;AACvB,gBAAgB,+CAAQ,CAAC,+CAAQ,GAAG,gBAAgB;AACpD,KAAK,IAAI;AACT;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,mCAAmC;AACtG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2CAA2C,+CAA+C,+CAA+C;AACzI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1zCiC;AACQ;AACW;AAC4B;AAClB;AACG;AACV;AACa;AACI;AACJ;AACN;AACF;AACrD,0BAA0B,+CAAQ,CAAC,+CAAQ,GAAG,EAAE,sEAAkB,KAAK,mCAAmC,oEAAU,iBAAiB,kEAAQ,qBAAqB,kFAAmB,6BAA6B,4EAAe,6CAA6C,kFAAgB,CAAC,gDAAgB,EAAE,mDAAmB,gBAAgB,2EAAoB,UAAU,4EAAe,2CAA2C,yEAAgB,YAAY,8DAAM,mBAAmB,wEAAe,aAAa,iEAAQ,eAAe,gEAAQ,eAAe,8DAAM,EAAE;;;;;;;;;;;;;;;;ACZlgB;AACjD;AACP;AACA;AACA,cAAc;AACd,wBAAwB,iEAAyB;AACjD;AACA;;;;;;;;;;;;;;;;;;ACPsE;AAC6B;AAC5F;AACP,+CAA+C,4DAAmB,UAAU,iDAAU;AACtF;AACO;AACP,+CAA+C,0DAAiB,UAAU,+CAAQ;AAClF;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,wCAAwC,SAAS;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,gCAAgC;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACxDO;AACP;AACA;AACO;AACP;AACA","sources":["./node_modules/@aws-amplify/interactions/lib-esm/Interactions.js","./node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexProvider.js","./node_modules/@aws-amplify/interactions/lib-esm/Providers/AWSLexProviderHelper/convert.js","./node_modules/@aws-amplify/interactions/lib-esm/Providers/InteractionsProvider.js","./node_modules/@aws-amplify/ui-components/dist/esm/amplify-chatbot.entry.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/LexRuntimeServiceClient.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/commands/PostContentCommand.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/commands/PostTextCommand.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/endpoints.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/models/models_0.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/protocols/Aws_restJson1.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/runtimeConfig.browser.js","./node_modules/@aws-sdk/client-lex-runtime-service/dist/es/runtimeConfig.shared.js","webpack:///@aws-sdk/util-utf8-browser?e0ae","webpack:///./pureJs?cedc","webpack:///./whatwgEncodingApi?0c7d"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { AWSLexProvider } from './Providers';\nvar logger = new Logger('Interactions');\nvar InteractionsClass = /** @class */ (function () {\n    /**\n     * Initialize PubSub with AWS configurations\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     */\n    function InteractionsClass(options) {\n        this._options = options;\n        logger.debug('Interactions Options', this._options);\n        this._pluggables = {};\n    }\n    InteractionsClass.prototype.getModuleName = function () {\n        return 'Interactions';\n    };\n    /**\n     *\n     * @param {InteractionsOptions} options - Configuration object for Interactions\n     * @return {Object} - The current configuration\n     */\n    InteractionsClass.prototype.configure = function (options) {\n        var _this = this;\n        var opt = options ? options.Interactions || options : {};\n        logger.debug('configure Interactions', { opt: opt });\n        this._options = __assign(__assign({ bots: {} }, opt), opt.Interactions);\n        var aws_bots_config = this._options.aws_bots_config;\n        var bots_config = this._options.bots;\n        if (!Object.keys(bots_config).length && aws_bots_config) {\n            // Convert aws_bots_config to bots object\n            if (Array.isArray(aws_bots_config)) {\n                aws_bots_config.forEach(function (bot) {\n                    _this._options.bots[bot.name] = bot;\n                });\n            }\n        }\n        // Check if AWSLex provider is already on pluggables\n        if (!this._pluggables.AWSLexProvider &&\n            bots_config &&\n            Object.keys(bots_config)\n                .map(function (key) { return bots_config[key]; })\n                .find(function (bot) { return !bot.providerName || bot.providerName === 'AWSLexProvider'; })) {\n            this._pluggables.AWSLexProvider = new AWSLexProvider();\n        }\n        Object.keys(this._pluggables).map(function (key) {\n            _this._pluggables[key].configure(_this._options.bots);\n        });\n        return this._options;\n    };\n    InteractionsClass.prototype.addPluggable = function (pluggable) {\n        if (pluggable && pluggable.getCategory() === 'Interactions') {\n            if (!this._pluggables[pluggable.getProviderName()]) {\n                pluggable.configure(this._options.bots);\n                this._pluggables[pluggable.getProviderName()] = pluggable;\n                return;\n            }\n            else {\n                throw new Error('Bot ' + pluggable.getProviderName() + ' already plugged');\n            }\n        }\n    };\n    InteractionsClass.prototype.send = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var botProvider;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._options.bots || !this._options.bots[botname]) {\n                            throw new Error('Bot ' + botname + ' does not exist');\n                        }\n                        botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n                        if (!this._pluggables[botProvider]) {\n                            throw new Error('Bot ' +\n                                botProvider +\n                                ' does not have valid pluggin did you try addPluggable first?');\n                        }\n                        return [4 /*yield*/, this._pluggables[botProvider].sendMessage(botname, message)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    InteractionsClass.prototype.onComplete = function (botname, callback) {\n        if (!this._options.bots || !this._options.bots[botname]) {\n            throw new Error('Bot ' + botname + ' does not exist');\n        }\n        var botProvider = this._options.bots[botname].providerName || 'AWSLexProvider';\n        if (!this._pluggables[botProvider]) {\n            throw new Error('Bot ' +\n                botProvider +\n                ' does not have valid pluggin did you try addPluggable first?');\n        }\n        this._pluggables[botProvider].onComplete(botname, callback);\n    };\n    return InteractionsClass;\n}());\nexport { InteractionsClass };\nexport var Interactions = new InteractionsClass(null);\nAmplify.register(Interactions);\n","/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport { LexRuntimeServiceClient, PostTextCommand, PostContentCommand, } from '@aws-sdk/client-lex-runtime-service';\nimport { ConsoleLogger as Logger, Credentials, getAmplifyUserAgent, } from '@aws-amplify/core';\nimport { convert } from './AWSLexProviderHelper/convert';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */ (function (_super) {\n    __extends(AWSLexProvider, _super);\n    function AWSLexProvider(options) {\n        if (options === void 0) { options = {}; }\n        var _this = _super.call(this, options) || this;\n        _this._botsCompleteCallback = {};\n        return _this;\n    }\n    AWSLexProvider.prototype.getProviderName = function () {\n        return 'AWSLexProvider';\n    };\n    AWSLexProvider.prototype.reportBotStatus = function (data, botname) {\n        var _this = this;\n        // Check if state is fulfilled to resolve onFullfilment promise\n        logger.debug('postContent state', data.dialogState);\n        if (data.dialogState === 'ReadyForFulfillment' ||\n            data.dialogState === 'Fulfilled') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () {\n                    return _this._botsCompleteCallback[botname](null, { slots: data.slots });\n                }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete(null, { slots: data.slots }); }, 0);\n            }\n        }\n        if (data.dialogState === 'Failed') {\n            if (typeof this._botsCompleteCallback[botname] === 'function') {\n                setTimeout(function () { return _this._botsCompleteCallback[botname]('Bot conversation failed'); }, 0);\n            }\n            if (this._config &&\n                typeof this._config[botname].onComplete === 'function') {\n                setTimeout(function () { return _this._config[botname].onComplete('Bot conversation failed'); }, 0);\n            }\n        }\n    };\n    AWSLexProvider.prototype.sendMessage = function (botname, message) {\n        return __awaiter(this, void 0, void 0, function () {\n            var credentials, params, postTextCommand, data, err_1, content, messageType, postContentCommand, data, audioArray, err_2;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._config[botname]) {\n                            return [2 /*return*/, Promise.reject('Bot ' + botname + ' does not exist')];\n                        }\n                        return [4 /*yield*/, Credentials.get()];\n                    case 1:\n                        credentials = _a.sent();\n                        if (!credentials) {\n                            return [2 /*return*/, Promise.reject('No credentials')];\n                        }\n                        this.lexRuntimeServiceClient = new LexRuntimeServiceClient({\n                            region: this._config[botname].region,\n                            credentials: credentials,\n                            customUserAgent: getAmplifyUserAgent(),\n                        });\n                        if (!(typeof message === 'string')) return [3 /*break*/, 6];\n                        params = {\n                            botAlias: this._config[botname].alias,\n                            botName: botname,\n                            inputText: message,\n                            userId: credentials.identityId,\n                        };\n                        logger.debug('postText to lex', message);\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 5]);\n                        postTextCommand = new PostTextCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postTextCommand)];\n                    case 3:\n                        data = _a.sent();\n                        this.reportBotStatus(data, botname);\n                        return [2 /*return*/, data];\n                    case 4:\n                        err_1 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_1)];\n                    case 5: return [3 /*break*/, 11];\n                    case 6:\n                        content = message.content, messageType = message.options.messageType;\n                        if (messageType === 'voice') {\n                            params = {\n                                botAlias: this._config[botname].alias,\n                                botName: botname,\n                                contentType: 'audio/x-l16; sample-rate=16000',\n                                inputStream: content,\n                                userId: credentials.identityId,\n                                accept: 'audio/mpeg',\n                            };\n                        }\n                        else {\n                            params = {\n                                botAlias: this._config[botname].alias,\n                                botName: botname,\n                                contentType: 'text/plain; charset=utf-8',\n                                inputStream: content,\n                                userId: credentials.identityId,\n                                accept: 'audio/mpeg',\n                            };\n                        }\n                        logger.debug('postContent to lex', message);\n                        _a.label = 7;\n                    case 7:\n                        _a.trys.push([7, 10, , 11]);\n                        postContentCommand = new PostContentCommand(params);\n                        return [4 /*yield*/, this.lexRuntimeServiceClient.send(postContentCommand)];\n                    case 8:\n                        data = _a.sent();\n                        return [4 /*yield*/, convert(data.audioStream)];\n                    case 9:\n                        audioArray = _a.sent();\n                        this.reportBotStatus(data, botname);\n                        return [2 /*return*/, __assign(__assign({}, data), { audioStream: audioArray })];\n                    case 10:\n                        err_2 = _a.sent();\n                        return [2 /*return*/, Promise.reject(err_2)];\n                    case 11: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AWSLexProvider.prototype.onComplete = function (botname, callback) {\n        if (!this._config[botname]) {\n            throw new ErrorEvent('Bot ' + botname + ' does not exist');\n        }\n        this._botsCompleteCallback[botname] = callback;\n    };\n    return AWSLexProvider;\n}(AbstractInteractionsProvider));\nexport { AWSLexProvider };\n","export var convert = function (stream) {\n    if (stream instanceof Blob || stream instanceof ReadableStream) {\n        return new Response(stream)\n            .arrayBuffer()\n            .then(function (buffer) { return new Uint8Array(buffer); });\n    }\n    else {\n        throw new Error('Readable is not supported.');\n    }\n};\n","/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nvar logger = new Logger('AbstractInteractionsProvider');\nvar AbstractInteractionsProvider = /** @class */ (function () {\n    function AbstractInteractionsProvider(options) {\n        if (options === void 0) { options = {}; }\n        this._config = options;\n    }\n    AbstractInteractionsProvider.prototype.configure = function (config) {\n        if (config === void 0) { config = {}; }\n        this._config = __assign(__assign({}, this._config), config);\n        logger.debug(\"configure \" + this.getProviderName(), this._config);\n        return this.options;\n    };\n    AbstractInteractionsProvider.prototype.getCategory = function () {\n        return 'Interactions';\n    };\n    Object.defineProperty(AbstractInteractionsProvider.prototype, \"options\", {\n        get: function () {\n            return __assign({}, this._config);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return AbstractInteractionsProvider;\n}());\nexport { AbstractInteractionsProvider };\n","import { r as registerInstance, h, c as createEvent, H as Host, g as getElement } from './index-39969785.js';\nimport { Logger, browserOrNode, I18n } from '@aws-amplify/core';\nimport '@aws-amplify/auth';\nimport { T as Translations } from './Translations-3f32c42a.js';\nimport { d as NO_INTERACTIONS_MODULE_FOUND } from './constants-d1abe7de.js';\nimport { Interactions } from '@aws-amplify/interactions';\n\n// AudioRecorder settings\nconst RECORDER_EXPORT_MIME_TYPE = 'application/octet-stream';\nconst DEFAULT_EXPORT_SAMPLE_RATE = 16000;\nconst FFT_SIZE = 2048; // window size in samples for Fast Fourier Transform (FFT)\nconst FFT_MAX_DECIBELS = -10; // maximum power value in the scaling range for the FFT analysis data\nconst FFT_MIN_DECIBELS = -90; // minimum power value in the scaling range for the FFT analysis data\nconst FFT_SMOOTHING_TIME_CONSTANT = 0.85; // averaging constant with the last analysis frame\n\n/**\n * Merges multiple buffers into one.\n */\nconst mergeBuffers = (bufferArray, recLength) => {\n    const result = new Float32Array(recLength);\n    let offset = 0;\n    for (let i = 0; i < bufferArray.length; i++) {\n        result.set(bufferArray[i], offset);\n        offset += bufferArray[i].length;\n    }\n    return result;\n};\n/**\n * Downsamples audio to desired export sample rate.\n */\nconst downsampleBuffer = (buffer, recordSampleRate, exportSampleRate) => {\n    if (exportSampleRate === recordSampleRate) {\n        return buffer;\n    }\n    const sampleRateRatio = recordSampleRate / exportSampleRate;\n    const newLength = Math.round(buffer.length / sampleRateRatio);\n    const result = new Float32Array(newLength);\n    let offsetResult = 0;\n    let offsetBuffer = 0;\n    while (offsetResult < result.length) {\n        const nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n        let accum = 0, count = 0;\n        for (let i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n            accum += buffer[i];\n            count++;\n        }\n        result[offsetResult] = accum / count;\n        offsetResult++;\n        offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n};\n/**\n * converts raw audio values to 16 bit pcm.\n */\nconst floatTo16BitPCM = (output, offset, input) => {\n    let byteOffset = offset;\n    for (let i = 0; i < input.length; i++, byteOffset += 2) {\n        const s = Math.max(-1, Math.min(1, input[i]));\n        output.setInt16(byteOffset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n};\n/**\n * Write given strings in big-endian order.\n */\nconst writeString = (view, offset, string) => {\n    for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n    }\n};\n/**\n * Encodes raw pcm audio into a wav file.\n */\nconst encodeWAV = (samples, exportSampleRate) => {\n    /**\n     * WAV file consists of three parts: RIFF header, WAVE subchunk, and data subchunk. We precompute the size of them.\n     */\n    const audioSize = samples.length * 2; // We use 16-bit samples, so we have (2 * sampleLength) bytes.\n    const fmtSize = 24; // Byte size of the fmt subchunk: 24 bytes that the audio information that we'll set below.\n    const dataSize = 8 + audioSize; // Byte size of the data subchunk: raw sound data plus 8 bytes for the subchunk descriptions.\n    const totalByteSize = 12 + fmtSize + dataSize; // Byte size of the whole file, including the chunk header / descriptor.\n    // create DataView object to write byte values into\n    const buffer = new ArrayBuffer(totalByteSize); // buffer to write the chunk values in.\n    const view = new DataView(buffer);\n    /**\n     * Start writing the .wav file. We write top to bottom, so byte offset (first numeric argument) increases strictly.\n     */\n    // RIFF header\n    writeString(view, 0, 'RIFF'); // At offset 0, write the letters \"RIFF\"\n    view.setUint32(4, fmtSize + dataSize, true); // At offset 4, write the size of fmt and data chunk size combined.\n    writeString(view, 8, 'WAVE'); // At offset 8, write the format type \"WAVE\"\n    // fmt subchunk\n    writeString(view, 12, 'fmt '); //chunkdId 'fmt '\n    view.setUint32(16, fmtSize - 8, true); // fmt subchunk size below this value. We set 8 bytes already, so subtract 8 bytes from fmtSize.\n    view.setUint16(20, 1, true); // Audio format code, which is 1 for PCM.\n    view.setUint16(22, 1, true); // Number of audio channels. We use mono, ie 1.\n    view.setUint32(24, exportSampleRate, true); // Sample rate of the audio file.\n    view.setUint32(28, exportSampleRate * 2, true); // Data rate, or # of data bytes per second. Since each sample is 2 bytes, this is 2 * sampleRate.\n    view.setUint16(32, 2, true); // block align, # of bytes per sample including all channels, ie. 2 bytes.\n    view.setUint16(34, 16, true); // bits per sample, ie. 16 bits\n    // data subchunk\n    writeString(view, 36, 'data'); // write the chunkId 'data'\n    view.setUint32(40, audioSize, true); // Audio byte size\n    floatTo16BitPCM(view, 44, samples); // raw pcm values then go here.\n    return view;\n};\n/**\n * Given arrays of raw pcm audio, downsamples the audio to desired sample rate and encodes it to a wav audio file.\n *\n * @param recBuffer {Float32Array[]} - 2d float array containing the recorded raw audio\n * @param recLength {number} - total length of recorded audio\n * @param recordSampleRate {number} - sample rate of the recorded audio\n * @param exportSampleRate {number} - desired sample rate of the exported file\n */\nconst exportBuffer = (recBuffer, recLength, recordSampleRate, exportSampleRate) => {\n    const mergedBuffers = mergeBuffers(recBuffer, recLength);\n    const downsampledBuffer = downsampleBuffer(mergedBuffers, recordSampleRate, exportSampleRate);\n    const encodedWav = encodeWAV(downsampledBuffer, exportSampleRate);\n    const audioBlob = new Blob([encodedWav], {\n        type: RECORDER_EXPORT_MIME_TYPE,\n    });\n    return audioBlob;\n};\n\nconst logger = new Logger('AudioRecorder');\nclass AudioRecorder {\n    constructor(options) {\n        // input mic stream is stored in a buffer\n        this.streamBuffer = [];\n        this.streamBufferLength = 0;\n        this.recording = false;\n        this.options = options;\n    }\n    /**\n     * This must be called first to enable audio context and request microphone access.\n     * Once access granted, it connects all the necessary audio nodes to the context so that it can begin recording or playing.\n     */\n    async init() {\n        if (browserOrNode().isBrowser) {\n            window.AudioContext = window.AudioContext || window.webkitAudioContext;\n            this.audioContext = new AudioContext();\n            await navigator.mediaDevices\n                .getUserMedia({ audio: true })\n                .then(stream => {\n                this.audioSupported = true;\n                this.setupAudioNodes(stream);\n            })\n                .catch(() => {\n                this.audioSupported = false;\n                return Promise.reject('Audio is not supported');\n            });\n        }\n        else {\n            this.audioSupported = false;\n            return Promise.reject('Audio is not supported');\n        }\n    }\n    /**\n     * Setup audio nodes after successful `init`.\n     */\n    async setupAudioNodes(stream) {\n        try {\n            await this.audioContext.resume();\n        }\n        catch (err) {\n            logger.error(err);\n        }\n        const sourceNode = this.audioContext.createMediaStreamSource(stream);\n        const processorNode = this.audioContext.createScriptProcessor(4096, 1, 1);\n        processorNode.onaudioprocess = audioProcessingEvent => {\n            if (!this.recording)\n                return;\n            const stream = audioProcessingEvent.inputBuffer.getChannelData(0);\n            this.streamBuffer.push(new Float32Array(stream)); // set to a copy of the stream\n            this.streamBufferLength += stream.length;\n            this.analyse();\n        };\n        const analyserNode = this.audioContext.createAnalyser();\n        analyserNode.minDecibels = FFT_MIN_DECIBELS;\n        analyserNode.maxDecibels = FFT_MAX_DECIBELS;\n        analyserNode.smoothingTimeConstant = FFT_SMOOTHING_TIME_CONSTANT;\n        sourceNode.connect(analyserNode);\n        analyserNode.connect(processorNode);\n        processorNode.connect(sourceNode.context.destination);\n        this.analyserNode = analyserNode;\n    }\n    /**\n     * Start recording audio and listen for silence.\n     *\n     * @param onSilence {SilenceHandler} - called whenever silence is detected\n     * @param visualizer {Visualizer} - called with audio data on each audio process to be used for visualization.\n     */\n    async startRecording(onSilence, visualizer) {\n        if (this.recording || !this.audioSupported)\n            return;\n        this.onSilence = onSilence || function () { };\n        this.visualizer = visualizer || function () { };\n        const context = this.audioContext;\n        try {\n            await context.resume();\n        }\n        catch (err) {\n            logger.error(err);\n        }\n        this.start = Date.now();\n        this.recording = true;\n    }\n    /**\n     * Pause recording\n     */\n    stopRecording() {\n        if (!this.audioSupported)\n            return;\n        this.recording = false;\n    }\n    /**\n     * Pause recording and clear audio buffer\n     */\n    clear() {\n        this.stopRecording();\n        this.streamBufferLength = 0;\n        this.streamBuffer = [];\n    }\n    /**\n     * Plays given audioStream with audioContext\n     *\n     * @param buffer {Uint8Array} - audioStream to be played\n     */\n    play(buffer) {\n        if (!buffer || !this.audioSupported)\n            return;\n        const myBlob = new Blob([buffer]);\n        return new Promise((res, rej) => {\n            const fileReader = new FileReader();\n            fileReader.onload = () => {\n                if (this.playbackSource)\n                    this.playbackSource.disconnect(); // disconnect previous playback source\n                this.playbackSource = this.audioContext.createBufferSource();\n                const successCallback = (buf) => {\n                    this.playbackSource.buffer = buf;\n                    this.playbackSource.connect(this.audioContext.destination);\n                    this.playbackSource.onended = () => {\n                        return res();\n                    };\n                    this.playbackSource.start(0);\n                };\n                const errorCallback = err => {\n                    return rej(err);\n                };\n                this.audioContext.decodeAudioData(fileReader.result, successCallback, errorCallback);\n            };\n            fileReader.onerror = () => rej();\n            fileReader.readAsArrayBuffer(myBlob);\n        });\n    }\n    /**\n     * Stops playing audio if there's a playback source connected.\n     */\n    stop() {\n        if (this.playbackSource) {\n            this.playbackSource.stop();\n        }\n    }\n    /**\n     * Called after each audioProcess. Check for silence and give fft time domain data to visualizer.\n     */\n    analyse() {\n        if (!this.audioSupported)\n            return;\n        const analyser = this.analyserNode;\n        analyser.fftSize = FFT_SIZE;\n        const bufferLength = analyser.fftSize;\n        const dataArray = new Uint8Array(bufferLength);\n        const amplitude = this.options.amplitude;\n        const time = this.options.time;\n        analyser.getByteTimeDomainData(dataArray);\n        this.visualizer(dataArray, bufferLength);\n        for (let i = 0; i < bufferLength; i++) {\n            // Normalize between -1 and 1.\n            const curr_value_time = dataArray[i] / 128 - 1.0;\n            if (curr_value_time > amplitude || curr_value_time < -1 * amplitude) {\n                this.start = Date.now();\n            }\n        }\n        const newtime = Date.now();\n        const elapsedTime = newtime - this.start;\n        if (elapsedTime > time) {\n            this.onSilence();\n        }\n    }\n    /**\n     * Encodes recorded buffer to a wav file and exports it to a blob.\n     *\n     * @param exportSampleRate {number} - desired sample rate of the exported buffer\n     */\n    async exportWAV(exportSampleRate = DEFAULT_EXPORT_SAMPLE_RATE) {\n        if (!this.audioSupported)\n            return;\n        const recordSampleRate = this.audioContext.sampleRate;\n        const blob = exportBuffer(this.streamBuffer, this.streamBufferLength, recordSampleRate, exportSampleRate);\n        this.clear();\n        return blob;\n    }\n}\n\nconst visualize = (dataArray, bufferLength, canvas) => {\n    if (!canvas)\n        return;\n    if (!browserOrNode().isBrowser)\n        throw new Error('Visualization is not supported on non-browsers.');\n    const { width, height } = canvas.getBoundingClientRect();\n    // need to update the default canvas width and height\n    canvas.width = width;\n    canvas.height = height;\n    const canvasCtx = canvas.getContext('2d');\n    canvasCtx.fillStyle = 'white';\n    canvasCtx.clearRect(0, 0, width, height);\n    const draw = () => {\n        canvasCtx.fillRect(0, 0, width, height);\n        canvasCtx.lineWidth = 1;\n        const color = getComputedStyle(document.documentElement).getPropertyValue('--amplify-primary-color');\n        canvasCtx.strokeStyle = !color || color === '' ? '#ff9900' : color; // TODO: try separate css variable\n        canvasCtx.beginPath();\n        const sliceWidth = (width * 1.0) / bufferLength;\n        let x = 0;\n        for (let i = 0; i < bufferLength || i % 3 === 0; i++) {\n            const value = dataArray[i] / 128.0;\n            const y = (value * height) / 2;\n            if (i === 0) {\n                canvasCtx.moveTo(x, y);\n            }\n            else {\n                canvasCtx.lineTo(x, y);\n            }\n            x += sliceWidth;\n        }\n        canvasCtx.lineTo(canvas.width, canvas.height / 2);\n        canvasCtx.stroke();\n    };\n    // Register our draw function with requestAnimationFrame.\n    requestAnimationFrame(draw);\n};\n\nconst amplifyChatbotCss = \".bot .dot{background-color:var(--bot-dot-color)}.user .dot{background-color:var(--user-dot-color)}.dot-flashing{width:2.625rem}.dot-flashing .dot{display:inline-block;width:0.625rem;height:0.625rem;border-radius:10rem;opacity:0.65}.dot-flashing .left{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:0s;animation-delay:0s}.dot-flashing .middle{margin-left:0.375rem;margin-right:0.375rem;-webkit-animation:dot-flashing 1s infinite linear alternate;animation:dot-flashing 1s infinite linear alternate;-webkit-animation-delay:0.5s;animation-delay:0.5s}.dot-flashing .right{-webkit-animation:dot-flashing 1s infinite alternate;animation:dot-flashing 1s infinite alternate;-webkit-animation-delay:1s;animation-delay:1s}@-webkit-keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}@keyframes dot-flashing{0%{opacity:0.65}50%,100%{opacity:0.1}}:host{--width:28.75rem;--height:37.5rem;--header-color:var(--amplify-secondary-color);--header-size:var(--amplify-text-lg);--bot-background-color:rgb(230, 230, 230);--bot-text-color:black;--bot-dot-color:var(--bot-text-color);--user-background-color:var(--amplify-blue);--user-text-color:var(--amplify-white);--user-dot-color:var(--user-text-color)}.amplify-chatbot{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-direction:column;flex-direction:column;background-color:var(--background-color);border-radius:0.375rem;-webkit-box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);box-shadow:0.0625rem 0rem 0.25rem 0 rgba(0, 0, 0, 0.15);-webkit-box-sizing:border-box;box-sizing:border-box;font-family:var(--amplify-font-family);margin-bottom:1rem;width:100%;height:var(--height);max-width:var(--width)}@media (min-width: 672px){.amplify-chatbot{width:var(--width)}}.header{padding:1.25rem 0.375rem 1.25rem 0.375rem;color:var(--header-color);font-size:var(--header-size);font-weight:bold;text-align:center;word-wrap:break-word}.body{border-top:0.0625rem solid rgba(0, 0, 0, 0.05);padding:1.5rem 1rem 0 1rem;display:-ms-flexbox;display:flex;-ms-flex-positive:1;flex-grow:1;-ms-flex-direction:column;flex-direction:column;overflow:auto}.bubble{max-width:100%;padding:0.8em 1.4em;text-align:left;word-wrap:break-word;margin-bottom:0.625rem}.bot{margin-right:auto;background-color:var(--bot-background-color);color:var(--bot-text-color);border-radius:1.5rem 1.5rem 1.5rem 0}.user{margin-left:auto;background-color:var(--user-background-color);color:var(--user-text-color);border-radius:1.5rem 1.5rem 0 1.5rem}.footer{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;border-top:0.062rem solid rgba(0, 0, 0, 0.05);padding-right:0.625rem;min-height:3.125rem}.footer amplify-input{--border:none;--margin:0;-ms-flex-positive:1;flex-grow:1}canvas{margin-left:0.625rem;margin-right:0.625rem;-ms-flex-positive:1;flex-grow:1;height:3.125rem}.icon-button{--icon-height:1.25rem;--icon-fill:var(--amplify-primary-color);--padding:0.625rem;--width:auto}\";\n\n// enum for possible bot states\nvar ChatState;\n(function (ChatState) {\n    ChatState[ChatState[\"Initial\"] = 0] = \"Initial\";\n    ChatState[ChatState[\"Listening\"] = 1] = \"Listening\";\n    ChatState[ChatState[\"SendingText\"] = 2] = \"SendingText\";\n    ChatState[ChatState[\"SendingVoice\"] = 3] = \"SendingVoice\";\n    ChatState[ChatState[\"Error\"] = 4] = \"Error\";\n})(ChatState || (ChatState = {}));\n// Message types\nvar MessageFrom;\n(function (MessageFrom) {\n    MessageFrom[\"Bot\"] = \"bot\";\n    MessageFrom[\"User\"] = \"user\";\n})(MessageFrom || (MessageFrom = {}));\n// Error types\nvar ChatErrorType;\n(function (ChatErrorType) {\n    ChatErrorType[ChatErrorType[\"Recoverable\"] = 0] = \"Recoverable\";\n    ChatErrorType[ChatErrorType[\"Unrecoverable\"] = 1] = \"Unrecoverable\";\n})(ChatErrorType || (ChatErrorType = {}));\nconst AmplifyChatbot = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /** Clear messages when conversation finishes */\n        this.clearOnComplete = false;\n        /** Continue listening to users after they send the message */\n        this.conversationModeOn = false;\n        /** Text placed in the top header */\n        this.botTitle = Translations.CHATBOT_TITLE;\n        /** Whether voice chat is enabled */\n        this.voiceEnabled = false;\n        /** Whether text chat is enabled */\n        this.textEnabled = true;\n        /** Amount of silence (in ms) to wait for */\n        this.silenceTime = 1500;\n        /** Noise threshold between -1 and 1. Anything below is considered a silence. */\n        this.silenceThreshold = 0.2;\n        /** Messages in current session */\n        this.messages = [];\n        /** Text input box value  */\n        this.text = '';\n        /** Current app state */\n        this.chatState = ChatState.Initial;\n        /**\n         * Rendering methods\n         */\n        this.messageJSX = (messages) => {\n            const messageList = messages.map(message => h(\"div\", { class: `bubble ${message.from}` }, message.content));\n            if (this.chatState === ChatState.SendingText || this.chatState === ChatState.SendingVoice) {\n                // if waiting for voice message, show animation on user side because app is waiting for transcript. Else put it on bot side.\n                const client = this.chatState === ChatState.SendingText ? MessageFrom.Bot : MessageFrom.User;\n                messageList.push(h(\"div\", { class: `bubble ${client}` }, h(\"div\", { class: `dot-flashing ${client}` }, h(\"span\", { class: \"dot left\" }), h(\"span\", { class: \"dot middle\" }), h(\"span\", { class: \"dot right\" }))));\n            }\n            return messageList;\n        };\n        this.chatCompleted = createEvent(this, \"chatCompleted\", 7);\n    }\n    // Occurs when user presses enter in input box\n    submitHandler(_event) {\n        this.sendTextMessage();\n    }\n    /**\n     * Lifecycle functions\n     */\n    componentWillLoad() {\n        if (!Interactions || typeof Interactions.onComplete !== 'function') {\n            throw new Error(NO_INTERACTIONS_MODULE_FOUND);\n        }\n        this.validateProps();\n    }\n    componentDidRender() {\n        // scroll to the bottom if necessary\n        const body = this.element.shadowRoot.querySelector('.body');\n        body.scrollTop = body.scrollHeight;\n    }\n    validateProps() {\n        if (!this.voiceEnabled && !this.textEnabled) {\n            this.setError(Translations.CHAT_DISABLED_ERROR, ChatErrorType.Unrecoverable);\n            return;\n        }\n        else if (!this.botName) {\n            this.setError(Translations.NO_BOT_NAME_ERROR, ChatErrorType.Unrecoverable);\n            return;\n        }\n        if (this.welcomeMessage)\n            this.appendToChat(this.welcomeMessage, MessageFrom.Bot);\n        // Initialize AudioRecorder if voice is enabled\n        if (this.voiceEnabled) {\n            this.audioRecorder = new AudioRecorder({\n                time: this.silenceTime,\n                amplitude: this.silenceThreshold,\n            });\n            this.audioRecorder.init().catch(err => {\n                this.setError(err, ChatErrorType.Recoverable);\n            });\n        }\n        // Callback function to be called after chat is completed\n        const onComplete = (err, data) => {\n            this.chatCompleted.emit({\n                data,\n                err,\n            });\n            if (this.clearOnComplete) {\n                this.reset();\n            }\n            else {\n                this.chatState = ChatState.Initial;\n            }\n        };\n        try {\n            Interactions.onComplete(this.botName, onComplete);\n        }\n        catch (err) {\n            this.setError(err, ChatErrorType.Unrecoverable);\n        }\n    }\n    /**\n     * Handlers\n     */\n    handleMicButton() {\n        if (this.chatState !== ChatState.Initial)\n            return;\n        this.audioRecorder.stop();\n        this.chatState = ChatState.Listening;\n        this.audioRecorder.startRecording(() => this.handleSilence(), (data, length) => this.visualizer(data, length));\n    }\n    handleSilence() {\n        this.chatState = ChatState.SendingVoice;\n        this.audioRecorder.stopRecording();\n        this.audioRecorder.exportWAV().then(blob => {\n            this.sendVoiceMessage(blob);\n        });\n    }\n    handleTextChange(event) {\n        const target = event.target;\n        this.text = target.value;\n    }\n    handleCancelButton() {\n        this.audioRecorder.clear();\n        this.chatState = ChatState.Initial;\n    }\n    handleToastClose(errorType) {\n        this.error = undefined; // clear error\n        // if error is recoverable, reset the app state to initial\n        if (errorType === ChatErrorType.Recoverable) {\n            this.chatState = ChatState.Initial;\n        }\n    }\n    /**\n     * Visualization\n     */\n    visualizer(dataArray, bufferLength) {\n        const canvas = this.element.shadowRoot.querySelector('canvas');\n        visualize(dataArray, bufferLength, canvas);\n    }\n    /**\n     * Interactions helpers\n     */\n    async sendTextMessage() {\n        if (this.text.length === 0 || this.chatState !== ChatState.Initial)\n            return;\n        const text = this.text;\n        this.text = '';\n        this.appendToChat(text, MessageFrom.User);\n        this.chatState = ChatState.SendingText;\n        let response;\n        try {\n            response = await Interactions.send(this.botName, text);\n        }\n        catch (err) {\n            this.setError(err, ChatErrorType.Recoverable);\n            return;\n        }\n        if (response.message) {\n            this.appendToChat(response.message, MessageFrom.Bot);\n        }\n        this.chatState = ChatState.Initial;\n    }\n    async sendVoiceMessage(audioInput) {\n        const interactionsMessage = {\n            content: audioInput,\n            options: {\n                messageType: 'voice',\n            },\n        };\n        let response;\n        try {\n            response = await Interactions.send(this.botName, interactionsMessage);\n        }\n        catch (err) {\n            this.setError(err, ChatErrorType.Recoverable);\n            return;\n        }\n        this.chatState = ChatState.Initial;\n        const dialogState = response.dialogState;\n        if (response.inputTranscript)\n            this.appendToChat(response.inputTranscript, MessageFrom.User);\n        this.appendToChat(response.message, MessageFrom.Bot);\n        await this.audioRecorder\n            .play(response.audioStream)\n            .then(() => {\n            // if conversationMode is on, chat is incomplete, and mic button isn't pressed yet, resume listening.\n            if (this.conversationModeOn &&\n                dialogState !== 'Fulfilled' &&\n                dialogState !== 'Failed' &&\n                this.chatState === ChatState.Initial) {\n                this.handleMicButton();\n            }\n        })\n            .catch(err => this.setError(err, ChatErrorType.Recoverable));\n    }\n    appendToChat(content, from) {\n        this.messages = [\n            ...this.messages,\n            {\n                content,\n                from,\n            },\n        ];\n    }\n    /**\n     * State control methods\n     */\n    setError(error, errorType) {\n        const message = typeof error === 'string' ? error : error.message;\n        this.chatState = ChatState.Error;\n        this.error = { message, errorType };\n    }\n    reset() {\n        this.chatState = ChatState.Initial;\n        this.text = '';\n        this.error = undefined;\n        this.messages = [];\n        if (this.welcomeMessage)\n            this.appendToChat(this.welcomeMessage, MessageFrom.Bot);\n        this.audioRecorder && this.audioRecorder.clear();\n    }\n    listeningFooterJSX() {\n        const visualization = h(\"canvas\", { height: \"50\" });\n        const cancelButton = (h(\"amplify-button\", { \"data-test\": \"chatbot-cancel-button\", handleButtonClick: () => this.handleCancelButton(), class: \"icon-button\", variant: \"icon\", icon: \"ban\" }));\n        return [visualization, cancelButton];\n    }\n    footerJSX() {\n        if (this.chatState === ChatState.Listening)\n            return this.listeningFooterJSX();\n        const inputPlaceholder = this.textEnabled\n            ? Translations.TEXT_INPUT_PLACEHOLDER\n            : Translations.VOICE_INPUT_PLACEHOLDER;\n        const textInput = (h(\"amplify-input\", { placeholder: I18n.get(inputPlaceholder), description: \"text\", handleInputChange: evt => this.handleTextChange(evt), value: this.text, disabled: this.chatState === ChatState.Error || !this.textEnabled }));\n        const micButton = this.voiceEnabled && (h(\"amplify-button\", { \"data-test\": \"chatbot-mic-button\", handleButtonClick: () => this.handleMicButton(), class: \"icon-button\", variant: \"icon\", icon: \"microphone\", disabled: this.chatState === ChatState.Error || this.chatState !== ChatState.Initial }));\n        const sendButton = this.textEnabled && (h(\"amplify-button\", { \"data-test\": \"chatbot-send-button\", class: \"icon-button\", variant: \"icon\", icon: \"send\", handleButtonClick: () => this.sendTextMessage(), disabled: this.chatState === ChatState.Error || this.chatState !== ChatState.Initial }));\n        return [textInput, micButton, sendButton];\n    }\n    errorToast() {\n        if (!this.error)\n            return;\n        const { message, errorType } = this.error;\n        return h(\"amplify-toast\", { message: I18n.get(message), handleClose: () => this.handleToastClose(errorType) });\n    }\n    render() {\n        return (h(Host, null, h(\"div\", { class: \"amplify-chatbot\" }, h(\"slot\", { name: \"header\" }, h(\"div\", { class: \"header\", \"data-test\": \"chatbot-header\" }, I18n.get(this.botTitle))), h(\"div\", { class: \"body\", \"data-test\": \"chatbot-body\" }, this.messageJSX(this.messages)), h(\"div\", { class: \"footer\", \"data-test\": \"chatbot-footer\" }, this.footerJSX()), this.errorToast())));\n    }\n    get element() { return getElement(this); }\n};\nAmplifyChatbot.style = amplifyChatbotCss;\n\nexport { AmplifyChatbot as amplify_chatbot };\n","import { __assign, __extends } from \"tslib\";\nimport { ClientDefaultValues as __ClientDefaultValues } from \"./runtimeConfig\";\nimport { resolveEndpointsConfig, resolveRegionConfig, } from \"@aws-sdk/config-resolver\";\nimport { getContentLengthPlugin } from \"@aws-sdk/middleware-content-length\";\nimport { getHostHeaderPlugin, resolveHostHeaderConfig, } from \"@aws-sdk/middleware-host-header\";\nimport { getLoggerPlugin } from \"@aws-sdk/middleware-logger\";\nimport { getRetryPlugin, resolveRetryConfig } from \"@aws-sdk/middleware-retry\";\nimport { getAwsAuthPlugin, resolveAwsAuthConfig, } from \"@aws-sdk/middleware-signing\";\nimport { getUserAgentPlugin, resolveUserAgentConfig, } from \"@aws-sdk/middleware-user-agent\";\nimport { Client as __Client, } from \"@aws-sdk/smithy-client\";\n/**\n * <p>Amazon Lex provides both build and runtime endpoints. Each endpoint provides a set of\n *       operations (API). Your conversational bot uses the runtime API to understand user utterances\n *       (user input text or voice). For example, suppose a user says \"I want pizza\", your bot sends\n *       this input to Amazon Lex using the runtime API. Amazon Lex recognizes that the user request is\n *       for the OrderPizza intent (one of the intents defined in the bot). Then Amazon Lex engages in\n *       user conversation on behalf of the bot to elicit required information (slot values, such as\n *       pizza size and crust type), and then performs fulfillment activity (that you configured when\n *       you created the bot). You use the build-time API to create and manage your Amazon Lex bot. For\n *       a list of build-time operations, see the build-time API, . </p>\n */\nvar LexRuntimeServiceClient = /** @class */ (function (_super) {\n    __extends(LexRuntimeServiceClient, _super);\n    function LexRuntimeServiceClient(configuration) {\n        var _this = this;\n        var _config_0 = __assign(__assign({}, __ClientDefaultValues), configuration);\n        var _config_1 = resolveRegionConfig(_config_0);\n        var _config_2 = resolveEndpointsConfig(_config_1);\n        var _config_3 = resolveAwsAuthConfig(_config_2);\n        var _config_4 = resolveRetryConfig(_config_3);\n        var _config_5 = resolveUserAgentConfig(_config_4);\n        var _config_6 = resolveHostHeaderConfig(_config_5);\n        _this = _super.call(this, _config_6) || this;\n        _this.config = _config_6;\n        _this.middlewareStack.use(getAwsAuthPlugin(_this.config));\n        _this.middlewareStack.use(getRetryPlugin(_this.config));\n        _this.middlewareStack.use(getUserAgentPlugin(_this.config));\n        _this.middlewareStack.use(getContentLengthPlugin(_this.config));\n        _this.middlewareStack.use(getHostHeaderPlugin(_this.config));\n        _this.middlewareStack.use(getLoggerPlugin(_this.config));\n        return _this;\n    }\n    LexRuntimeServiceClient.prototype.destroy = function () {\n        _super.prototype.destroy.call(this);\n    };\n    return LexRuntimeServiceClient;\n}(__Client));\nexport { LexRuntimeServiceClient };\n","import { __extends } from \"tslib\";\nimport { PostContentRequest, PostContentResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PostContentCommand, serializeAws_restJson1PostContentCommand, } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nvar PostContentCommand = /** @class */ (function (_super) {\n    __extends(PostContentCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PostContentCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    PostContentCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"LexRuntimeServiceClient\";\n        var commandName = \"PostContentCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PostContentRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: PostContentResponse.filterSensitiveLog,\n        };\n        if (typeof logger.info === \"function\") {\n            logger.info({\n                clientName: clientName,\n                commandName: commandName,\n            });\n        }\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PostContentCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1PostContentCommand(input, context);\n    };\n    PostContentCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1PostContentCommand(output, context);\n    };\n    return PostContentCommand;\n}($Command));\nexport { PostContentCommand };\n","import { __extends } from \"tslib\";\nimport { PostTextRequest, PostTextResponse } from \"../models/models_0\";\nimport { deserializeAws_restJson1PostTextCommand, serializeAws_restJson1PostTextCommand, } from \"../protocols/Aws_restJson1\";\nimport { getSerdePlugin } from \"@aws-sdk/middleware-serde\";\nimport { Command as $Command } from \"@aws-sdk/smithy-client\";\nvar PostTextCommand = /** @class */ (function (_super) {\n    __extends(PostTextCommand, _super);\n    // Start section: command_properties\n    // End section: command_properties\n    function PostTextCommand(input) {\n        var _this = \n        // Start section: command_constructor\n        _super.call(this) || this;\n        _this.input = input;\n        return _this;\n        // End section: command_constructor\n    }\n    PostTextCommand.prototype.resolveMiddleware = function (clientStack, configuration, options) {\n        this.middlewareStack.use(getSerdePlugin(configuration, this.serialize, this.deserialize));\n        var stack = clientStack.concat(this.middlewareStack);\n        var logger = configuration.logger;\n        var clientName = \"LexRuntimeServiceClient\";\n        var commandName = \"PostTextCommand\";\n        var handlerExecutionContext = {\n            logger: logger,\n            clientName: clientName,\n            commandName: commandName,\n            inputFilterSensitiveLog: PostTextRequest.filterSensitiveLog,\n            outputFilterSensitiveLog: PostTextResponse.filterSensitiveLog,\n        };\n        if (typeof logger.info === \"function\") {\n            logger.info({\n                clientName: clientName,\n                commandName: commandName,\n            });\n        }\n        var requestHandler = configuration.requestHandler;\n        return stack.resolve(function (request) {\n            return requestHandler.handle(request.request, options || {});\n        }, handlerExecutionContext);\n    };\n    PostTextCommand.prototype.serialize = function (input, context) {\n        return serializeAws_restJson1PostTextCommand(input, context);\n    };\n    PostTextCommand.prototype.deserialize = function (output, context) {\n        return deserializeAws_restJson1PostTextCommand(output, context);\n    };\n    return PostTextCommand;\n}($Command));\nexport { PostTextCommand };\n","// Partition default templates\nvar AWS_TEMPLATE = \"runtime.lex.{region}.amazonaws.com\";\nvar AWS_CN_TEMPLATE = \"runtime.lex.{region}.amazonaws.com.cn\";\nvar AWS_ISO_TEMPLATE = \"runtime.lex.{region}.c2s.ic.gov\";\nvar AWS_ISO_B_TEMPLATE = \"runtime.lex.{region}.sc2s.sgov.gov\";\nvar AWS_US_GOV_TEMPLATE = \"runtime.lex.{region}.amazonaws.com\";\n// Partition regions\nvar AWS_REGIONS = new Set([\n    \"ap-east-1\",\n    \"ap-northeast-1\",\n    \"ap-northeast-2\",\n    \"ap-south-1\",\n    \"ap-southeast-1\",\n    \"ap-southeast-2\",\n    \"ca-central-1\",\n    \"eu-central-1\",\n    \"eu-north-1\",\n    \"eu-west-1\",\n    \"eu-west-2\",\n    \"eu-west-3\",\n    \"me-south-1\",\n    \"sa-east-1\",\n    \"us-east-1\",\n    \"us-east-2\",\n    \"us-west-1\",\n    \"us-west-2\",\n]);\nvar AWS_CN_REGIONS = new Set([\"cn-north-1\", \"cn-northwest-1\"]);\nvar AWS_ISO_REGIONS = new Set([\"us-iso-east-1\"]);\nvar AWS_ISO_B_REGIONS = new Set([\"us-isob-east-1\"]);\nvar AWS_US_GOV_REGIONS = new Set([\"us-gov-east-1\", \"us-gov-west-1\"]);\nexport var defaultRegionInfoProvider = function (region, options) {\n    var regionInfo = undefined;\n    switch (region) {\n        // First, try to match exact region names.\n        case \"eu-west-1\":\n            regionInfo = {\n                hostname: \"runtime.lex.eu-west-1.amazonaws.com\",\n                partition: \"aws\",\n                signingService: \"lex\",\n            };\n            break;\n        case \"us-east-1\":\n            regionInfo = {\n                hostname: \"runtime.lex.us-east-1.amazonaws.com\",\n                partition: \"aws\",\n                signingService: \"lex\",\n            };\n            break;\n        case \"us-west-2\":\n            regionInfo = {\n                hostname: \"runtime.lex.us-west-2.amazonaws.com\",\n                partition: \"aws\",\n                signingService: \"lex\",\n            };\n            break;\n        // Next, try to match partition endpoints.\n        default:\n            if (AWS_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws\",\n                    signingService: \"lex\",\n                };\n            }\n            if (AWS_CN_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_CN_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-cn\",\n                };\n            }\n            if (AWS_ISO_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-iso\",\n                };\n            }\n            if (AWS_ISO_B_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_ISO_B_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-iso-b\",\n                };\n            }\n            if (AWS_US_GOV_REGIONS.has(region)) {\n                regionInfo = {\n                    hostname: AWS_US_GOV_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws-us-gov\",\n                };\n            }\n            // Finally, assume it's an AWS partition endpoint.\n            if (regionInfo === undefined) {\n                regionInfo = {\n                    hostname: AWS_TEMPLATE.replace(\"{region}\", region),\n                    partition: \"aws\",\n                    signingService: \"lex\",\n                };\n            }\n    }\n    return Promise.resolve(regionInfo);\n};\n","import { __assign } from \"tslib\";\nimport { SENSITIVE_STRING, } from \"@aws-sdk/smithy-client\";\nexport var BadRequestException;\n(function (BadRequestException) {\n    BadRequestException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(BadRequestException || (BadRequestException = {}));\nexport var ConflictException;\n(function (ConflictException) {\n    ConflictException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(ConflictException || (ConflictException = {}));\nexport var DeleteSessionRequest;\n(function (DeleteSessionRequest) {\n    DeleteSessionRequest.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(DeleteSessionRequest || (DeleteSessionRequest = {}));\nexport var DeleteSessionResponse;\n(function (DeleteSessionResponse) {\n    DeleteSessionResponse.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(DeleteSessionResponse || (DeleteSessionResponse = {}));\nexport var InternalFailureException;\n(function (InternalFailureException) {\n    InternalFailureException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(InternalFailureException || (InternalFailureException = {}));\nexport var LimitExceededException;\n(function (LimitExceededException) {\n    LimitExceededException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(LimitExceededException || (LimitExceededException = {}));\nexport var NotFoundException;\n(function (NotFoundException) {\n    NotFoundException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(NotFoundException || (NotFoundException = {}));\nexport var GetSessionRequest;\n(function (GetSessionRequest) {\n    GetSessionRequest.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(GetSessionRequest || (GetSessionRequest = {}));\nexport var FulfillmentState;\n(function (FulfillmentState) {\n    FulfillmentState[\"FAILED\"] = \"Failed\";\n    FulfillmentState[\"FULFILLED\"] = \"Fulfilled\";\n    FulfillmentState[\"READY_FOR_FULFILLMENT\"] = \"ReadyForFulfillment\";\n})(FulfillmentState || (FulfillmentState = {}));\nexport var MessageFormatType;\n(function (MessageFormatType) {\n    MessageFormatType[\"COMPOSITE\"] = \"Composite\";\n    MessageFormatType[\"CUSTOM_PAYLOAD\"] = \"CustomPayload\";\n    MessageFormatType[\"PLAIN_TEXT\"] = \"PlainText\";\n    MessageFormatType[\"SSML\"] = \"SSML\";\n})(MessageFormatType || (MessageFormatType = {}));\nexport var DialogActionType;\n(function (DialogActionType) {\n    DialogActionType[\"CLOSE\"] = \"Close\";\n    DialogActionType[\"CONFIRM_INTENT\"] = \"ConfirmIntent\";\n    DialogActionType[\"DELEGATE\"] = \"Delegate\";\n    DialogActionType[\"ELICIT_INTENT\"] = \"ElicitIntent\";\n    DialogActionType[\"ELICIT_SLOT\"] = \"ElicitSlot\";\n})(DialogActionType || (DialogActionType = {}));\nexport var DialogAction;\n(function (DialogAction) {\n    DialogAction.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.slots && { slots: SENSITIVE_STRING })), (obj.message && { message: SENSITIVE_STRING }))); };\n})(DialogAction || (DialogAction = {}));\nexport var ConfirmationStatus;\n(function (ConfirmationStatus) {\n    ConfirmationStatus[\"CONFIRMED\"] = \"Confirmed\";\n    ConfirmationStatus[\"DENIED\"] = \"Denied\";\n    ConfirmationStatus[\"NONE\"] = \"None\";\n})(ConfirmationStatus || (ConfirmationStatus = {}));\nexport var IntentSummary;\n(function (IntentSummary) {\n    IntentSummary.filterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.slots && { slots: SENSITIVE_STRING }))); };\n})(IntentSummary || (IntentSummary = {}));\nexport var GetSessionResponse;\n(function (GetSessionResponse) {\n    GetSessionResponse.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign({}, obj), (obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) })), (obj.recentIntentSummaryView && {\n        recentIntentSummaryView: obj.recentIntentSummaryView.map(function (item) { return IntentSummary.filterSensitiveLog(item); }),\n    })), (obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }))); };\n})(GetSessionResponse || (GetSessionResponse = {}));\nexport var BadGatewayException;\n(function (BadGatewayException) {\n    BadGatewayException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(BadGatewayException || (BadGatewayException = {}));\nexport var DependencyFailedException;\n(function (DependencyFailedException) {\n    DependencyFailedException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(DependencyFailedException || (DependencyFailedException = {}));\nexport var LoopDetectedException;\n(function (LoopDetectedException) {\n    LoopDetectedException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(LoopDetectedException || (LoopDetectedException = {}));\nexport var NotAcceptableException;\n(function (NotAcceptableException) {\n    NotAcceptableException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(NotAcceptableException || (NotAcceptableException = {}));\nexport var PostContentRequest;\n(function (PostContentRequest) {\n    PostContentRequest.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign({}, obj), (obj.requestAttributes && { requestAttributes: SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }))); };\n})(PostContentRequest || (PostContentRequest = {}));\nexport var DialogState;\n(function (DialogState) {\n    DialogState[\"CONFIRM_INTENT\"] = \"ConfirmIntent\";\n    DialogState[\"ELICIT_INTENT\"] = \"ElicitIntent\";\n    DialogState[\"ELICIT_SLOT\"] = \"ElicitSlot\";\n    DialogState[\"FAILED\"] = \"Failed\";\n    DialogState[\"FULFILLED\"] = \"Fulfilled\";\n    DialogState[\"READY_FOR_FULFILLMENT\"] = \"ReadyForFulfillment\";\n})(DialogState || (DialogState = {}));\nexport var PostContentResponse;\n(function (PostContentResponse) {\n    PostContentResponse.filterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.message && { message: SENSITIVE_STRING }))); };\n})(PostContentResponse || (PostContentResponse = {}));\nexport var RequestTimeoutException;\n(function (RequestTimeoutException) {\n    RequestTimeoutException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(RequestTimeoutException || (RequestTimeoutException = {}));\nexport var UnsupportedMediaTypeException;\n(function (UnsupportedMediaTypeException) {\n    UnsupportedMediaTypeException.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(UnsupportedMediaTypeException || (UnsupportedMediaTypeException = {}));\nexport var PostTextRequest;\n(function (PostTextRequest) {\n    PostTextRequest.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign({}, obj), (obj.requestAttributes && { requestAttributes: SENSITIVE_STRING })), (obj.inputText && { inputText: SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }))); };\n})(PostTextRequest || (PostTextRequest = {}));\nexport var IntentConfidence;\n(function (IntentConfidence) {\n    IntentConfidence.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(IntentConfidence || (IntentConfidence = {}));\nexport var PredictedIntent;\n(function (PredictedIntent) {\n    PredictedIntent.filterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.slots && { slots: SENSITIVE_STRING }))); };\n})(PredictedIntent || (PredictedIntent = {}));\nexport var ContentType;\n(function (ContentType) {\n    ContentType[\"GENERIC\"] = \"application/vnd.amazonaws.card.generic\";\n})(ContentType || (ContentType = {}));\nexport var Button;\n(function (Button) {\n    Button.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(Button || (Button = {}));\nexport var GenericAttachment;\n(function (GenericAttachment) {\n    GenericAttachment.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(GenericAttachment || (GenericAttachment = {}));\nexport var ResponseCard;\n(function (ResponseCard) {\n    ResponseCard.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(ResponseCard || (ResponseCard = {}));\nexport var SentimentResponse;\n(function (SentimentResponse) {\n    SentimentResponse.filterSensitiveLog = function (obj) { return (__assign({}, obj)); };\n})(SentimentResponse || (SentimentResponse = {}));\nexport var PostTextResponse;\n(function (PostTextResponse) {\n    PostTextResponse.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign(__assign({}, obj), (obj.alternativeIntents && {\n        alternativeIntents: obj.alternativeIntents.map(function (item) { return PredictedIntent.filterSensitiveLog(item); }),\n    })), (obj.message && { message: SENSITIVE_STRING })), (obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING })), (obj.slots && { slots: SENSITIVE_STRING }))); };\n})(PostTextResponse || (PostTextResponse = {}));\nexport var PutSessionRequest;\n(function (PutSessionRequest) {\n    PutSessionRequest.filterSensitiveLog = function (obj) { return (__assign(__assign(__assign(__assign({}, obj), (obj.dialogAction && { dialogAction: DialogAction.filterSensitiveLog(obj.dialogAction) })), (obj.recentIntentSummaryView && {\n        recentIntentSummaryView: obj.recentIntentSummaryView.map(function (item) { return IntentSummary.filterSensitiveLog(item); }),\n    })), (obj.sessionAttributes && { sessionAttributes: SENSITIVE_STRING }))); };\n})(PutSessionRequest || (PutSessionRequest = {}));\nexport var PutSessionResponse;\n(function (PutSessionResponse) {\n    PutSessionResponse.filterSensitiveLog = function (obj) { return (__assign(__assign({}, obj), (obj.message && { message: SENSITIVE_STRING }))); };\n})(PutSessionResponse || (PutSessionResponse = {}));\n","import { __assign, __awaiter, __generator, __read } from \"tslib\";\nimport { HttpRequest as __HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { LazyJsonString as __LazyJsonString, extendedEncodeURIComponent as __extendedEncodeURIComponent, } from \"@aws-sdk/smithy-client\";\nexport var serializeAws_restJson1DeleteSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                headers = {\n                    \"Content-Type\": \"\",\n                };\n                resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n                if (input.botAlias !== undefined) {\n                    labelValue = input.botAlias;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n                }\n                if (input.userId !== undefined) {\n                    labelValue = input.userId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: userId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: userId.\");\n                }\n                if (input.botName !== undefined) {\n                    labelValue = input.botName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botName.\");\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: hostname,\n                        port: port,\n                        method: \"DELETE\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1GetSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                headers = {\n                    \"Content-Type\": \"\",\n                };\n                resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n                if (input.botAlias !== undefined) {\n                    labelValue = input.botAlias;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n                }\n                if (input.userId !== undefined) {\n                    labelValue = input.userId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: userId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: userId.\");\n                }\n                if (input.botName !== undefined) {\n                    labelValue = input.botName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botName.\");\n                }\n                query = __assign({}, (input.checkpointLabelFilter !== undefined && { checkpointLabelFilter: input.checkpointLabelFilter }));\n                return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: hostname,\n                        port: port,\n                        method: \"GET\",\n                        headers: headers,\n                        path: resolvedPath,\n                        query: query,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1PostContentCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                headers = __assign(__assign(__assign(__assign({ \"Content-Type\": \"application/octet-stream\", \"x-amz-content-sha256\": \"UNSIGNED-PAYLOAD\" }, (isSerializableHeaderValue(input.requestAttributes) && {\n                    \"x-amz-lex-request-attributes\": __LazyJsonString.fromObject(input.requestAttributes),\n                })), (isSerializableHeaderValue(input.sessionAttributes) && {\n                    \"x-amz-lex-session-attributes\": __LazyJsonString.fromObject(input.sessionAttributes),\n                })), (isSerializableHeaderValue(input.contentType) && { \"Content-Type\": input.contentType })), (isSerializableHeaderValue(input.accept) && { Accept: input.accept }));\n                resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/content\";\n                if (input.botAlias !== undefined) {\n                    labelValue = input.botAlias;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n                }\n                if (input.botName !== undefined) {\n                    labelValue = input.botName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botName.\");\n                }\n                if (input.userId !== undefined) {\n                    labelValue = input.userId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: userId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: userId.\");\n                }\n                if (input.inputStream !== undefined) {\n                    body = input.inputStream;\n                }\n                return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: hostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1PostTextCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                headers = {\n                    \"Content-Type\": \"application/json\",\n                };\n                resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/text\";\n                if (input.userId !== undefined) {\n                    labelValue = input.userId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: userId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: userId.\");\n                }\n                if (input.botAlias !== undefined) {\n                    labelValue = input.botAlias;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n                }\n                if (input.botName !== undefined) {\n                    labelValue = input.botName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botName.\");\n                }\n                body = JSON.stringify(__assign(__assign(__assign({}, (input.inputText !== undefined && { inputText: input.inputText })), (input.requestAttributes !== undefined && {\n                    requestAttributes: serializeAws_restJson1StringMap(input.requestAttributes, context),\n                })), (input.sessionAttributes !== undefined && {\n                    sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: hostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var serializeAws_restJson1PutSessionCommand = function (input, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var headers, resolvedPath, labelValue, labelValue, labelValue, body, _a, hostname, _b, protocol, port;\n    return __generator(this, function (_c) {\n        switch (_c.label) {\n            case 0:\n                headers = __assign({ \"Content-Type\": \"application/json\" }, (isSerializableHeaderValue(input.accept) && { Accept: input.accept }));\n                resolvedPath = \"/bot/{botName}/alias/{botAlias}/user/{userId}/session\";\n                if (input.userId !== undefined) {\n                    labelValue = input.userId;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: userId.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{userId}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: userId.\");\n                }\n                if (input.botAlias !== undefined) {\n                    labelValue = input.botAlias;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botAlias.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botAlias}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botAlias.\");\n                }\n                if (input.botName !== undefined) {\n                    labelValue = input.botName;\n                    if (labelValue.length <= 0) {\n                        throw new Error(\"Empty value provided for input HTTP label: botName.\");\n                    }\n                    resolvedPath = resolvedPath.replace(\"{botName}\", __extendedEncodeURIComponent(labelValue));\n                }\n                else {\n                    throw new Error(\"No value provided for input HTTP label: botName.\");\n                }\n                body = JSON.stringify(__assign(__assign(__assign({}, (input.dialogAction !== undefined && {\n                    dialogAction: serializeAws_restJson1DialogAction(input.dialogAction, context),\n                })), (input.recentIntentSummaryView !== undefined && {\n                    recentIntentSummaryView: serializeAws_restJson1IntentSummaryList(input.recentIntentSummaryView, context),\n                })), (input.sessionAttributes !== undefined && {\n                    sessionAttributes: serializeAws_restJson1StringMap(input.sessionAttributes, context),\n                })));\n                return [4 /*yield*/, context.endpoint()];\n            case 1:\n                _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? \"https\" : _b, port = _a.port;\n                return [2 /*return*/, new __HttpRequest({\n                        protocol: protocol,\n                        hostname: hostname,\n                        port: port,\n                        method: \"POST\",\n                        headers: headers,\n                        path: resolvedPath,\n                        body: body,\n                    })];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1DeleteSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1DeleteSessionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    botAlias: undefined,\n                    botName: undefined,\n                    sessionId: undefined,\n                    userId: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.botAlias !== undefined && data.botAlias !== null) {\n                    contents.botAlias = data.botAlias;\n                }\n                if (data.botName !== undefined && data.botName !== null) {\n                    contents.botName = data.botName;\n                }\n                if (data.sessionId !== undefined && data.sessionId !== null) {\n                    contents.sessionId = data.sessionId;\n                }\n                if (data.userId !== undefined && data.userId !== null) {\n                    contents.userId = data.userId;\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1DeleteSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;\n    var _h;\n    return __generator(this, function (_j) {\n        switch (_j.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _h = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_h.body = _j.sent(), _h)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"BadRequestException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.lexruntimeservice#BadRequestException\": return [3 /*break*/, 2];\n                    case \"ConflictException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.lexruntimeservice#ConflictException\": return [3 /*break*/, 4];\n                    case \"InternalFailureException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.lexruntimeservice#InternalFailureException\": return [3 /*break*/, 6];\n                    case \"LimitExceededException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.lexruntimeservice#LimitExceededException\": return [3 /*break*/, 8];\n                    case \"NotFoundException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.lexruntimeservice#NotFoundException\": return [3 /*break*/, 10];\n                }\n                return [3 /*break*/, 12];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_j.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 13];\n            case 12:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _j.label = 13;\n            case 13:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1GetSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1GetSessionCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    dialogAction: undefined,\n                    recentIntentSummaryView: undefined,\n                    sessionAttributes: undefined,\n                    sessionId: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.dialogAction !== undefined && data.dialogAction !== null) {\n                    contents.dialogAction = deserializeAws_restJson1DialogAction(data.dialogAction, context);\n                }\n                if (data.recentIntentSummaryView !== undefined && data.recentIntentSummaryView !== null) {\n                    contents.recentIntentSummaryView = deserializeAws_restJson1IntentSummaryList(data.recentIntentSummaryView, context);\n                }\n                if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n                    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n                }\n                if (data.sessionId !== undefined && data.sessionId !== null) {\n                    contents.sessionId = data.sessionId;\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1GetSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, parsedBody, message;\n    var _g;\n    return __generator(this, function (_h) {\n        switch (_h.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _g = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_g.body = _h.sent(), _g)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"BadRequestException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.lexruntimeservice#BadRequestException\": return [3 /*break*/, 2];\n                    case \"InternalFailureException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.lexruntimeservice#InternalFailureException\": return [3 /*break*/, 4];\n                    case \"LimitExceededException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.lexruntimeservice#LimitExceededException\": return [3 /*break*/, 6];\n                    case \"NotFoundException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.lexruntimeservice#NotFoundException\": return [3 /*break*/, 8];\n                }\n                return [3 /*break*/, 10];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_h.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 11];\n            case 10:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _h.label = 11;\n            case 11:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1PostContentCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PostContentCommandError(output, context)];\n        }\n        contents = {\n            $metadata: deserializeMetadata(output),\n            alternativeIntents: undefined,\n            audioStream: undefined,\n            botVersion: undefined,\n            contentType: undefined,\n            dialogState: undefined,\n            inputTranscript: undefined,\n            intentName: undefined,\n            message: undefined,\n            messageFormat: undefined,\n            nluIntentConfidence: undefined,\n            sentimentResponse: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined,\n            slotToElicit: undefined,\n            slots: undefined,\n        };\n        if (output.headers[\"x-amz-lex-alternative-intents\"] !== undefined) {\n            contents.alternativeIntents = new __LazyJsonString(output.headers[\"x-amz-lex-alternative-intents\"]);\n        }\n        if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n            contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n        }\n        if (output.headers[\"content-type\"] !== undefined) {\n            contents.contentType = output.headers[\"content-type\"];\n        }\n        if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n            contents.message = output.headers[\"x-amz-lex-message\"];\n        }\n        if (output.headers[\"x-amz-lex-bot-version\"] !== undefined) {\n            contents.botVersion = output.headers[\"x-amz-lex-bot-version\"];\n        }\n        if (output.headers[\"x-amz-lex-sentiment\"] !== undefined) {\n            contents.sentimentResponse = output.headers[\"x-amz-lex-sentiment\"];\n        }\n        if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n            contents.slots = new __LazyJsonString(output.headers[\"x-amz-lex-slots\"]);\n        }\n        if (output.headers[\"x-amz-lex-input-transcript\"] !== undefined) {\n            contents.inputTranscript = output.headers[\"x-amz-lex-input-transcript\"];\n        }\n        if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n            contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n        }\n        if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n            contents.sessionAttributes = new __LazyJsonString(output.headers[\"x-amz-lex-session-attributes\"]);\n        }\n        if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n            contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n        }\n        if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n            contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n        }\n        if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n            contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n        }\n        if (output.headers[\"x-amz-lex-nlu-intent-confidence\"] !== undefined) {\n            contents.nluIntentConfidence = new __LazyJsonString(output.headers[\"x-amz-lex-nlu-intent-confidence\"]);\n        }\n        data = output.body;\n        contents.audioStream = data;\n        return [2 /*return*/, Promise.resolve(contents)];\n    });\n}); };\nvar deserializeAws_restJson1PostContentCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, parsedBody, message;\n    var _p;\n    return __generator(this, function (_q) {\n        switch (_q.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _p = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_p.body = _q.sent(), _p)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"BadGatewayException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.lexruntimeservice#BadGatewayException\": return [3 /*break*/, 2];\n                    case \"BadRequestException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.lexruntimeservice#BadRequestException\": return [3 /*break*/, 4];\n                    case \"ConflictException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.lexruntimeservice#ConflictException\": return [3 /*break*/, 6];\n                    case \"DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"InternalFailureException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.lexruntimeservice#InternalFailureException\": return [3 /*break*/, 10];\n                    case \"LimitExceededException\": return [3 /*break*/, 12];\n                    case \"com.amazonaws.lexruntimeservice#LimitExceededException\": return [3 /*break*/, 12];\n                    case \"LoopDetectedException\": return [3 /*break*/, 14];\n                    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\": return [3 /*break*/, 14];\n                    case \"NotAcceptableException\": return [3 /*break*/, 16];\n                    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\": return [3 /*break*/, 16];\n                    case \"NotFoundException\": return [3 /*break*/, 18];\n                    case \"com.amazonaws.lexruntimeservice#NotFoundException\": return [3 /*break*/, 18];\n                    case \"RequestTimeoutException\": return [3 /*break*/, 20];\n                    case \"com.amazonaws.lexruntimeservice#RequestTimeoutException\": return [3 /*break*/, 20];\n                    case \"UnsupportedMediaTypeException\": return [3 /*break*/, 22];\n                    case \"com.amazonaws.lexruntimeservice#UnsupportedMediaTypeException\": return [3 /*break*/, 22];\n                }\n                return [3 /*break*/, 24];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 12:\n                _h = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n            case 13:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 14:\n                _j = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n            case 15:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 16:\n                _k = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n            case 17:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 18:\n                _l = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n            case 19:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _l.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 20:\n                _m = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1RequestTimeoutExceptionResponse(parsedOutput, context)];\n            case 21:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _m.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 22:\n                _o = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse(parsedOutput, context)];\n            case 23:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _o.concat([(_q.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 25];\n            case 24:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _q.label = 25;\n            case 25:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1PostTextCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                if (output.statusCode !== 200 && output.statusCode >= 300) {\n                    return [2 /*return*/, deserializeAws_restJson1PostTextCommandError(output, context)];\n                }\n                contents = {\n                    $metadata: deserializeMetadata(output),\n                    alternativeIntents: undefined,\n                    botVersion: undefined,\n                    dialogState: undefined,\n                    intentName: undefined,\n                    message: undefined,\n                    messageFormat: undefined,\n                    nluIntentConfidence: undefined,\n                    responseCard: undefined,\n                    sentimentResponse: undefined,\n                    sessionAttributes: undefined,\n                    sessionId: undefined,\n                    slotToElicit: undefined,\n                    slots: undefined,\n                };\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                data = _a.sent();\n                if (data.alternativeIntents !== undefined && data.alternativeIntents !== null) {\n                    contents.alternativeIntents = deserializeAws_restJson1IntentList(data.alternativeIntents, context);\n                }\n                if (data.botVersion !== undefined && data.botVersion !== null) {\n                    contents.botVersion = data.botVersion;\n                }\n                if (data.dialogState !== undefined && data.dialogState !== null) {\n                    contents.dialogState = data.dialogState;\n                }\n                if (data.intentName !== undefined && data.intentName !== null) {\n                    contents.intentName = data.intentName;\n                }\n                if (data.message !== undefined && data.message !== null) {\n                    contents.message = data.message;\n                }\n                if (data.messageFormat !== undefined && data.messageFormat !== null) {\n                    contents.messageFormat = data.messageFormat;\n                }\n                if (data.nluIntentConfidence !== undefined && data.nluIntentConfidence !== null) {\n                    contents.nluIntentConfidence = deserializeAws_restJson1IntentConfidence(data.nluIntentConfidence, context);\n                }\n                if (data.responseCard !== undefined && data.responseCard !== null) {\n                    contents.responseCard = deserializeAws_restJson1ResponseCard(data.responseCard, context);\n                }\n                if (data.sentimentResponse !== undefined && data.sentimentResponse !== null) {\n                    contents.sentimentResponse = deserializeAws_restJson1SentimentResponse(data.sentimentResponse, context);\n                }\n                if (data.sessionAttributes !== undefined && data.sessionAttributes !== null) {\n                    contents.sessionAttributes = deserializeAws_restJson1StringMap(data.sessionAttributes, context);\n                }\n                if (data.sessionId !== undefined && data.sessionId !== null) {\n                    contents.sessionId = data.sessionId;\n                }\n                if (data.slotToElicit !== undefined && data.slotToElicit !== null) {\n                    contents.slotToElicit = data.slotToElicit;\n                }\n                if (data.slots !== undefined && data.slots !== null) {\n                    contents.slots = deserializeAws_restJson1StringMap(data.slots, context);\n                }\n                return [2 /*return*/, Promise.resolve(contents)];\n        }\n    });\n}); };\nvar deserializeAws_restJson1PostTextCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n    var _l;\n    return __generator(this, function (_m) {\n        switch (_m.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _l = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"BadGatewayException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.lexruntimeservice#BadGatewayException\": return [3 /*break*/, 2];\n                    case \"BadRequestException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.lexruntimeservice#BadRequestException\": return [3 /*break*/, 4];\n                    case \"ConflictException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.lexruntimeservice#ConflictException\": return [3 /*break*/, 6];\n                    case \"DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"InternalFailureException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.lexruntimeservice#InternalFailureException\": return [3 /*break*/, 10];\n                    case \"LimitExceededException\": return [3 /*break*/, 12];\n                    case \"com.amazonaws.lexruntimeservice#LimitExceededException\": return [3 /*break*/, 12];\n                    case \"LoopDetectedException\": return [3 /*break*/, 14];\n                    case \"com.amazonaws.lexruntimeservice#LoopDetectedException\": return [3 /*break*/, 14];\n                    case \"NotFoundException\": return [3 /*break*/, 16];\n                    case \"com.amazonaws.lexruntimeservice#NotFoundException\": return [3 /*break*/, 16];\n                }\n                return [3 /*break*/, 18];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 12:\n                _h = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n            case 13:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 14:\n                _j = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LoopDetectedExceptionResponse(parsedOutput, context)];\n            case 15:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 16:\n                _k = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n            case 17:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 18:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _m.label = 19;\n            case 19:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nexport var deserializeAws_restJson1PutSessionCommand = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        if (output.statusCode !== 200 && output.statusCode >= 300) {\n            return [2 /*return*/, deserializeAws_restJson1PutSessionCommandError(output, context)];\n        }\n        contents = {\n            $metadata: deserializeMetadata(output),\n            audioStream: undefined,\n            contentType: undefined,\n            dialogState: undefined,\n            intentName: undefined,\n            message: undefined,\n            messageFormat: undefined,\n            sessionAttributes: undefined,\n            sessionId: undefined,\n            slotToElicit: undefined,\n            slots: undefined,\n        };\n        if (output.headers[\"content-type\"] !== undefined) {\n            contents.contentType = output.headers[\"content-type\"];\n        }\n        if (output.headers[\"x-amz-lex-intent-name\"] !== undefined) {\n            contents.intentName = output.headers[\"x-amz-lex-intent-name\"];\n        }\n        if (output.headers[\"x-amz-lex-message-format\"] !== undefined) {\n            contents.messageFormat = output.headers[\"x-amz-lex-message-format\"];\n        }\n        if (output.headers[\"x-amz-lex-session-attributes\"] !== undefined) {\n            contents.sessionAttributes = new __LazyJsonString(output.headers[\"x-amz-lex-session-attributes\"]);\n        }\n        if (output.headers[\"x-amz-lex-session-id\"] !== undefined) {\n            contents.sessionId = output.headers[\"x-amz-lex-session-id\"];\n        }\n        if (output.headers[\"x-amz-lex-slot-to-elicit\"] !== undefined) {\n            contents.slotToElicit = output.headers[\"x-amz-lex-slot-to-elicit\"];\n        }\n        if (output.headers[\"x-amz-lex-slots\"] !== undefined) {\n            contents.slots = new __LazyJsonString(output.headers[\"x-amz-lex-slots\"]);\n        }\n        if (output.headers[\"x-amz-lex-message\"] !== undefined) {\n            contents.message = output.headers[\"x-amz-lex-message\"];\n        }\n        if (output.headers[\"x-amz-lex-dialog-state\"] !== undefined) {\n            contents.dialogState = output.headers[\"x-amz-lex-dialog-state\"];\n        }\n        data = output.body;\n        contents.audioStream = data;\n        return [2 /*return*/, Promise.resolve(contents)];\n    });\n}); };\nvar deserializeAws_restJson1PutSessionCommandError = function (output, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;\n    var _l;\n    return __generator(this, function (_m) {\n        switch (_m.label) {\n            case 0:\n                _a = [__assign({}, output)];\n                _l = {};\n                return [4 /*yield*/, parseBody(output.body, context)];\n            case 1:\n                parsedOutput = __assign.apply(void 0, _a.concat([(_l.body = _m.sent(), _l)]));\n                errorCode = \"UnknownError\";\n                errorCode = loadRestJsonErrorCode(output, parsedOutput.body);\n                _b = errorCode;\n                switch (_b) {\n                    case \"BadGatewayException\": return [3 /*break*/, 2];\n                    case \"com.amazonaws.lexruntimeservice#BadGatewayException\": return [3 /*break*/, 2];\n                    case \"BadRequestException\": return [3 /*break*/, 4];\n                    case \"com.amazonaws.lexruntimeservice#BadRequestException\": return [3 /*break*/, 4];\n                    case \"ConflictException\": return [3 /*break*/, 6];\n                    case \"com.amazonaws.lexruntimeservice#ConflictException\": return [3 /*break*/, 6];\n                    case \"DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"com.amazonaws.lexruntimeservice#DependencyFailedException\": return [3 /*break*/, 8];\n                    case \"InternalFailureException\": return [3 /*break*/, 10];\n                    case \"com.amazonaws.lexruntimeservice#InternalFailureException\": return [3 /*break*/, 10];\n                    case \"LimitExceededException\": return [3 /*break*/, 12];\n                    case \"com.amazonaws.lexruntimeservice#LimitExceededException\": return [3 /*break*/, 12];\n                    case \"NotAcceptableException\": return [3 /*break*/, 14];\n                    case \"com.amazonaws.lexruntimeservice#NotAcceptableException\": return [3 /*break*/, 14];\n                    case \"NotFoundException\": return [3 /*break*/, 16];\n                    case \"com.amazonaws.lexruntimeservice#NotFoundException\": return [3 /*break*/, 16];\n                }\n                return [3 /*break*/, 18];\n            case 2:\n                _c = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadGatewayExceptionResponse(parsedOutput, context)];\n            case 3:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _c.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 4:\n                _d = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1BadRequestExceptionResponse(parsedOutput, context)];\n            case 5:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _d.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 6:\n                _e = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1ConflictExceptionResponse(parsedOutput, context)];\n            case 7:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _e.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 8:\n                _f = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1DependencyFailedExceptionResponse(parsedOutput, context)];\n            case 9:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _f.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 10:\n                _g = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1InternalFailureExceptionResponse(parsedOutput, context)];\n            case 11:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _g.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 12:\n                _h = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1LimitExceededExceptionResponse(parsedOutput, context)];\n            case 13:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _h.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 14:\n                _j = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotAcceptableExceptionResponse(parsedOutput, context)];\n            case 15:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _j.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 16:\n                _k = [{}];\n                return [4 /*yield*/, deserializeAws_restJson1NotFoundExceptionResponse(parsedOutput, context)];\n            case 17:\n                response = __assign.apply(void 0, [__assign.apply(void 0, _k.concat([(_m.sent())])), { name: errorCode, $metadata: deserializeMetadata(output) }]);\n                return [3 /*break*/, 19];\n            case 18:\n                parsedBody = parsedOutput.body;\n                errorCode = parsedBody.code || parsedBody.Code || errorCode;\n                response = __assign(__assign({}, parsedBody), { name: \"\" + errorCode, message: parsedBody.message || parsedBody.Message || errorCode, $fault: \"client\", $metadata: deserializeMetadata(output) });\n                _m.label = 19;\n            case 19:\n                message = response.message || response.Message || errorCode;\n                response.message = message;\n                delete response.Message;\n                return [2 /*return*/, Promise.reject(Object.assign(new Error(message), response))];\n        }\n    });\n}); };\nvar deserializeAws_restJson1BadGatewayExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"BadGatewayException\",\n            $fault: \"server\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.Message !== undefined && data.Message !== null) {\n            contents.Message = data.Message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1BadRequestExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"BadRequestException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1ConflictExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"ConflictException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1DependencyFailedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"DependencyFailedException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.Message !== undefined && data.Message !== null) {\n            contents.Message = data.Message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1InternalFailureExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"InternalFailureException\",\n            $fault: \"server\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1LimitExceededExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"LimitExceededException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n            retryAfterSeconds: undefined,\n        };\n        if (parsedOutput.headers[\"retry-after\"] !== undefined) {\n            contents.retryAfterSeconds = parsedOutput.headers[\"retry-after\"];\n        }\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1LoopDetectedExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"LoopDetectedException\",\n            $fault: \"server\",\n            $metadata: deserializeMetadata(parsedOutput),\n            Message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.Message !== undefined && data.Message !== null) {\n            contents.Message = data.Message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1NotAcceptableExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"NotAcceptableException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1NotFoundExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"NotFoundException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1RequestTimeoutExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"RequestTimeoutException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar deserializeAws_restJson1UnsupportedMediaTypeExceptionResponse = function (parsedOutput, context) { return __awaiter(void 0, void 0, void 0, function () {\n    var contents, data;\n    return __generator(this, function (_a) {\n        contents = {\n            name: \"UnsupportedMediaTypeException\",\n            $fault: \"client\",\n            $metadata: deserializeMetadata(parsedOutput),\n            message: undefined,\n        };\n        data = parsedOutput.body;\n        if (data.message !== undefined && data.message !== null) {\n            contents.message = data.message;\n        }\n        return [2 /*return*/, contents];\n    });\n}); };\nvar serializeAws_restJson1DialogAction = function (input, context) {\n    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.fulfillmentState !== undefined && { fulfillmentState: input.fulfillmentState })), (input.intentName !== undefined && { intentName: input.intentName })), (input.message !== undefined && { message: input.message })), (input.messageFormat !== undefined && { messageFormat: input.messageFormat })), (input.slotToElicit !== undefined && { slotToElicit: input.slotToElicit })), (input.slots !== undefined && { slots: serializeAws_restJson1StringMap(input.slots, context) })), (input.type !== undefined && { type: input.type }));\n};\nvar serializeAws_restJson1IntentSummary = function (input, context) {\n    return __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (input.checkpointLabel !== undefined && { checkpointLabel: input.checkpointLabel })), (input.confirmationStatus !== undefined && { confirmationStatus: input.confirmationStatus })), (input.dialogActionType !== undefined && { dialogActionType: input.dialogActionType })), (input.fulfillmentState !== undefined && { fulfillmentState: input.fulfillmentState })), (input.intentName !== undefined && { intentName: input.intentName })), (input.slotToElicit !== undefined && { slotToElicit: input.slotToElicit })), (input.slots !== undefined && { slots: serializeAws_restJson1StringMap(input.slots, context) }));\n};\nvar serializeAws_restJson1IntentSummaryList = function (input, context) {\n    return input.map(function (entry) { return serializeAws_restJson1IntentSummary(entry, context); });\n};\nvar serializeAws_restJson1StringMap = function (input, context) {\n    return Object.entries(input).reduce(function (acc, _a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        return (__assign(__assign({}, acc), (_b = {}, _b[key] = value, _b)));\n    }, {});\n};\nvar deserializeAws_restJson1Button = function (output, context) {\n    return {\n        text: output.text !== undefined && output.text !== null ? output.text : undefined,\n        value: output.value !== undefined && output.value !== null ? output.value : undefined,\n    };\n};\nvar deserializeAws_restJson1DialogAction = function (output, context) {\n    return {\n        fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n        message: output.message !== undefined && output.message !== null ? output.message : undefined,\n        messageFormat: output.messageFormat !== undefined && output.messageFormat !== null ? output.messageFormat : undefined,\n        slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n        slots: output.slots !== undefined && output.slots !== null\n            ? deserializeAws_restJson1StringMap(output.slots, context)\n            : undefined,\n        type: output.type !== undefined && output.type !== null ? output.type : undefined,\n    };\n};\nvar deserializeAws_restJson1GenericAttachment = function (output, context) {\n    return {\n        attachmentLinkUrl: output.attachmentLinkUrl !== undefined && output.attachmentLinkUrl !== null\n            ? output.attachmentLinkUrl\n            : undefined,\n        buttons: output.buttons !== undefined && output.buttons !== null\n            ? deserializeAws_restJson1listOfButtons(output.buttons, context)\n            : undefined,\n        imageUrl: output.imageUrl !== undefined && output.imageUrl !== null ? output.imageUrl : undefined,\n        subTitle: output.subTitle !== undefined && output.subTitle !== null ? output.subTitle : undefined,\n        title: output.title !== undefined && output.title !== null ? output.title : undefined,\n    };\n};\nvar deserializeAws_restJson1genericAttachmentList = function (output, context) {\n    return (output || []).map(function (entry) { return deserializeAws_restJson1GenericAttachment(entry, context); });\n};\nvar deserializeAws_restJson1IntentConfidence = function (output, context) {\n    return {\n        score: output.score !== undefined && output.score !== null ? output.score : undefined,\n    };\n};\nvar deserializeAws_restJson1IntentList = function (output, context) {\n    return (output || []).map(function (entry) { return deserializeAws_restJson1PredictedIntent(entry, context); });\n};\nvar deserializeAws_restJson1IntentSummary = function (output, context) {\n    return {\n        checkpointLabel: output.checkpointLabel !== undefined && output.checkpointLabel !== null ? output.checkpointLabel : undefined,\n        confirmationStatus: output.confirmationStatus !== undefined && output.confirmationStatus !== null\n            ? output.confirmationStatus\n            : undefined,\n        dialogActionType: output.dialogActionType !== undefined && output.dialogActionType !== null ? output.dialogActionType : undefined,\n        fulfillmentState: output.fulfillmentState !== undefined && output.fulfillmentState !== null ? output.fulfillmentState : undefined,\n        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n        slotToElicit: output.slotToElicit !== undefined && output.slotToElicit !== null ? output.slotToElicit : undefined,\n        slots: output.slots !== undefined && output.slots !== null\n            ? deserializeAws_restJson1StringMap(output.slots, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1IntentSummaryList = function (output, context) {\n    return (output || []).map(function (entry) { return deserializeAws_restJson1IntentSummary(entry, context); });\n};\nvar deserializeAws_restJson1listOfButtons = function (output, context) {\n    return (output || []).map(function (entry) { return deserializeAws_restJson1Button(entry, context); });\n};\nvar deserializeAws_restJson1PredictedIntent = function (output, context) {\n    return {\n        intentName: output.intentName !== undefined && output.intentName !== null ? output.intentName : undefined,\n        nluIntentConfidence: output.nluIntentConfidence !== undefined && output.nluIntentConfidence !== null\n            ? deserializeAws_restJson1IntentConfidence(output.nluIntentConfidence, context)\n            : undefined,\n        slots: output.slots !== undefined && output.slots !== null\n            ? deserializeAws_restJson1StringMap(output.slots, context)\n            : undefined,\n    };\n};\nvar deserializeAws_restJson1ResponseCard = function (output, context) {\n    return {\n        contentType: output.contentType !== undefined && output.contentType !== null ? output.contentType : undefined,\n        genericAttachments: output.genericAttachments !== undefined && output.genericAttachments !== null\n            ? deserializeAws_restJson1genericAttachmentList(output.genericAttachments, context)\n            : undefined,\n        version: output.version !== undefined && output.version !== null ? output.version : undefined,\n    };\n};\nvar deserializeAws_restJson1SentimentResponse = function (output, context) {\n    return {\n        sentimentLabel: output.sentimentLabel !== undefined && output.sentimentLabel !== null ? output.sentimentLabel : undefined,\n        sentimentScore: output.sentimentScore !== undefined && output.sentimentScore !== null ? output.sentimentScore : undefined,\n    };\n};\nvar deserializeAws_restJson1StringMap = function (output, context) {\n    return Object.entries(output).reduce(function (acc, _a) {\n        var _b;\n        var _c = __read(_a, 2), key = _c[0], value = _c[1];\n        return (__assign(__assign({}, acc), (_b = {}, _b[key] = value, _b)));\n    }, {});\n};\nvar deserializeMetadata = function (output) { return ({\n    httpStatusCode: output.statusCode,\n    httpHeaders: output.headers,\n    requestId: output.headers[\"x-amzn-requestid\"],\n}); };\n// Collect low-level response body stream to Uint8Array.\nvar collectBody = function (streamBody, context) {\n    if (streamBody === void 0) { streamBody = new Uint8Array(); }\n    if (streamBody instanceof Uint8Array) {\n        return Promise.resolve(streamBody);\n    }\n    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());\n};\n// Encode Uint8Array data into string with utf-8.\nvar collectBodyString = function (streamBody, context) {\n    return collectBody(streamBody, context).then(function (body) { return context.utf8Encoder(body); });\n};\nvar isSerializableHeaderValue = function (value) {\n    return value !== undefined &&\n        value !== \"\" &&\n        (!Object.getOwnPropertyNames(value).includes(\"length\") || value.length != 0) &&\n        (!Object.getOwnPropertyNames(value).includes(\"size\") || value.size != 0);\n};\nvar parseBody = function (streamBody, context) {\n    return collectBodyString(streamBody, context).then(function (encoded) {\n        if (encoded.length) {\n            return JSON.parse(encoded);\n        }\n        return {};\n    });\n};\n/**\n * Load an error code for the aws.rest-json-1.1 protocol.\n */\nvar loadRestJsonErrorCode = function (output, data) {\n    var findKey = function (object, key) { return Object.keys(object).find(function (k) { return k.toLowerCase() === key.toLowerCase(); }); };\n    var sanitizeErrorCode = function (rawValue) {\n        var cleanValue = rawValue;\n        if (cleanValue.indexOf(\":\") >= 0) {\n            cleanValue = cleanValue.split(\":\")[0];\n        }\n        if (cleanValue.indexOf(\"#\") >= 0) {\n            cleanValue = cleanValue.split(\"#\")[1];\n        }\n        return cleanValue;\n    };\n    var headerKey = findKey(output.headers, \"x-amzn-errortype\");\n    if (headerKey !== undefined) {\n        return sanitizeErrorCode(output.headers[headerKey]);\n    }\n    if (data.code !== undefined) {\n        return sanitizeErrorCode(data.code);\n    }\n    if (data[\"__type\"] !== undefined) {\n        return sanitizeErrorCode(data[\"__type\"]);\n    }\n    return \"\";\n};\n","import { __assign } from \"tslib\";\nimport packageInfo from \"./package.json\";\nimport { Sha256 } from \"@aws-crypto/sha256-browser\";\nimport { FetchHttpHandler, streamCollector } from \"@aws-sdk/fetch-http-handler\";\nimport { invalidFunction } from \"@aws-sdk/invalid-dependency\";\nimport { DEFAULT_MAX_ATTEMPTS } from \"@aws-sdk/middleware-retry\";\nimport { parseUrl } from \"@aws-sdk/url-parser-browser\";\nimport { fromBase64, toBase64 } from \"@aws-sdk/util-base64-browser\";\nimport { calculateBodyLength } from \"@aws-sdk/util-body-length-browser\";\nimport { defaultUserAgent } from \"@aws-sdk/util-user-agent-browser\";\nimport { fromUtf8, toUtf8 } from \"@aws-sdk/util-utf8-browser\";\nimport { ClientSharedValues } from \"./runtimeConfig.shared\";\nexport var ClientDefaultValues = __assign(__assign({}, ClientSharedValues), { runtime: \"browser\", base64Decoder: fromBase64, base64Encoder: toBase64, bodyLengthChecker: calculateBodyLength, credentialDefaultProvider: invalidFunction(\"Credential is missing\"), defaultUserAgent: defaultUserAgent(packageInfo.name, packageInfo.version), maxAttempts: DEFAULT_MAX_ATTEMPTS, region: invalidFunction(\"Region is missing\"), requestHandler: new FetchHttpHandler(), sha256: Sha256, streamCollector: streamCollector, urlParser: parseUrl, utf8Decoder: fromUtf8, utf8Encoder: toUtf8 });\n","import { defaultRegionInfoProvider } from \"./endpoints\";\nexport var ClientSharedValues = {\n    apiVersion: \"2016-11-28\",\n    disableHostPrefix: false,\n    logger: {},\n    regionInfoProvider: defaultRegionInfoProvider,\n    signingName: \"lex\",\n};\n","import { fromUtf8 as jsFromUtf8, toUtf8 as jsToUtf8 } from \"./pureJs\";\nimport { fromUtf8 as textEncoderFromUtf8, toUtf8 as textEncoderToUtf8 } from \"./whatwgEncodingApi\";\nexport var fromUtf8 = function (input) {\n    return typeof TextEncoder === \"function\" ? textEncoderFromUtf8(input) : jsFromUtf8(input);\n};\nexport var toUtf8 = function (input) {\n    return typeof TextDecoder === \"function\" ? textEncoderToUtf8(input) : jsToUtf8(input);\n};\n","/**\n * Converts a JS string from its native UCS-2/UTF-16 representation into a\n * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.\n *\n * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google\n * Closure library, though updated to use typed arrays.\n */\nexport var fromUtf8 = function (input) {\n    var bytes = [];\n    for (var i = 0, len = input.length; i < len; i++) {\n        var value = input.charCodeAt(i);\n        if (value < 0x80) {\n            bytes.push(value);\n        }\n        else if (value < 0x800) {\n            bytes.push((value >> 6) | 192, (value & 63) | 128);\n        }\n        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\n            var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);\n            bytes.push((surrogatePair >> 18) | 240, ((surrogatePair >> 12) & 63) | 128, ((surrogatePair >> 6) & 63) | 128, (surrogatePair & 63) | 128);\n        }\n        else {\n            bytes.push((value >> 12) | 224, ((value >> 6) & 63) | 128, (value & 63) | 128);\n        }\n    }\n    return Uint8Array.from(bytes);\n};\n/**\n * Converts a typed array of bytes containing UTF-8 data into a native JS\n * string.\n *\n * Partly cribbed from the `goog.crypt.utf8ByteArrayToString` function in the\n * Google Closure library, though updated to use typed arrays and to better\n * handle astral plane code points.\n */\nexport var toUtf8 = function (input) {\n    var decoded = \"\";\n    for (var i = 0, len = input.length; i < len; i++) {\n        var byte = input[i];\n        if (byte < 0x80) {\n            decoded += String.fromCharCode(byte);\n        }\n        else if (192 <= byte && byte < 224) {\n            var nextByte = input[++i];\n            decoded += String.fromCharCode(((byte & 31) << 6) | (nextByte & 63));\n        }\n        else if (240 <= byte && byte < 365) {\n            var surrogatePair = [byte, input[++i], input[++i], input[++i]];\n            var encoded = \"%\" + surrogatePair.map(function (byteValue) { return byteValue.toString(16); }).join(\"%\");\n            decoded += decodeURIComponent(encoded);\n        }\n        else {\n            decoded += String.fromCharCode(((byte & 15) << 12) | ((input[++i] & 63) << 6) | (input[++i] & 63));\n        }\n    }\n    return decoded;\n};\n","export function fromUtf8(input) {\n    return new TextEncoder().encode(input);\n}\nexport function toUtf8(input) {\n    return new TextDecoder(\"utf-8\").decode(input);\n}\n"],"names":["r","registerInstance","h","c","createEvent","H","Host","g","getElement","Logger","browserOrNode","I18n","T","Translations","d","NO_INTERACTIONS_MODULE_FOUND","Interactions","RECORDER_EXPORT_MIME_TYPE","DEFAULT_EXPORT_SAMPLE_RATE","FFT_SIZE","FFT_MAX_DECIBELS","FFT_MIN_DECIBELS","FFT_SMOOTHING_TIME_CONSTANT","mergeBuffers","bufferArray","recLength","result","Float32Array","offset","i","length","set","downsampleBuffer","buffer","recordSampleRate","exportSampleRate","sampleRateRatio","newLength","Math","round","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","floatTo16BitPCM","output","input","byteOffset","s","max","min","setInt16","writeString","view","string","setUint8","charCodeAt","encodeWAV","samples","audioSize","fmtSize","dataSize","totalByteSize","ArrayBuffer","DataView","setUint32","setUint16","exportBuffer","recBuffer","mergedBuffers","downsampledBuffer","encodedWav","audioBlob","Blob","type","logger","AudioRecorder","constructor","options","streamBuffer","streamBufferLength","recording","init","isBrowser","window","AudioContext","webkitAudioContext","audioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","audioSupported","setupAudioNodes","catch","Promise","reject","resume","err","error","sourceNode","createMediaStreamSource","processorNode","createScriptProcessor","onaudioprocess","audioProcessingEvent","inputBuffer","getChannelData","push","analyse","analyserNode","createAnalyser","minDecibels","maxDecibels","smoothingTimeConstant","connect","context","destination","startRecording","onSilence","visualizer","start","Date","now","stopRecording","clear","play","myBlob","res","rej","fileReader","FileReader","onload","playbackSource","disconnect","createBufferSource","successCallback","buf","onended","errorCallback","decodeAudioData","onerror","readAsArrayBuffer","stop","analyser","fftSize","bufferLength","dataArray","Uint8Array","amplitude","time","getByteTimeDomainData","curr_value_time","newtime","elapsedTime","exportWAV","sampleRate","blob","visualize","canvas","Error","width","height","getBoundingClientRect","canvasCtx","getContext","fillStyle","clearRect","draw","fillRect","lineWidth","color","getComputedStyle","document","documentElement","getPropertyValue","strokeStyle","beginPath","sliceWidth","x","value","y","moveTo","lineTo","stroke","requestAnimationFrame","amplifyChatbotCss","ChatState","MessageFrom","ChatErrorType","AmplifyChatbot","hostRef","clearOnComplete","conversationModeOn","botTitle","CHATBOT_TITLE","voiceEnabled","textEnabled","silenceTime","silenceThreshold","messages","text","chatState","Initial","messageJSX","messageList","map","message","class","from","content","SendingText","SendingVoice","client","Bot","User","chatCompleted","submitHandler","_event","sendTextMessage","componentWillLoad","onComplete","validateProps","componentDidRender","body","element","shadowRoot","querySelector","scrollTop","scrollHeight","setError","CHAT_DISABLED_ERROR","Unrecoverable","botName","NO_BOT_NAME_ERROR","welcomeMessage","appendToChat","audioRecorder","Recoverable","data","emit","reset","handleMicButton","Listening","handleSilence","sendVoiceMessage","handleTextChange","event","target","handleCancelButton","handleToastClose","errorType","undefined","response","send","audioInput","interactionsMessage","messageType","dialogState","inputTranscript","audioStream","listeningFooterJSX","visualization","cancelButton","handleButtonClick","variant","icon","footerJSX","inputPlaceholder","TEXT_INPUT_PLACEHOLDER","VOICE_INPUT_PLACEHOLDER","textInput","placeholder","get","description","handleInputChange","evt","disabled","micButton","sendButton","errorToast","handleClose","render","name","style","amplify_chatbot"],"sourceRoot":"webpack:///"}